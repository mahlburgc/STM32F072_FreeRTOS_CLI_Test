
STM32F072_FreeRTOS_CLI_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077c8  080077c8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080077c8  080077c8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077c8  080077c8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c8  080077c8  000177c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077cc  080077cc  000177cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080077d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002854  20000088  08007858  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028dc  08007858  000228dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f62  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ad0  00000000  00000000  00047012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  0004bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa8  00000000  00000000  0004d768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de36  00000000  00000000  0004f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022000  00000000  00000000  0006d046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac817  00000000  00000000  0008f046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b85d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c78  00000000  00000000  0013b8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007260 	.word	0x08007260

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08007260 	.word	0x08007260

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <StartCliTask>:
    0
};


void StartCliTask(void *argument)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b087      	sub	sp, #28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

	int8_t cRxedChar, cInputIndex = 0;
 800024c:	2317      	movs	r3, #23
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
	BaseType_t xMoreDataToFollow;

	const uint32_t UART_TIMEOUT = 500;
 8000254:	23fa      	movs	r3, #250	; 0xfa
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	613b      	str	r3, [r7, #16]

	/* The input and output buffers are declared static to keep them off the stack. */
	static int8_t pcOutputString[ MAX_OUTPUT_LENGTH ] = { 0 };
	static int8_t pcInputString[ MAX_INPUT_LENGTH ] = { 0 };

	FreeRTOS_CLIRegisterCommand(&toggleLedCmd);
 800025a:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <StartCliTask+0x14c>)
 800025c:	0018      	movs	r0, r3
 800025e:	f004 f89b 	bl	8004398 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&turnOnLedCmd);
 8000262:	4b4c      	ldr	r3, [pc, #304]	; (8000394 <StartCliTask+0x150>)
 8000264:	0018      	movs	r0, r3
 8000266:	f004 f897 	bl	8004398 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&turnOffLedCmd);
 800026a:	4b4b      	ldr	r3, [pc, #300]	; (8000398 <StartCliTask+0x154>)
 800026c:	0018      	movs	r0, r3
 800026e:	f004 f893 	bl	8004398 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&clearScreenCmd);
 8000272:	4b4a      	ldr	r3, [pc, #296]	; (800039c <StartCliTask+0x158>)
 8000274:	0018      	movs	r0, r3
 8000276:	f004 f88f 	bl	8004398 <FreeRTOS_CLIRegisterCommand>


	HAL_UART_Transmit(&huart1, clearScreen, sizeof(clearScreen), UART_TIMEOUT);
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	4948      	ldr	r1, [pc, #288]	; (80003a0 <StartCliTask+0x15c>)
 800027e:	4849      	ldr	r0, [pc, #292]	; (80003a4 <StartCliTask+0x160>)
 8000280:	2205      	movs	r2, #5
 8000282:	f002 fe67 	bl	8002f54 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, resetCursor, sizeof(resetCursor), UART_TIMEOUT);
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	4947      	ldr	r1, [pc, #284]	; (80003a8 <StartCliTask+0x164>)
 800028a:	4846      	ldr	r0, [pc, #280]	; (80003a4 <StartCliTask+0x160>)
 800028c:	2204      	movs	r2, #4
 800028e:	f002 fe61 	bl	8002f54 <HAL_UART_Transmit>

	while (1)
	{

		/* Send a welcome message to the user knows they are connected. */
		HAL_UART_Transmit(&huart1, pcWelcomeMessage, strlen(pcWelcomeMessage), UART_TIMEOUT);
 8000292:	4946      	ldr	r1, [pc, #280]	; (80003ac <StartCliTask+0x168>)
 8000294:	2381      	movs	r3, #129	; 0x81
 8000296:	005a      	lsls	r2, r3, #1
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	4842      	ldr	r0, [pc, #264]	; (80003a4 <StartCliTask+0x160>)
 800029c:	f002 fe5a 	bl	8002f54 <HAL_UART_Transmit>

		for( ;; )
		{
			/* This implementation reads a single character at a time.  Wait in the
			Blocked state until a character is received. */
			HAL_UART_Receive(&huart1, &cRxedChar, sizeof(cRxedChar), portMAX_DELAY);
 80002a0:	2301      	movs	r3, #1
 80002a2:	425b      	negs	r3, r3
 80002a4:	240b      	movs	r4, #11
 80002a6:	1939      	adds	r1, r7, r4
 80002a8:	483e      	ldr	r0, [pc, #248]	; (80003a4 <StartCliTask+0x160>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	f002 fefc 	bl	80030a8 <HAL_UART_Receive>

			if( cRxedChar == '\n' )
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	b25b      	sxtb	r3, r3
 80002b6:	2b0a      	cmp	r3, #10
 80002b8:	d12b      	bne.n	8000312 <StartCliTask+0xce>
			{
				/* A newline character was received, so the input command string is
				complete and can be processed.  Transmit a line separator, just to
				make the output easier to read. */
				HAL_UART_Transmit(&huart1, "\r\n", strlen( "\r\n" ), UART_TIMEOUT);
 80002ba:	693b      	ldr	r3, [r7, #16]
 80002bc:	493c      	ldr	r1, [pc, #240]	; (80003b0 <StartCliTask+0x16c>)
 80002be:	4839      	ldr	r0, [pc, #228]	; (80003a4 <StartCliTask+0x160>)
 80002c0:	2202      	movs	r2, #2
 80002c2:	f002 fe47 	bl	8002f54 <HAL_UART_Transmit>
				do
				{
					/* Send the command string to the command interpreter.  Any
					output generated by the command interpreter will be placed in the
					pcOutputString buffer. */
					xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 80002c6:	493b      	ldr	r1, [pc, #236]	; (80003b4 <StartCliTask+0x170>)
 80002c8:	4b3b      	ldr	r3, [pc, #236]	; (80003b8 <StartCliTask+0x174>)
 80002ca:	2264      	movs	r2, #100	; 0x64
 80002cc:	0018      	movs	r0, r3
 80002ce:	f004 f895 	bl	80043fc <FreeRTOS_CLIProcessCommand>
 80002d2:	0003      	movs	r3, r0
 80002d4:	60fb      	str	r3, [r7, #12]
								  );

					/* Write the output generated by the command interpreter to the
					console. */
//					huart1.gState = HAL_UART_STATE_READY;
					HAL_UART_Transmit(&huart1, pcOutputString, strlen( pcOutputString ), 500);
 80002d6:	4b37      	ldr	r3, [pc, #220]	; (80003b4 <StartCliTask+0x170>)
 80002d8:	0018      	movs	r0, r3
 80002da:	f7ff ff15 	bl	8000108 <strlen>
 80002de:	0003      	movs	r3, r0
 80002e0:	b29a      	uxth	r2, r3
 80002e2:	23fa      	movs	r3, #250	; 0xfa
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	4933      	ldr	r1, [pc, #204]	; (80003b4 <StartCliTask+0x170>)
 80002e8:	482e      	ldr	r0, [pc, #184]	; (80003a4 <StartCliTask+0x160>)
 80002ea:	f002 fe33 	bl	8002f54 <HAL_UART_Transmit>

				} while( xMoreDataToFollow != pdFALSE );
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d1e8      	bne.n	80002c6 <StartCliTask+0x82>

				/* All the strings generated by the input command have been sent.
				Processing of the command is complete.  Clear the input string ready
				to receive the next command. */
				cRxedChar = 0;
 80002f4:	230b      	movs	r3, #11
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]
				cInputIndex = 0;
 80002fc:	2317      	movs	r3, #23
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]
				memset( pcInputString, 0x00, MAX_INPUT_LENGTH );
 8000304:	4b2c      	ldr	r3, [pc, #176]	; (80003b8 <StartCliTask+0x174>)
 8000306:	2232      	movs	r2, #50	; 0x32
 8000308:	2100      	movs	r1, #0
 800030a:	0018      	movs	r0, r3
 800030c:	f006 faeb 	bl	80068e6 <memset>
 8000310:	e7c6      	b.n	80002a0 <StartCliTask+0x5c>
			{
				/* The if() clause performs the processing after a newline character
				is received.  This else clause performs the processing if any other
				character is received. */

				if( (cRxedChar == '\r') || (cRxedChar == 0))
 8000312:	220b      	movs	r2, #11
 8000314:	18bb      	adds	r3, r7, r2
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	b25b      	sxtb	r3, r3
 800031a:	2b0d      	cmp	r3, #13
 800031c:	d0c0      	beq.n	80002a0 <StartCliTask+0x5c>
 800031e:	18bb      	adds	r3, r7, r2
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	b25b      	sxtb	r3, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0bb      	beq.n	80002a0 <StartCliTask+0x5c>
				{
					/* Ignore carriage returns. */
				}
				else if( cRxedChar == '\b' )
 8000328:	18bb      	adds	r3, r7, r2
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	b25b      	sxtb	r3, r3
 800032e:	2b08      	cmp	r3, #8
 8000330:	d114      	bne.n	800035c <StartCliTask+0x118>
				{
					/* Backspace was pressed.  Erase the last character in the input
					buffer - if there are any. */
					if( cInputIndex > 0 )
 8000332:	2117      	movs	r1, #23
 8000334:	187b      	adds	r3, r7, r1
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	b25b      	sxtb	r3, r3
 800033a:	2b00      	cmp	r3, #0
 800033c:	ddb0      	ble.n	80002a0 <StartCliTask+0x5c>
					{
						cInputIndex--;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	b25b      	sxtb	r3, r3
 8000344:	b2db      	uxtb	r3, r3
 8000346:	3b01      	subs	r3, #1
 8000348:	b2da      	uxtb	r2, r3
 800034a:	187b      	adds	r3, r7, r1
 800034c:	701a      	strb	r2, [r3, #0]
						pcInputString[ cInputIndex ] = 0;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	b25b      	sxtb	r3, r3
 8000354:	4a18      	ldr	r2, [pc, #96]	; (80003b8 <StartCliTask+0x174>)
 8000356:	2100      	movs	r1, #0
 8000358:	54d1      	strb	r1, [r2, r3]
 800035a:	e7a1      	b.n	80002a0 <StartCliTask+0x5c>
				{
					/* A character was entered.  It was not a new line, backspace
					or carriage return, so it is accepted as part of the input and
					placed into the input buffer.  When a n is entered the complete
					string will be passed to the command interpreter. */
					if( cInputIndex < MAX_INPUT_LENGTH )
 800035c:	2017      	movs	r0, #23
 800035e:	183b      	adds	r3, r7, r0
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b25b      	sxtb	r3, r3
 8000364:	2b31      	cmp	r3, #49	; 0x31
 8000366:	dc9b      	bgt.n	80002a0 <StartCliTask+0x5c>
					{
						pcInputString[ cInputIndex ] = cRxedChar;
 8000368:	183b      	adds	r3, r7, r0
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	b25b      	sxtb	r3, r3
 800036e:	220b      	movs	r2, #11
 8000370:	18ba      	adds	r2, r7, r2
 8000372:	2100      	movs	r1, #0
 8000374:	5651      	ldrsb	r1, [r2, r1]
 8000376:	4a10      	ldr	r2, [pc, #64]	; (80003b8 <StartCliTask+0x174>)
 8000378:	54d1      	strb	r1, [r2, r3]
						cInputIndex++;
 800037a:	0001      	movs	r1, r0
 800037c:	187b      	adds	r3, r7, r1
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	b25b      	sxtb	r3, r3
 8000382:	b2db      	uxtb	r3, r3
 8000384:	3301      	adds	r3, #1
 8000386:	b2da      	uxtb	r2, r3
 8000388:	187b      	adds	r3, r7, r1
 800038a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive(&huart1, &cRxedChar, sizeof(cRxedChar), portMAX_DELAY);
 800038c:	e788      	b.n	80002a0 <StartCliTask+0x5c>
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	0800765c 	.word	0x0800765c
 8000394:	0800766c 	.word	0x0800766c
 8000398:	0800767c 	.word	0x0800767c
 800039c:	0800768c 	.word	0x0800768c
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20001c84 	.word	0x20001c84
 80003a8:	20000008 	.word	0x20000008
 80003ac:	08007278 	.word	0x08007278
 80003b0:	080074a8 	.word	0x080074a8
 80003b4:	200000d8 	.word	0x200000d8
 80003b8:	200000a4 	.word	0x200000a4

080003bc <cliToggleLed>:
	}
}

/* user defined command example */
BaseType_t cliToggleLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
    (void) xWriteBufferLen;

	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <cliToggleLed+0x2c>)
 80003ca:	2180      	movs	r1, #128	; 0x80
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 f8f4 	bl	80015ba <HAL_GPIO_TogglePin>
	sprintf(pcWriteBuffer, "  LED was toggled\r\n\r\n");
 80003d2:	4a06      	ldr	r2, [pc, #24]	; (80003ec <cliToggleLed+0x30>)
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	0011      	movs	r1, r2
 80003d8:	0018      	movs	r0, r3
 80003da:	f006 fb71 	bl	8006ac0 <siprintf>

    return pdFALSE;
 80003de:	2300      	movs	r3, #0
}
 80003e0:	0018      	movs	r0, r3
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b004      	add	sp, #16
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	48000800 	.word	0x48000800
 80003ec:	080074ac 	.word	0x080074ac

080003f0 <cliTurnOnLed>:

BaseType_t cliTurnOnLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
	int8_t *pcParameter1;
	BaseType_t xParameter1StringLength, xResult;

	/* Obtain the name of the source file, and the length of its name, from
	    the command string. The name of the source file is the first parameter. */
	    pcParameter1 = FreeRTOS_CLIGetParameter
 80003fc:	2310      	movs	r3, #16
 80003fe:	18fa      	adds	r2, r7, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2101      	movs	r1, #1
 8000404:	0018      	movs	r0, r3
 8000406:	f004 f885 	bl	8004514 <FreeRTOS_CLIGetParameter>
 800040a:	0003      	movs	r3, r0
 800040c:	617b      	str	r3, [r7, #20]
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );

	if (strncmp(pcParameter1,"blue",xParameter1StringLength) == 0)
 800040e:	693b      	ldr	r3, [r7, #16]
 8000410:	001a      	movs	r2, r3
 8000412:	4925      	ldr	r1, [pc, #148]	; (80004a8 <cliTurnOnLed+0xb8>)
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	0018      	movs	r0, r3
 8000418:	f006 fb72 	bl	8006b00 <strncmp>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d106      	bne.n	800042e <cliTurnOnLed+0x3e>
	{
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000420:	4b22      	ldr	r3, [pc, #136]	; (80004ac <cliTurnOnLed+0xbc>)
 8000422:	2201      	movs	r2, #1
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0018      	movs	r0, r3
 8000428:	f001 f8aa 	bl	8001580 <HAL_GPIO_WritePin>
 800042c:	e030      	b.n	8000490 <cliTurnOnLed+0xa0>
	}
	else if (strncmp(pcParameter1,"orange",xParameter1StringLength) == 0)
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	001a      	movs	r2, r3
 8000432:	491f      	ldr	r1, [pc, #124]	; (80004b0 <cliTurnOnLed+0xc0>)
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	0018      	movs	r0, r3
 8000438:	f006 fb62 	bl	8006b00 <strncmp>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d107      	bne.n	8000450 <cliTurnOnLed+0x60>
	{
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000440:	2380      	movs	r3, #128	; 0x80
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	4819      	ldr	r0, [pc, #100]	; (80004ac <cliTurnOnLed+0xbc>)
 8000446:	2201      	movs	r2, #1
 8000448:	0019      	movs	r1, r3
 800044a:	f001 f899 	bl	8001580 <HAL_GPIO_WritePin>
 800044e:	e01f      	b.n	8000490 <cliTurnOnLed+0xa0>
	}
	else if (strncmp(pcParameter1,"red",xParameter1StringLength) == 0)
 8000450:	693b      	ldr	r3, [r7, #16]
 8000452:	001a      	movs	r2, r3
 8000454:	4917      	ldr	r1, [pc, #92]	; (80004b4 <cliTurnOnLed+0xc4>)
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	0018      	movs	r0, r3
 800045a:	f006 fb51 	bl	8006b00 <strncmp>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d106      	bne.n	8000470 <cliTurnOnLed+0x80>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000462:	4b12      	ldr	r3, [pc, #72]	; (80004ac <cliTurnOnLed+0xbc>)
 8000464:	2201      	movs	r2, #1
 8000466:	2140      	movs	r1, #64	; 0x40
 8000468:	0018      	movs	r0, r3
 800046a:	f001 f889 	bl	8001580 <HAL_GPIO_WritePin>
 800046e:	e00f      	b.n	8000490 <cliTurnOnLed+0xa0>
	}
	else if (strncmp(pcParameter1,"green",xParameter1StringLength) == 0)
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	001a      	movs	r2, r3
 8000474:	4910      	ldr	r1, [pc, #64]	; (80004b8 <cliTurnOnLed+0xc8>)
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	0018      	movs	r0, r3
 800047a:	f006 fb41 	bl	8006b00 <strncmp>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d106      	bne.n	8000490 <cliTurnOnLed+0xa0>
	{
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000482:	2380      	movs	r3, #128	; 0x80
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4809      	ldr	r0, [pc, #36]	; (80004ac <cliTurnOnLed+0xbc>)
 8000488:	2201      	movs	r2, #1
 800048a:	0019      	movs	r1, r3
 800048c:	f001 f878 	bl	8001580 <HAL_GPIO_WritePin>
	}

    sprintf(pcWriteBuffer, "  %s LED was turned on\r\n\r\n", pcParameter1);
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	490a      	ldr	r1, [pc, #40]	; (80004bc <cliTurnOnLed+0xcc>)
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	0018      	movs	r0, r3
 8000498:	f006 fb12 	bl	8006ac0 <siprintf>

    return pdFALSE;
 800049c:	2300      	movs	r3, #0
}
 800049e:	0018      	movs	r0, r3
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b006      	add	sp, #24
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	080074c4 	.word	0x080074c4
 80004ac:	48000800 	.word	0x48000800
 80004b0:	080074cc 	.word	0x080074cc
 80004b4:	080074d4 	.word	0x080074d4
 80004b8:	080074d8 	.word	0x080074d8
 80004bc:	080074e0 	.word	0x080074e0

080004c0 <cliTurnOffLed>:

BaseType_t cliTurnOffLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
	int8_t *pcParameter1;
	BaseType_t xParameter1StringLength, xResult;

	/* Obtain the name of the source file, and the length of its name, from
	    the command string. The name of the source file is the first parameter. */
	    pcParameter1 = FreeRTOS_CLIGetParameter
 80004cc:	2310      	movs	r3, #16
 80004ce:	18fa      	adds	r2, r7, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2101      	movs	r1, #1
 80004d4:	0018      	movs	r0, r3
 80004d6:	f004 f81d 	bl	8004514 <FreeRTOS_CLIGetParameter>
 80004da:	0003      	movs	r3, r0
 80004dc:	617b      	str	r3, [r7, #20]
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );

	if (strncmp(pcParameter1,"blue",xParameter1StringLength) == 0)
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	001a      	movs	r2, r3
 80004e2:	4925      	ldr	r1, [pc, #148]	; (8000578 <cliTurnOffLed+0xb8>)
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	0018      	movs	r0, r3
 80004e8:	f006 fb0a 	bl	8006b00 <strncmp>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d106      	bne.n	80004fe <cliTurnOffLed+0x3e>
	{
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <cliTurnOffLed+0xbc>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 f842 	bl	8001580 <HAL_GPIO_WritePin>
 80004fc:	e030      	b.n	8000560 <cliTurnOffLed+0xa0>
	}
	else if (strncmp(pcParameter1,"orange",xParameter1StringLength) == 0)
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	001a      	movs	r2, r3
 8000502:	491f      	ldr	r1, [pc, #124]	; (8000580 <cliTurnOffLed+0xc0>)
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	0018      	movs	r0, r3
 8000508:	f006 fafa 	bl	8006b00 <strncmp>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d107      	bne.n	8000520 <cliTurnOffLed+0x60>
	{
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	4819      	ldr	r0, [pc, #100]	; (800057c <cliTurnOffLed+0xbc>)
 8000516:	2200      	movs	r2, #0
 8000518:	0019      	movs	r1, r3
 800051a:	f001 f831 	bl	8001580 <HAL_GPIO_WritePin>
 800051e:	e01f      	b.n	8000560 <cliTurnOffLed+0xa0>
	}
	else if (strncmp(pcParameter1,"red",xParameter1StringLength) == 0)
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	001a      	movs	r2, r3
 8000524:	4917      	ldr	r1, [pc, #92]	; (8000584 <cliTurnOffLed+0xc4>)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	0018      	movs	r0, r3
 800052a:	f006 fae9 	bl	8006b00 <strncmp>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d106      	bne.n	8000540 <cliTurnOffLed+0x80>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <cliTurnOffLed+0xbc>)
 8000534:	2200      	movs	r2, #0
 8000536:	2140      	movs	r1, #64	; 0x40
 8000538:	0018      	movs	r0, r3
 800053a:	f001 f821 	bl	8001580 <HAL_GPIO_WritePin>
 800053e:	e00f      	b.n	8000560 <cliTurnOffLed+0xa0>
	}
	else if (strncmp(pcParameter1,"green",xParameter1StringLength) == 0)
 8000540:	693b      	ldr	r3, [r7, #16]
 8000542:	001a      	movs	r2, r3
 8000544:	4910      	ldr	r1, [pc, #64]	; (8000588 <cliTurnOffLed+0xc8>)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	0018      	movs	r0, r3
 800054a:	f006 fad9 	bl	8006b00 <strncmp>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d106      	bne.n	8000560 <cliTurnOffLed+0xa0>
	{
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <cliTurnOffLed+0xbc>)
 8000558:	2200      	movs	r2, #0
 800055a:	0019      	movs	r1, r3
 800055c:	f001 f810 	bl	8001580 <HAL_GPIO_WritePin>
	}

    sprintf(pcWriteBuffer, "  %s LED was turned off\r\n\r\n", pcParameter1);
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	490a      	ldr	r1, [pc, #40]	; (800058c <cliTurnOffLed+0xcc>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	0018      	movs	r0, r3
 8000568:	f006 faaa 	bl	8006ac0 <siprintf>

    return pdFALSE;
 800056c:	2300      	movs	r3, #0
}
 800056e:	0018      	movs	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	b006      	add	sp, #24
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	080074c4 	.word	0x080074c4
 800057c:	48000800 	.word	0x48000800
 8000580:	080074cc 	.word	0x080074cc
 8000584:	080074d4 	.word	0x080074d4
 8000588:	080074d8 	.word	0x080074d8
 800058c:	080074fc 	.word	0x080074fc

08000590 <cliClearScreen>:

BaseType_t cliClearScreen(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
    (void) xWriteBufferLen;

	sprintf(pcWriteBuffer, "%s %s", clearScreen, resetCursor);
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <cliClearScreen+0x24>)
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <cliClearScreen+0x28>)
 80005a0:	4906      	ldr	r1, [pc, #24]	; (80005bc <cliClearScreen+0x2c>)
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	f006 fa8c 	bl	8006ac0 <siprintf>

    return pdFALSE;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	0018      	movs	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b004      	add	sp, #16
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000000 	.word	0x20000000
 80005bc:	08007518 	.word	0x08007518

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fd0a 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f830 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f9b0 	bl	8000930 <MX_GPIO_Init>
  MX_I2C2_Init();
 80005d0:	f000 f896 	bl	8000700 <MX_I2C2_Init>
  MX_SPI2_Init();
 80005d4:	f000 f8d4 	bl	8000780 <MX_SPI2_Init>
  MX_TSC_Init();
 80005d8:	f000 f910 	bl	80007fc <MX_TSC_Init>
  MX_USB_PCD_Init();
 80005dc:	f000 f982 	bl	80008e4 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80005e0:	f000 f950 	bl	8000884 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e4:	f003 fd7e 	bl	80040e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <main+0x54>)
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <main+0x58>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	0018      	movs	r0, r3
 80005f0:	f003 fdd2 	bl	8004198 <osThreadNew>
 80005f4:	0002      	movs	r2, r0
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <main+0x5c>)
 80005f8:	601a      	str	r2, [r3, #0]

  /* creation of cliTask */
  cliTaskHandle = osThreadNew(StartCliTask, NULL, &cliTask_attributes);
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <main+0x60>)
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <main+0x64>)
 80005fe:	2100      	movs	r1, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f003 fdc9 	bl	8004198 <osThreadNew>
 8000606:	0002      	movs	r2, r0
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <main+0x68>)
 800060a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f003 fd96 	bl	800413c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x50>
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	0800769c 	.word	0x0800769c
 8000618:	08000a29 	.word	0x08000a29
 800061c:	20001b14 	.word	0x20001b14
 8000620:	080076c0 	.word	0x080076c0
 8000624:	08000245 	.word	0x08000245
 8000628:	20001b10 	.word	0x20001b10

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b099      	sub	sp, #100	; 0x64
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	242c      	movs	r4, #44	; 0x2c
 8000634:	193b      	adds	r3, r7, r4
 8000636:	0018      	movs	r0, r3
 8000638:	2334      	movs	r3, #52	; 0x34
 800063a:	001a      	movs	r2, r3
 800063c:	2100      	movs	r1, #0
 800063e:	f006 f952 	bl	80068e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000642:	231c      	movs	r3, #28
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	0018      	movs	r0, r3
 8000648:	2310      	movs	r3, #16
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f006 f94a 	bl	80068e6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000652:	003b      	movs	r3, r7
 8000654:	0018      	movs	r0, r3
 8000656:	231c      	movs	r3, #28
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f006 f943 	bl	80068e6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000660:	0021      	movs	r1, r4
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2222      	movs	r2, #34	; 0x22
 8000666:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2201      	movs	r2, #1
 800066c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2201      	movs	r2, #1
 8000672:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2210      	movs	r2, #16
 8000678:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2202      	movs	r2, #2
 800067e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	0212      	lsls	r2, r2, #8
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	0352      	lsls	r2, r2, #13
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	187b      	adds	r3, r7, r1
 8000698:	0018      	movs	r0, r3
 800069a:	f001 fa11 	bl	8001ac0 <HAL_RCC_OscConfig>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006a2:	f000 f9db 	bl	8000a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	211c      	movs	r1, #28
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2207      	movs	r2, #7
 80006ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2202      	movs	r2, #2
 80006b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2101      	movs	r1, #1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fd81 	bl	80021cc <HAL_RCC_ClockConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ce:	f000 f9c5 	bl	8000a5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1;
 80006d2:	003b      	movs	r3, r7
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <SystemClock_Config+0xd0>)
 80006d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006d8:	003b      	movs	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006de:	003b      	movs	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e4:	003b      	movs	r3, r7
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 ff14 	bl	8002514 <HAL_RCCEx_PeriphCLKConfig>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006f0:	f000 f9b4 	bl	8000a5c <Error_Handler>
  }
}
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b019      	add	sp, #100	; 0x64
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	00020001 	.word	0x00020001

08000700 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_I2C2_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_I2C2_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_I2C2_Init+0x74>)
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <MX_I2C2_Init+0x7c>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_I2C2_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_I2C2_Init+0x74>)
 8000718:	2201      	movs	r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_I2C2_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_I2C2_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C2_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C2_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2C2_Init+0x74>)
 800073c:	0018      	movs	r0, r3
 800073e:	f000 ff57 	bl	80015f0 <HAL_I2C_Init>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000746:	f000 f989 	bl	8000a5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_I2C2_Init+0x74>)
 800074c:	2100      	movs	r1, #0
 800074e:	0018      	movs	r0, r3
 8000750:	f000 ffe4 	bl	800171c <HAL_I2CEx_ConfigAnalogFilter>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 f980 	bl	8000a5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <MX_I2C2_Init+0x74>)
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f001 f827 	bl	80017b4 <HAL_I2CEx_ConfigDigitalFilter>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 f977 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20001b7c 	.word	0x20001b7c
 8000778:	40005800 	.word	0x40005800
 800077c:	20303e5d 	.word	0x20303e5d

08000780 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_SPI2_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_SPI2_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_SPI2_Init+0x74>)
 800078c:	2282      	movs	r2, #130	; 0x82
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_SPI2_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_SPI2_Init+0x74>)
 800079a:	22c0      	movs	r2, #192	; 0xc0
 800079c:	0092      	lsls	r2, r2, #2
 800079e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	0092      	lsls	r2, r2, #2
 80007b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007b6:	2208      	movs	r2, #8
 80007b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007da:	2208      	movs	r2, #8
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MX_SPI2_Init+0x74>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 ff95 	bl	8002710 <HAL_SPI_Init>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 f937 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20001b18 	.word	0x20001b18
 80007f8:	40003800 	.word	0x40003800

080007fc <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_TSC_Init+0x80>)
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <MX_TSC_Init+0x84>)
 8000804:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TSC_Init+0x80>)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	0552      	lsls	r2, r2, #21
 800080c:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_TSC_Init+0x80>)
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	0452      	lsls	r2, r2, #17
 8000814:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_TSC_Init+0x80>)
 8000818:	2200      	movs	r2, #0
 800081a:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_TSC_Init+0x80>)
 800081e:	2201      	movs	r2, #1
 8000820:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_TSC_Init+0x80>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_TSC_Init+0x80>)
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	0192      	lsls	r2, r2, #6
 800082e:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_TSC_Init+0x80>)
 8000832:	22a0      	movs	r2, #160	; 0xa0
 8000834:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_TSC_Init+0x80>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_TSC_Init+0x80>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_TSC_Init+0x80>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_TSC_Init+0x80>)
 800084a:	222c      	movs	r2, #44	; 0x2c
 800084c:	2100      	movs	r1, #0
 800084e:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_TSC_Init+0x80>)
 8000852:	2291      	movs	r2, #145	; 0x91
 8000854:	0092      	lsls	r2, r2, #2
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_TSC_Init+0x80>)
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_TSC_Init+0x80>)
 8000860:	2291      	movs	r2, #145	; 0x91
 8000862:	00d2      	lsls	r2, r2, #3
 8000864:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <MX_TSC_Init+0x80>)
 8000868:	0018      	movs	r0, r3
 800086a:	f002 fa79 	bl	8002d60 <HAL_TSC_Init>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 8000872:	f000 f8f3 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200027fc 	.word	0x200027fc
 8000880:	40024000 	.word	0x40024000

08000884 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <MX_USART1_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000890:	22e1      	movs	r2, #225	; 0xe1
 8000892:	0252      	lsls	r2, r2, #9
 8000894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x58>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f002 faef 	bl	8002eac <HAL_UART_Init>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f8c3 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20001c84 	.word	0x20001c84
 80008e0:	40013800 	.word	0x40013800

080008e4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USB_PCD_Init+0x44>)
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <MX_USB_PCD_Init+0x48>)
 80008ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USB_PCD_Init+0x44>)
 80008f0:	2208      	movs	r2, #8
 80008f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USB_PCD_Init+0x44>)
 80008f6:	2202      	movs	r2, #2
 80008f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USB_PCD_Init+0x44>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USB_PCD_Init+0x44>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USB_PCD_Init+0x44>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USB_PCD_Init+0x44>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <MX_USB_PCD_Init+0x44>)
 8000914:	0018      	movs	r0, r3
 8000916:	f000 ff99 	bl	800184c <HAL_PCD_Init>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800091e:	f000 f89d 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20002508 	.word	0x20002508
 800092c:	40005c00 	.word	0x40005c00

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	240c      	movs	r4, #12
 8000938:	193b      	adds	r3, r7, r4
 800093a:	0018      	movs	r0, r3
 800093c:	2314      	movs	r3, #20
 800093e:	001a      	movs	r2, r3
 8000940:	2100      	movs	r1, #0
 8000942:	f005 ffd0 	bl	80068e6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <MX_GPIO_Init+0xec>)
 8000948:	695a      	ldr	r2, [r3, #20]
 800094a:	4b34      	ldr	r3, [pc, #208]	; (8000a1c <MX_GPIO_Init+0xec>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	0309      	lsls	r1, r1, #12
 8000950:	430a      	orrs	r2, r1
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <MX_GPIO_Init+0xec>)
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	2380      	movs	r3, #128	; 0x80
 800095a:	031b      	lsls	r3, r3, #12
 800095c:	4013      	ands	r3, r2
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <MX_GPIO_Init+0xec>)
 8000964:	695a      	ldr	r2, [r3, #20]
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MX_GPIO_Init+0xec>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0289      	lsls	r1, r1, #10
 800096c:	430a      	orrs	r2, r1
 800096e:	615a      	str	r2, [r3, #20]
 8000970:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <MX_GPIO_Init+0xec>)
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	029b      	lsls	r3, r3, #10
 8000978:	4013      	ands	r3, r2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MX_GPIO_Init+0xec>)
 8000980:	695a      	ldr	r2, [r3, #20]
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <MX_GPIO_Init+0xec>)
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	02c9      	lsls	r1, r1, #11
 8000988:	430a      	orrs	r2, r1
 800098a:	615a      	str	r2, [r3, #20]
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_GPIO_Init+0xec>)
 800098e:	695a      	ldr	r2, [r3, #20]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	02db      	lsls	r3, r3, #11
 8000994:	4013      	ands	r3, r2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 800099a:	4921      	ldr	r1, [pc, #132]	; (8000a20 <MX_GPIO_Init+0xf0>)
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_GPIO_Init+0xf4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fded 	bl	8001580 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <MX_GPIO_Init+0xf0>)
 80009aa:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2201      	movs	r2, #1
 80009b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <MX_GPIO_Init+0xf4>)
 80009c2:	0019      	movs	r1, r3
 80009c4:	0010      	movs	r0, r2
 80009c6:	f000 fc63 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80009ca:	0021      	movs	r1, r4
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2206      	movs	r2, #6
 80009d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2290      	movs	r2, #144	; 0x90
 80009d6:	0352      	lsls	r2, r2, #13
 80009d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	000c      	movs	r4, r1
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <MX_GPIO_Init+0xf4>)
 80009e6:	0019      	movs	r1, r3
 80009e8:	0010      	movs	r0, r2
 80009ea:	f000 fc51 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ee:	0021      	movs	r1, r4
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2201      	movs	r2, #1
 80009f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2290      	movs	r2, #144	; 0x90
 80009fa:	0352      	lsls	r2, r2, #13
 80009fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a04:	187a      	adds	r2, r7, r1
 8000a06:	2390      	movs	r3, #144	; 0x90
 8000a08:	05db      	lsls	r3, r3, #23
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 fc3f 	bl	8001290 <HAL_GPIO_Init>

}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b009      	add	sp, #36	; 0x24
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	000003e1 	.word	0x000003e1
 8000a24:	48000800 	.word	0x48000800

08000a28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f003 fc59 	bl	80042e8 <osDelay>
 8000a36:	e7fb      	b.n	8000a30 <StartDefaultTask+0x8>

08000a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d101      	bne.n	8000a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4a:	f000 fadb 	bl	8001004 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40001000 	.word	0x40001000

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_MspInit+0x50>)
 8000a70:	699a      	ldr	r2, [r3, #24]
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_MspInit+0x50>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	619a      	str	r2, [r3, #24]
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x50>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x50>)
 8000a88:	69da      	ldr	r2, [r3, #28]
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_MspInit+0x50>)
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	0549      	lsls	r1, r1, #21
 8000a90:	430a      	orrs	r2, r1
 8000a92:	61da      	str	r2, [r3, #28]
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_MspInit+0x50>)
 8000a96:	69da      	ldr	r2, [r3, #28]
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	055b      	lsls	r3, r3, #21
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	425b      	negs	r3, r3
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fb4e 	bl	800114c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	2414      	movs	r4, #20
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	2314      	movs	r3, #20
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f005 ff09 	bl	80068e6 <memset>
  if(hi2c->Instance==I2C2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <HAL_I2C_MspInit+0x90>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d132      	bne.n	8000b44 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	02c9      	lsls	r1, r1, #11
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000aee:	695a      	ldr	r2, [r3, #20]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	02db      	lsls	r3, r3, #11
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	22c0      	movs	r2, #192	; 0xc0
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b02:	0021      	movs	r1, r4
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2212      	movs	r2, #18
 8000b08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2203      	movs	r2, #3
 8000b14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2201      	movs	r2, #1
 8000b1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <HAL_I2C_MspInit+0x98>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f000 fbb4 	bl	8001290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000b2a:	69da      	ldr	r2, [r3, #28]
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	03c9      	lsls	r1, r1, #15
 8000b32:	430a      	orrs	r2, r1
 8000b34:	61da      	str	r2, [r3, #28]
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000b38:	69da      	ldr	r2, [r3, #28]
 8000b3a:	2380      	movs	r3, #128	; 0x80
 8000b3c:	03db      	lsls	r3, r3, #15
 8000b3e:	4013      	ands	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b00b      	add	sp, #44	; 0x2c
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	40005800 	.word	0x40005800
 8000b50:	40021000 	.word	0x40021000
 8000b54:	48000400 	.word	0x48000400

08000b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b08b      	sub	sp, #44	; 0x2c
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	2414      	movs	r4, #20
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	0018      	movs	r0, r3
 8000b66:	2314      	movs	r3, #20
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f005 febb 	bl	80068e6 <memset>
  if(hspi->Instance==SPI2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1c      	ldr	r2, [pc, #112]	; (8000be8 <HAL_SPI_MspInit+0x90>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d132      	bne.n	8000be0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_SPI_MspInit+0x94>)
 8000b7c:	69da      	ldr	r2, [r3, #28]
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_SPI_MspInit+0x94>)
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	01c9      	lsls	r1, r1, #7
 8000b84:	430a      	orrs	r2, r1
 8000b86:	61da      	str	r2, [r3, #28]
 8000b88:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_SPI_MspInit+0x94>)
 8000b8a:	69da      	ldr	r2, [r3, #28]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	01db      	lsls	r3, r3, #7
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_SPI_MspInit+0x94>)
 8000b98:	695a      	ldr	r2, [r3, #20]
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_SPI_MspInit+0x94>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	02c9      	lsls	r1, r1, #11
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_SPI_MspInit+0x94>)
 8000ba6:	695a      	ldr	r2, [r3, #20]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	02db      	lsls	r3, r3, #11
 8000bac:	4013      	ands	r3, r2
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	22e0      	movs	r2, #224	; 0xe0
 8000bb6:	0212      	lsls	r2, r2, #8
 8000bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	0021      	movs	r1, r4
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_SPI_MspInit+0x98>)
 8000bd8:	0019      	movs	r1, r3
 8000bda:	0010      	movs	r0, r2
 8000bdc:	f000 fb58 	bl	8001290 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b00b      	add	sp, #44	; 0x2c
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	40003800 	.word	0x40003800
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000400 	.word	0x48000400

08000bf4 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	2414      	movs	r4, #20
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	0018      	movs	r0, r3
 8000c02:	2314      	movs	r3, #20
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f005 fe6d 	bl	80068e6 <memset>
  if(htsc->Instance==TSC)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a44      	ldr	r2, [pc, #272]	; (8000d24 <HAL_TSC_MspInit+0x130>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d000      	beq.n	8000c18 <HAL_TSC_MspInit+0x24>
 8000c16:	e080      	b.n	8000d1a <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000c18:	4b43      	ldr	r3, [pc, #268]	; (8000d28 <HAL_TSC_MspInit+0x134>)
 8000c1a:	695a      	ldr	r2, [r3, #20]
 8000c1c:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <HAL_TSC_MspInit+0x134>)
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	0449      	lsls	r1, r1, #17
 8000c22:	430a      	orrs	r2, r1
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	4b40      	ldr	r3, [pc, #256]	; (8000d28 <HAL_TSC_MspInit+0x134>)
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	045b      	lsls	r3, r3, #17
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b3c      	ldr	r3, [pc, #240]	; (8000d28 <HAL_TSC_MspInit+0x134>)
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <HAL_TSC_MspInit+0x134>)
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	0289      	lsls	r1, r1, #10
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	615a      	str	r2, [r3, #20]
 8000c42:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <HAL_TSC_MspInit+0x134>)
 8000c44:	695a      	ldr	r2, [r3, #20]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	029b      	lsls	r3, r3, #10
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <HAL_TSC_MspInit+0x134>)
 8000c52:	695a      	ldr	r2, [r3, #20]
 8000c54:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <HAL_TSC_MspInit+0x134>)
 8000c56:	2180      	movs	r1, #128	; 0x80
 8000c58:	02c9      	lsls	r1, r1, #11
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <HAL_TSC_MspInit+0x134>)
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	02db      	lsls	r3, r3, #11
 8000c66:	4013      	ands	r3, r2
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2244      	movs	r2, #68	; 0x44
 8000c70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2202      	movs	r2, #2
 8000c76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2203      	movs	r2, #3
 8000c88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	193a      	adds	r2, r7, r4
 8000c8c:	2390      	movs	r3, #144	; 0x90
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 fafc 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	2288      	movs	r2, #136	; 0x88
 8000c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2212      	movs	r2, #18
 8000ca2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	193a      	adds	r2, r7, r4
 8000cb8:	2390      	movs	r3, #144	; 0x90
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fae6 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2202      	movs	r2, #2
 8000cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	2203      	movs	r2, #3
 8000ce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	4a11      	ldr	r2, [pc, #68]	; (8000d2c <HAL_TSC_MspInit+0x138>)
 8000ce6:	0019      	movs	r1, r3
 8000ce8:	0010      	movs	r0, r2
 8000cea:	f000 fad1 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cee:	0021      	movs	r1, r4
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2212      	movs	r2, #18
 8000cfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_TSC_MspInit+0x138>)
 8000d12:	0019      	movs	r1, r3
 8000d14:	0010      	movs	r0, r2
 8000d16:	f000 fabb 	bl	8001290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b00b      	add	sp, #44	; 0x2c
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40024000 	.word	0x40024000
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48000400 	.word	0x48000400

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	; 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	2414      	movs	r4, #20
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2314      	movs	r3, #20
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f005 fdcf 	bl	80068e6 <memset>
  if(huart->Instance==USART1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <HAL_UART_MspInit+0xa4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d13b      	bne.n	8000dca <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d54:	699a      	ldr	r2, [r3, #24]
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	01c9      	lsls	r1, r1, #7
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	619a      	str	r2, [r3, #24]
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d62:	699a      	ldr	r2, [r3, #24]
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	0289      	lsls	r1, r1, #10
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_UART_MspInit+0xa8>)
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	22c0      	movs	r2, #192	; 0xc0
 8000d8e:	00d2      	lsls	r2, r2, #3
 8000d90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	0021      	movs	r1, r4
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2203      	movs	r2, #3
 8000da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2201      	movs	r2, #1
 8000daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	187a      	adds	r2, r7, r1
 8000dae:	2390      	movs	r3, #144	; 0x90
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 fa6b 	bl	8001290 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2103      	movs	r1, #3
 8000dbe:	201b      	movs	r0, #27
 8000dc0:	f000 f9c4 	bl	800114c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc4:	201b      	movs	r0, #27
 8000dc6:	f000 f9d6 	bl	8001176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b00b      	add	sp, #44	; 0x2c
 8000dd0:	bd90      	pop	{r4, r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	40013800 	.word	0x40013800
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_PCD_MspInit+0x38>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10d      	bne.n	8000e0a <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_PCD_MspInit+0x3c>)
 8000df0:	69da      	ldr	r2, [r3, #28]
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_PCD_MspInit+0x3c>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	0409      	lsls	r1, r1, #16
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	61da      	str	r2, [r3, #28]
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_PCD_MspInit+0x3c>)
 8000dfe:	69da      	ldr	r2, [r3, #28]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	041b      	lsls	r3, r3, #16
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b004      	add	sp, #16
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	40005c00 	.word	0x40005c00
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	0019      	movs	r1, r3
 8000e32:	2011      	movs	r0, #17
 8000e34:	f000 f98a 	bl	800114c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e38:	2011      	movs	r0, #17
 8000e3a:	f000 f99c 	bl	8001176 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000e40:	69da      	ldr	r2, [r3, #28]
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000e44:	2110      	movs	r1, #16
 8000e46:	430a      	orrs	r2, r1
 8000e48:	61da      	str	r2, [r3, #28]
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_InitTick+0xa4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	2210      	movs	r2, #16
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e56:	230c      	movs	r3, #12
 8000e58:	18fa      	adds	r2, r7, r3
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f001 fb2d 	bl	80024c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e66:	f001 fb15 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	4914      	ldr	r1, [pc, #80]	; (8000ec4 <HAL_InitTick+0xa8>)
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff f95a 	bl	800012c <__udivsi3>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0xac>)
 8000e80:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <HAL_InitTick+0xb0>)
 8000e82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_InitTick+0xac>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <HAL_InitTick+0xb4>)
 8000e88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_InitTick+0xac>)
 8000e8c:	6a3a      	ldr	r2, [r7, #32]
 8000e8e:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_InitTick+0xac>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_InitTick+0xac>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_InitTick+0xac>)
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 fcee 	bl	8002880 <HAL_TIM_Base_Init>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d105      	bne.n	8000eb4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <HAL_InitTick+0xac>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f001 fd40 	bl	8002930 <HAL_TIM_Base_Start_IT>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	e000      	b.n	8000eb6 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b00a      	add	sp, #40	; 0x28
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	000f4240 	.word	0x000f4240
 8000ec8:	20002840 	.word	0x20002840
 8000ecc:	40001000 	.word	0x40001000
 8000ed0:	000003e7 	.word	0x000003e7

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <TIM6_DAC_IRQHandler+0x14>)
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f001 fd74 	bl	80029d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	20002840 	.word	0x20002840

08000ef8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <USART1_IRQHandler+0x14>)
 8000efe:	0018      	movs	r0, r3
 8000f00:	f002 f9c2 	bl	8003288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	20001c84 	.word	0x20001c84

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f005 fc9c 	bl	800687c <__errno>
 8000f44:	0003      	movs	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	425b      	negs	r3, r3
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	18d2      	adds	r2, r2, r3
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <_sbrk+0x64>)
 8000f60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	0018      	movs	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b006      	add	sp, #24
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20004000 	.word	0x20004000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	2000013c 	.word	0x2000013c
 8000f78:	200028e0 	.word	0x200028e0

08000f7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8e:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f90:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <LoopForever+0xe>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa4:	4c0b      	ldr	r4, [pc, #44]	; (8000fd4 <LoopForever+0x16>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fb2:	f7ff ffe3 	bl	8000f7c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000fb6:	f005 fc67 	bl	8006888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fba:	f7ff fb01 	bl	80005c0 <main>

08000fbe <LoopForever>:

LoopForever:
    b LoopForever
 8000fbe:	e7fe      	b.n	8000fbe <LoopForever>
  ldr   r0, =_estack
 8000fc0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000fcc:	080077d0 	.word	0x080077d0
  ldr r2, =_sbss
 8000fd0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000fd4:	200028dc 	.word	0x200028dc

08000fd8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_COMP_IRQHandler>
	...

08000fdc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <HAL_Init+0x24>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_Init+0x24>)
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f7ff ff15 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff2:	f7ff fd39 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	40022000 	.word	0x40022000

08001004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_IncTick+0x1c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	001a      	movs	r2, r3
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x20>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	18d2      	adds	r2, r2, r3
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_IncTick+0x20>)
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	20000010 	.word	0x20000010
 8001024:	20002888 	.word	0x20002888

08001028 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <HAL_GetTick+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	20002888 	.word	0x20002888

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	0002      	movs	r2, r0
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b7f      	cmp	r3, #127	; 0x7f
 800104e:	d809      	bhi.n	8001064 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	001a      	movs	r2, r3
 8001056:	231f      	movs	r3, #31
 8001058:	401a      	ands	r2, r3
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_EnableIRQ+0x30>)
 800105c:	2101      	movs	r1, #1
 800105e:	4091      	lsls	r1, r2
 8001060:	000a      	movs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
  }
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	0002      	movs	r2, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b7f      	cmp	r3, #127	; 0x7f
 8001084:	d828      	bhi.n	80010d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001086:	4a2f      	ldr	r2, [pc, #188]	; (8001144 <__NVIC_SetPriority+0xd4>)
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b25b      	sxtb	r3, r3
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	33c0      	adds	r3, #192	; 0xc0
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	589b      	ldr	r3, [r3, r2]
 8001096:	1dfa      	adds	r2, r7, #7
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	0011      	movs	r1, r2
 800109c:	2203      	movs	r2, #3
 800109e:	400a      	ands	r2, r1
 80010a0:	00d2      	lsls	r2, r2, #3
 80010a2:	21ff      	movs	r1, #255	; 0xff
 80010a4:	4091      	lsls	r1, r2
 80010a6:	000a      	movs	r2, r1
 80010a8:	43d2      	mvns	r2, r2
 80010aa:	401a      	ands	r2, r3
 80010ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	019b      	lsls	r3, r3, #6
 80010b2:	22ff      	movs	r2, #255	; 0xff
 80010b4:	401a      	ands	r2, r3
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	0018      	movs	r0, r3
 80010bc:	2303      	movs	r3, #3
 80010be:	4003      	ands	r3, r0
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c4:	481f      	ldr	r0, [pc, #124]	; (8001144 <__NVIC_SetPriority+0xd4>)
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	430a      	orrs	r2, r1
 80010d0:	33c0      	adds	r3, #192	; 0xc0
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010d6:	e031      	b.n	800113c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d8:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <__NVIC_SetPriority+0xd8>)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	0019      	movs	r1, r3
 80010e0:	230f      	movs	r3, #15
 80010e2:	400b      	ands	r3, r1
 80010e4:	3b08      	subs	r3, #8
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3306      	adds	r3, #6
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	18d3      	adds	r3, r2, r3
 80010ee:	3304      	adds	r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	1dfa      	adds	r2, r7, #7
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	0011      	movs	r1, r2
 80010f8:	2203      	movs	r2, #3
 80010fa:	400a      	ands	r2, r1
 80010fc:	00d2      	lsls	r2, r2, #3
 80010fe:	21ff      	movs	r1, #255	; 0xff
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	43d2      	mvns	r2, r2
 8001106:	401a      	ands	r2, r3
 8001108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	401a      	ands	r2, r3
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	0018      	movs	r0, r3
 8001118:	2303      	movs	r3, #3
 800111a:	4003      	ands	r3, r0
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <__NVIC_SetPriority+0xd8>)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	001c      	movs	r4, r3
 8001128:	230f      	movs	r3, #15
 800112a:	4023      	ands	r3, r4
 800112c:	3b08      	subs	r3, #8
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	430a      	orrs	r2, r1
 8001132:	3306      	adds	r3, #6
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	18c3      	adds	r3, r0, r3
 8001138:	3304      	adds	r3, #4
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	46c0      	nop			; (mov r8, r8)
 800113e:	46bd      	mov	sp, r7
 8001140:	b003      	add	sp, #12
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	210f      	movs	r1, #15
 8001158:	187b      	adds	r3, r7, r1
 800115a:	1c02      	adds	r2, r0, #0
 800115c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	187b      	adds	r3, r7, r1
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	0011      	movs	r1, r2
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ff81 	bl	8001070 <__NVIC_SetPriority>
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	b004      	add	sp, #16
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	0002      	movs	r2, r0
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff ff57 	bl	800103c <__NVIC_EnableIRQ>
}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2221      	movs	r2, #33	; 0x21
 80011a2:	5c9b      	ldrb	r3, [r3, r2]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d008      	beq.n	80011bc <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2204      	movs	r2, #4
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2220      	movs	r2, #32
 80011b4:	2100      	movs	r1, #0
 80011b6:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e020      	b.n	80011fe <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	210e      	movs	r1, #14
 80011c8:	438a      	bics	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2101      	movs	r1, #1
 80011d8:	438a      	bics	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e4:	2101      	movs	r1, #1
 80011e6:	4091      	lsls	r1, r2
 80011e8:	000a      	movs	r2, r1
 80011ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2221      	movs	r2, #33	; 0x21
 80011f0:	2101      	movs	r1, #1
 80011f2:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2220      	movs	r2, #32
 80011f8:	2100      	movs	r1, #0
 80011fa:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b002      	add	sp, #8
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001206:	b580      	push	{r7, lr}
 8001208:	b084      	sub	sp, #16
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800120e:	210f      	movs	r1, #15
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2221      	movs	r2, #33	; 0x21
 800121a:	5c9b      	ldrb	r3, [r3, r2]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d006      	beq.n	8001230 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2204      	movs	r2, #4
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
 800122e:	e028      	b.n	8001282 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	210e      	movs	r1, #14
 800123c:	438a      	bics	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2101      	movs	r1, #1
 800124c:	438a      	bics	r2, r1
 800124e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001258:	2101      	movs	r1, #1
 800125a:	4091      	lsls	r1, r2
 800125c:	000a      	movs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2221      	movs	r2, #33	; 0x21
 8001264:	2101      	movs	r1, #1
 8001266:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2220      	movs	r2, #32
 800126c:	2100      	movs	r1, #0
 800126e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	0010      	movs	r0, r2
 8001280:	4798      	blx	r3
    } 
  }
  return status;
 8001282:	230f      	movs	r3, #15
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	781b      	ldrb	r3, [r3, #0]
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129e:	e155      	b.n	800154c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4091      	lsls	r1, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d100      	bne.n	80012b8 <HAL_GPIO_Init+0x28>
 80012b6:	e146      	b.n	8001546 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2203      	movs	r2, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d005      	beq.n	80012d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2203      	movs	r2, #3
 80012ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d130      	bne.n	8001332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	43da      	mvns	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	409a      	lsls	r2, r3
 80012f2:	0013      	movs	r3, r2
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001306:	2201      	movs	r2, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	2201      	movs	r2, #1
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2203      	movs	r2, #3
 8001338:	4013      	ands	r3, r2
 800133a:	2b03      	cmp	r3, #3
 800133c:	d017      	beq.n	800136e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2203      	movs	r2, #3
 8001374:	4013      	ands	r3, r2
 8001376:	2b02      	cmp	r3, #2
 8001378:	d123      	bne.n	80013c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3208      	adds	r2, #8
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	58d3      	ldr	r3, [r2, r3]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2207      	movs	r2, #7
 800138c:	4013      	ands	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	43da      	mvns	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	2107      	movs	r1, #7
 80013a6:	400b      	ands	r3, r1
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	6939      	ldr	r1, [r7, #16]
 80013c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	2203      	movs	r2, #3
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	43da      	mvns	r2, r3
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2203      	movs	r2, #3
 80013e0:	401a      	ands	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	23c0      	movs	r3, #192	; 0xc0
 80013fc:	029b      	lsls	r3, r3, #10
 80013fe:	4013      	ands	r3, r2
 8001400:	d100      	bne.n	8001404 <HAL_GPIO_Init+0x174>
 8001402:	e0a0      	b.n	8001546 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001404:	4b57      	ldr	r3, [pc, #348]	; (8001564 <HAL_GPIO_Init+0x2d4>)
 8001406:	699a      	ldr	r2, [r3, #24]
 8001408:	4b56      	ldr	r3, [pc, #344]	; (8001564 <HAL_GPIO_Init+0x2d4>)
 800140a:	2101      	movs	r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	619a      	str	r2, [r3, #24]
 8001410:	4b54      	ldr	r3, [pc, #336]	; (8001564 <HAL_GPIO_Init+0x2d4>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2201      	movs	r2, #1
 8001416:	4013      	ands	r3, r2
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800141c:	4a52      	ldr	r2, [pc, #328]	; (8001568 <HAL_GPIO_Init+0x2d8>)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	3302      	adds	r3, #2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	589b      	ldr	r3, [r3, r2]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2203      	movs	r2, #3
 800142e:	4013      	ands	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	220f      	movs	r2, #15
 8001434:	409a      	lsls	r2, r3
 8001436:	0013      	movs	r3, r2
 8001438:	43da      	mvns	r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	2390      	movs	r3, #144	; 0x90
 8001444:	05db      	lsls	r3, r3, #23
 8001446:	429a      	cmp	r2, r3
 8001448:	d019      	beq.n	800147e <HAL_GPIO_Init+0x1ee>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a47      	ldr	r2, [pc, #284]	; (800156c <HAL_GPIO_Init+0x2dc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0x1ea>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a46      	ldr	r2, [pc, #280]	; (8001570 <HAL_GPIO_Init+0x2e0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00d      	beq.n	8001476 <HAL_GPIO_Init+0x1e6>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a45      	ldr	r2, [pc, #276]	; (8001574 <HAL_GPIO_Init+0x2e4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x1e2>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a44      	ldr	r2, [pc, #272]	; (8001578 <HAL_GPIO_Init+0x2e8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_GPIO_Init+0x1de>
 800146a:	2304      	movs	r3, #4
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x1f0>
 800146e:	2305      	movs	r3, #5
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x1f0>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x1f0>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x1f0>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x1f0>
 800147e:	2300      	movs	r3, #0
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	2103      	movs	r1, #3
 8001484:	400a      	ands	r2, r1
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <HAL_GPIO_Init+0x2d8>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149e:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43da      	mvns	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	4013      	ands	r3, r2
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43da      	mvns	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	029b      	lsls	r3, r3, #10
 80014e0:	4013      	ands	r3, r2
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_GPIO_Init+0x2ec>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43da      	mvns	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	035b      	lsls	r3, r3, #13
 800150a:	4013      	ands	r3, r2
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_GPIO_Init+0x2ec>)
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_GPIO_Init+0x2ec>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43da      	mvns	r2, r3
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	039b      	lsls	r3, r3, #14
 8001534:	4013      	ands	r3, r2
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_GPIO_Init+0x2ec>)
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	40da      	lsrs	r2, r3
 8001554:	1e13      	subs	r3, r2, #0
 8001556:	d000      	beq.n	800155a <HAL_GPIO_Init+0x2ca>
 8001558:	e6a2      	b.n	80012a0 <HAL_GPIO_Init+0x10>
  } 
}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b006      	add	sp, #24
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	48000400 	.word	0x48000400
 8001570:	48000800 	.word	0x48000800
 8001574:	48000c00 	.word	0x48000c00
 8001578:	48001000 	.word	0x48001000
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	0008      	movs	r0, r1
 800158a:	0011      	movs	r1, r2
 800158c:	1cbb      	adds	r3, r7, #2
 800158e:	1c02      	adds	r2, r0, #0
 8001590:	801a      	strh	r2, [r3, #0]
 8001592:	1c7b      	adds	r3, r7, #1
 8001594:	1c0a      	adds	r2, r1, #0
 8001596:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001598:	1c7b      	adds	r3, r7, #1
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d004      	beq.n	80015aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a0:	1cbb      	adds	r3, r7, #2
 80015a2:	881a      	ldrh	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015aa:	1cbb      	adds	r3, r7, #2
 80015ac:	881a      	ldrh	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b002      	add	sp, #8
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	000a      	movs	r2, r1
 80015c4:	1cbb      	adds	r3, r7, #2
 80015c6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ce:	1cbb      	adds	r3, r7, #2
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	041a      	lsls	r2, r3, #16
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	1cb9      	adds	r1, r7, #2
 80015de:	8809      	ldrh	r1, [r1, #0]
 80015e0:	400b      	ands	r3, r1
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b004      	add	sp, #16
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e082      	b.n	8001708 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2241      	movs	r2, #65	; 0x41
 8001606:	5c9b      	ldrb	r3, [r3, r2]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d107      	bne.n	800161e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2240      	movs	r2, #64	; 0x40
 8001612:	2100      	movs	r1, #0
 8001614:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff fa4f 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2241      	movs	r2, #65	; 0x41
 8001622:	2124      	movs	r1, #36	; 0x24
 8001624:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	438a      	bics	r2, r1
 8001634:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4934      	ldr	r1, [pc, #208]	; (8001710 <HAL_I2C_Init+0x120>)
 8001640:	400a      	ands	r2, r1
 8001642:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4931      	ldr	r1, [pc, #196]	; (8001714 <HAL_I2C_Init+0x124>)
 8001650:	400a      	ands	r2, r1
 8001652:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d108      	bne.n	800166e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	0209      	lsls	r1, r1, #8
 8001668:	430a      	orrs	r2, r1
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	e007      	b.n	800167e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2184      	movs	r1, #132	; 0x84
 8001678:	0209      	lsls	r1, r1, #8
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d104      	bne.n	8001690 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	491f      	ldr	r1, [pc, #124]	; (8001718 <HAL_I2C_Init+0x128>)
 800169c:	430a      	orrs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	491a      	ldr	r1, [pc, #104]	; (8001714 <HAL_I2C_Init+0x124>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69d9      	ldr	r1, [r3, #28]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1a      	ldr	r2, [r3, #32]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2241      	movs	r2, #65	; 0x41
 80016f4:	2120      	movs	r1, #32
 80016f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2242      	movs	r2, #66	; 0x42
 8001702:	2100      	movs	r1, #0
 8001704:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b002      	add	sp, #8
 800170e:	bd80      	pop	{r7, pc}
 8001710:	f0ffffff 	.word	0xf0ffffff
 8001714:	ffff7fff 	.word	0xffff7fff
 8001718:	02008000 	.word	0x02008000

0800171c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2241      	movs	r2, #65	; 0x41
 800172a:	5c9b      	ldrb	r3, [r3, r2]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b20      	cmp	r3, #32
 8001730:	d138      	bne.n	80017a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2240      	movs	r2, #64	; 0x40
 8001736:	5c9b      	ldrb	r3, [r3, r2]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800173c:	2302      	movs	r3, #2
 800173e:	e032      	b.n	80017a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2240      	movs	r2, #64	; 0x40
 8001744:	2101      	movs	r1, #1
 8001746:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2241      	movs	r2, #65	; 0x41
 800174c:	2124      	movs	r1, #36	; 0x24
 800174e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2101      	movs	r1, #1
 800175c:	438a      	bics	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4911      	ldr	r1, [pc, #68]	; (80017b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6819      	ldr	r1, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2241      	movs	r2, #65	; 0x41
 8001794:	2120      	movs	r1, #32
 8001796:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	2100      	movs	r1, #0
 800179e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e000      	b.n	80017a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017a4:	2302      	movs	r3, #2
  }
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b002      	add	sp, #8
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	ffffefff 	.word	0xffffefff

080017b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2241      	movs	r2, #65	; 0x41
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d139      	bne.n	800183e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2240      	movs	r2, #64	; 0x40
 80017ce:	5c9b      	ldrb	r3, [r3, r2]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e033      	b.n	8001840 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2240      	movs	r2, #64	; 0x40
 80017dc:	2101      	movs	r1, #1
 80017de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2241      	movs	r2, #65	; 0x41
 80017e4:	2124      	movs	r1, #36	; 0x24
 80017e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2101      	movs	r1, #1
 80017f4:	438a      	bics	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4a11      	ldr	r2, [pc, #68]	; (8001848 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2241      	movs	r2, #65	; 0x41
 800182e:	2120      	movs	r1, #32
 8001830:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2240      	movs	r2, #64	; 0x40
 8001836:	2100      	movs	r1, #0
 8001838:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e000      	b.n	8001840 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800183e:	2302      	movs	r3, #2
  }
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b004      	add	sp, #16
 8001846:	bd80      	pop	{r7, pc}
 8001848:	fffff0ff 	.word	0xfffff0ff

0800184c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800184c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af06      	add	r7, sp, #24
 8001852:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0ff      	b.n	8001a5e <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a81      	ldr	r2, [pc, #516]	; (8001a68 <HAL_PCD_Init+0x21c>)
 8001862:	5c9b      	ldrb	r3, [r3, r2]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d108      	bne.n	800187c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	23aa      	movs	r3, #170	; 0xaa
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	2100      	movs	r1, #0
 8001872:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	0018      	movs	r0, r3
 8001878:	f7ff fab0 	bl	8000ddc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a7a      	ldr	r2, [pc, #488]	; (8001a68 <HAL_PCD_Init+0x21c>)
 8001880:	2103      	movs	r1, #3
 8001882:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0018      	movs	r0, r3
 800188a:	f002 fbe5 	bl	8004058 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188e:	230f      	movs	r3, #15
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	e058      	b.n	800194a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001898:	200f      	movs	r0, #15
 800189a:	183b      	adds	r3, r7, r0
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	0013      	movs	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	189b      	adds	r3, r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	18cb      	adds	r3, r1, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018b2:	183b      	adds	r3, r7, r0
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	0013      	movs	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	189b      	adds	r3, r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	183a      	adds	r2, r7, r0
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018c8:	0004      	movs	r4, r0
 80018ca:	183b      	adds	r3, r7, r0
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b298      	uxth	r0, r3
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	0013      	movs	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	189b      	adds	r3, r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	18cb      	adds	r3, r1, r3
 80018e0:	3336      	adds	r3, #54	; 0x36
 80018e2:	1c02      	adds	r2, r0, #0
 80018e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	0013      	movs	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	189b      	adds	r3, r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	18cb      	adds	r3, r1, r3
 80018f8:	3303      	adds	r3, #3
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018fe:	193b      	adds	r3, r7, r4
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	0013      	movs	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	189b      	adds	r3, r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	18cb      	adds	r3, r1, r3
 800190e:	3338      	adds	r3, #56	; 0x38
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001914:	193b      	adds	r3, r7, r4
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	0013      	movs	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	189b      	adds	r3, r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	18cb      	adds	r3, r1, r3
 8001924:	333c      	adds	r3, #60	; 0x3c
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800192a:	193b      	adds	r3, r7, r4
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	0013      	movs	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	189b      	adds	r3, r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	18cb      	adds	r3, r1, r3
 800193a:	3340      	adds	r3, #64	; 0x40
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001940:	193b      	adds	r3, r7, r4
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	193b      	adds	r3, r7, r4
 8001946:	3201      	adds	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	210f      	movs	r1, #15
 800194c:	187b      	adds	r3, r7, r1
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	d39f      	bcc.n	8001898 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	e056      	b.n	8001a0e <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001960:	240f      	movs	r4, #15
 8001962:	193b      	adds	r3, r7, r4
 8001964:	781a      	ldrb	r2, [r3, #0]
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	236a      	movs	r3, #106	; 0x6a
 800196a:	33ff      	adds	r3, #255	; 0xff
 800196c:	0019      	movs	r1, r3
 800196e:	0013      	movs	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	189b      	adds	r3, r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	18c3      	adds	r3, r0, r3
 8001978:	185b      	adds	r3, r3, r1
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800197e:	193b      	adds	r3, r7, r4
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	23b4      	movs	r3, #180	; 0xb4
 8001986:	0059      	lsls	r1, r3, #1
 8001988:	0013      	movs	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	189b      	adds	r3, r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	18c3      	adds	r3, r0, r3
 8001992:	185b      	adds	r3, r3, r1
 8001994:	193a      	adds	r2, r7, r4
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800199a:	193b      	adds	r3, r7, r4
 800199c:	781a      	ldrb	r2, [r3, #0]
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	236c      	movs	r3, #108	; 0x6c
 80019a2:	33ff      	adds	r3, #255	; 0xff
 80019a4:	0019      	movs	r1, r3
 80019a6:	0013      	movs	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	189b      	adds	r3, r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	18c3      	adds	r3, r0, r3
 80019b0:	185b      	adds	r3, r3, r1
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019b6:	193b      	adds	r3, r7, r4
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	23bc      	movs	r3, #188	; 0xbc
 80019be:	0059      	lsls	r1, r3, #1
 80019c0:	0013      	movs	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	189b      	adds	r3, r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	18c3      	adds	r3, r0, r3
 80019ca:	185b      	adds	r3, r3, r1
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019d0:	193b      	adds	r3, r7, r4
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	23be      	movs	r3, #190	; 0xbe
 80019d8:	0059      	lsls	r1, r3, #1
 80019da:	0013      	movs	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	189b      	adds	r3, r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	18c3      	adds	r3, r0, r3
 80019e4:	185b      	adds	r3, r3, r1
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019ea:	193b      	adds	r3, r7, r4
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	23c0      	movs	r3, #192	; 0xc0
 80019f2:	0059      	lsls	r1, r3, #1
 80019f4:	0013      	movs	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	189b      	adds	r3, r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	18c3      	adds	r3, r0, r3
 80019fe:	185b      	adds	r3, r3, r1
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	3201      	adds	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	230f      	movs	r3, #15
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	781a      	ldrb	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d3a1      	bcc.n	8001960 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	466a      	mov	r2, sp
 8001a24:	0011      	movs	r1, r2
 8001a26:	001a      	movs	r2, r3
 8001a28:	3210      	adds	r2, #16
 8001a2a:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001a2c:	c170      	stmia	r1!, {r4, r5, r6}
 8001a2e:	ca30      	ldmia	r2!, {r4, r5}
 8001a30:	c130      	stmia	r1!, {r4, r5}
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f002 fb28 	bl	800408c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2224      	movs	r2, #36	; 0x24
 8001a40:	2100      	movs	r1, #0
 8001a42:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_PCD_Init+0x21c>)
 8001a48:	2101      	movs	r1, #1
 8001a4a:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d103      	bne.n	8001a5c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 f808 	bl	8001a6c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b005      	add	sp, #20
 8001a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	000002a9 	.word	0x000002a9

08001a6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	23ba      	movs	r3, #186	; 0xba
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	2101      	movs	r1, #1
 8001a82:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	23b8      	movs	r3, #184	; 0xb8
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2254      	movs	r2, #84	; 0x54
 8001a92:	5a9b      	ldrh	r3, [r3, r2]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2201      	movs	r2, #1
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b299      	uxth	r1, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2254      	movs	r2, #84	; 0x54
 8001aa0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2254      	movs	r2, #84	; 0x54
 8001aa6:	5a9b      	ldrh	r3, [r3, r2]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b299      	uxth	r1, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2254      	movs	r2, #84	; 0x54
 8001ab4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b004      	add	sp, #16
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f000 fb76 	bl	80021c0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	d100      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x20>
 8001ade:	e08e      	b.n	8001bfe <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ae0:	4bc5      	ldr	r3, [pc, #788]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d00e      	beq.n	8001b0a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aec:	4bc2      	ldr	r3, [pc, #776]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	220c      	movs	r2, #12
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d117      	bne.n	8001b28 <HAL_RCC_OscConfig+0x68>
 8001af8:	4bbf      	ldr	r3, [pc, #764]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	23c0      	movs	r3, #192	; 0xc0
 8001afe:	025b      	lsls	r3, r3, #9
 8001b00:	401a      	ands	r2, r3
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d10e      	bne.n	8001b28 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	4bbb      	ldr	r3, [pc, #748]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	029b      	lsls	r3, r3, #10
 8001b12:	4013      	ands	r3, r2
 8001b14:	d100      	bne.n	8001b18 <HAL_RCC_OscConfig+0x58>
 8001b16:	e071      	b.n	8001bfc <HAL_RCC_OscConfig+0x13c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d000      	beq.n	8001b22 <HAL_RCC_OscConfig+0x62>
 8001b20:	e06c      	b.n	8001bfc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f000 fb4c 	bl	80021c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x80>
 8001b30:	4bb1      	ldr	r3, [pc, #708]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4bb0      	ldr	r3, [pc, #704]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	0249      	lsls	r1, r1, #9
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e02f      	b.n	8001ba0 <HAL_RCC_OscConfig+0xe0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10c      	bne.n	8001b62 <HAL_RCC_OscConfig+0xa2>
 8001b48:	4bab      	ldr	r3, [pc, #684]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4baa      	ldr	r3, [pc, #680]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b4e:	49ab      	ldr	r1, [pc, #684]	; (8001dfc <HAL_RCC_OscConfig+0x33c>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	4ba8      	ldr	r3, [pc, #672]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4ba7      	ldr	r3, [pc, #668]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b5a:	49a9      	ldr	r1, [pc, #676]	; (8001e00 <HAL_RCC_OscConfig+0x340>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e01e      	b.n	8001ba0 <HAL_RCC_OscConfig+0xe0>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d10e      	bne.n	8001b88 <HAL_RCC_OscConfig+0xc8>
 8001b6a:	4ba3      	ldr	r3, [pc, #652]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4ba2      	ldr	r3, [pc, #648]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	02c9      	lsls	r1, r1, #11
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4b9f      	ldr	r3, [pc, #636]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b9e      	ldr	r3, [pc, #632]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b7e:	2180      	movs	r1, #128	; 0x80
 8001b80:	0249      	lsls	r1, r1, #9
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xe0>
 8001b88:	4b9b      	ldr	r3, [pc, #620]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b9a      	ldr	r3, [pc, #616]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b8e:	499b      	ldr	r1, [pc, #620]	; (8001dfc <HAL_RCC_OscConfig+0x33c>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	4b98      	ldr	r3, [pc, #608]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b97      	ldr	r3, [pc, #604]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001b9a:	4999      	ldr	r1, [pc, #612]	; (8001e00 <HAL_RCC_OscConfig+0x340>)
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d014      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fa3e 	bl	8001028 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb2:	f7ff fa39 	bl	8001028 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b64      	cmp	r3, #100	; 0x64
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e2fd      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc4:	4b8c      	ldr	r3, [pc, #560]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	029b      	lsls	r3, r3, #10
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0xf2>
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fa29 	bl	8001028 <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fa24 	bl	8001028 <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e2e8      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	029b      	lsls	r3, r3, #10
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x11c>
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2202      	movs	r2, #2
 8001c04:	4013      	ands	r3, r2
 8001c06:	d100      	bne.n	8001c0a <HAL_RCC_OscConfig+0x14a>
 8001c08:	e06c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c0a:	4b7b      	ldr	r3, [pc, #492]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	220c      	movs	r2, #12
 8001c10:	4013      	ands	r3, r2
 8001c12:	d00e      	beq.n	8001c32 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c14:	4b78      	ldr	r3, [pc, #480]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	220c      	movs	r2, #12
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d11f      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1a0>
 8001c20:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	23c0      	movs	r3, #192	; 0xc0
 8001c26:	025b      	lsls	r3, r3, #9
 8001c28:	401a      	ands	r2, r3
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d116      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	4b71      	ldr	r3, [pc, #452]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2202      	movs	r2, #2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x188>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e2bb      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b6b      	ldr	r3, [pc, #428]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	22f8      	movs	r2, #248	; 0xf8
 8001c4e:	4393      	bics	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00da      	lsls	r2, r3, #3
 8001c58:	4b67      	ldr	r3, [pc, #412]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	e041      	b.n	8001ce4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d024      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c68:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b62      	ldr	r3, [pc, #392]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff f9d8 	bl	8001028 <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f9d3 	bl	8001028 <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e297      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c90:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2202      	movs	r2, #2
 8001c96:	4013      	ands	r3, r2
 8001c98:	d0f1      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	22f8      	movs	r2, #248	; 0xf8
 8001ca0:	4393      	bics	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	00da      	lsls	r2, r3, #3
 8001caa:	4b53      	ldr	r3, [pc, #332]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e018      	b.n	8001ce4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b51      	ldr	r3, [pc, #324]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	438a      	bics	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f9b3 	bl	8001028 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f9ae 	bl	8001028 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e272      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d1f1      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	4013      	ands	r3, r2
 8001cec:	d036      	beq.n	8001d5c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d019      	beq.n	8001d2a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cfa:	4b3f      	ldr	r3, [pc, #252]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff f991 	bl	8001028 <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff f98c 	bl	8001028 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e250      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d0f1      	beq.n	8001d0c <HAL_RCC_OscConfig+0x24c>
 8001d28:	e018      	b.n	8001d5c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d2e:	4b32      	ldr	r3, [pc, #200]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001d30:	2101      	movs	r1, #1
 8001d32:	438a      	bics	r2, r1
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7ff f977 	bl	8001028 <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d40:	f7ff f972 	bl	8001028 <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e236      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d52:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	2202      	movs	r2, #2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d1f1      	bne.n	8001d40 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2204      	movs	r2, #4
 8001d62:	4013      	ands	r3, r2
 8001d64:	d100      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2a8>
 8001d66:	e0b5      	b.n	8001ed4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d68:	201f      	movs	r0, #31
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	055b      	lsls	r3, r3, #21
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d110      	bne.n	8001d9e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	69da      	ldr	r2, [r3, #28]
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001d82:	2180      	movs	r1, #128	; 0x80
 8001d84:	0549      	lsls	r1, r1, #21
 8001d86:	430a      	orrs	r2, r1
 8001d88:	61da      	str	r2, [r3, #28]
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	055b      	lsls	r3, r3, #21
 8001d92:	4013      	ands	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d98:	183b      	adds	r3, r7, r0
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <HAL_RCC_OscConfig+0x344>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	d11a      	bne.n	8001de0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <HAL_RCC_OscConfig+0x344>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <HAL_RCC_OscConfig+0x344>)
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	0049      	lsls	r1, r1, #1
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db8:	f7ff f936 	bl	8001028 <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7ff f931 	bl	8001028 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b64      	cmp	r3, #100	; 0x64
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e1f5      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x344>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d10f      	bne.n	8001e08 <HAL_RCC_OscConfig+0x348>
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001dea:	6a1a      	ldr	r2, [r3, #32]
 8001dec:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <HAL_RCC_OscConfig+0x338>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	430a      	orrs	r2, r1
 8001df2:	621a      	str	r2, [r3, #32]
 8001df4:	e036      	b.n	8001e64 <HAL_RCC_OscConfig+0x3a4>
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	fffeffff 	.word	0xfffeffff
 8001e00:	fffbffff 	.word	0xfffbffff
 8001e04:	40007000 	.word	0x40007000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x36a>
 8001e10:	4bca      	ldr	r3, [pc, #808]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e12:	6a1a      	ldr	r2, [r3, #32]
 8001e14:	4bc9      	ldr	r3, [pc, #804]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e16:	2101      	movs	r1, #1
 8001e18:	438a      	bics	r2, r1
 8001e1a:	621a      	str	r2, [r3, #32]
 8001e1c:	4bc7      	ldr	r3, [pc, #796]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e1e:	6a1a      	ldr	r2, [r3, #32]
 8001e20:	4bc6      	ldr	r3, [pc, #792]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e22:	2104      	movs	r1, #4
 8001e24:	438a      	bics	r2, r1
 8001e26:	621a      	str	r2, [r3, #32]
 8001e28:	e01c      	b.n	8001e64 <HAL_RCC_OscConfig+0x3a4>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x38c>
 8001e32:	4bc2      	ldr	r3, [pc, #776]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e34:	6a1a      	ldr	r2, [r3, #32]
 8001e36:	4bc1      	ldr	r3, [pc, #772]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e38:	2104      	movs	r1, #4
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	621a      	str	r2, [r3, #32]
 8001e3e:	4bbf      	ldr	r3, [pc, #764]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e40:	6a1a      	ldr	r2, [r3, #32]
 8001e42:	4bbe      	ldr	r3, [pc, #760]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	430a      	orrs	r2, r1
 8001e48:	621a      	str	r2, [r3, #32]
 8001e4a:	e00b      	b.n	8001e64 <HAL_RCC_OscConfig+0x3a4>
 8001e4c:	4bbb      	ldr	r3, [pc, #748]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e4e:	6a1a      	ldr	r2, [r3, #32]
 8001e50:	4bba      	ldr	r3, [pc, #744]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e52:	2101      	movs	r1, #1
 8001e54:	438a      	bics	r2, r1
 8001e56:	621a      	str	r2, [r3, #32]
 8001e58:	4bb8      	ldr	r3, [pc, #736]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e5a:	6a1a      	ldr	r2, [r3, #32]
 8001e5c:	4bb7      	ldr	r3, [pc, #732]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e5e:	2104      	movs	r1, #4
 8001e60:	438a      	bics	r2, r1
 8001e62:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d014      	beq.n	8001e96 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f8dc 	bl	8001028 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e74:	e009      	b.n	8001e8a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7ff f8d7 	bl	8001028 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	4aaf      	ldr	r2, [pc, #700]	; (8002140 <HAL_RCC_OscConfig+0x680>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e19a      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	4bac      	ldr	r3, [pc, #688]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	4013      	ands	r3, r2
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x3b6>
 8001e94:	e013      	b.n	8001ebe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff f8c7 	bl	8001028 <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9e:	e009      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f8c2 	bl	8001028 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	4aa5      	ldr	r2, [pc, #660]	; (8002140 <HAL_RCC_OscConfig+0x680>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e185      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	4ba1      	ldr	r3, [pc, #644]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ebe:	231f      	movs	r3, #31
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d105      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec8:	4b9c      	ldr	r3, [pc, #624]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001eca:	69da      	ldr	r2, [r3, #28]
 8001ecc:	4b9b      	ldr	r3, [pc, #620]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001ece:	499d      	ldr	r1, [pc, #628]	; (8002144 <HAL_RCC_OscConfig+0x684>)
 8001ed0:	400a      	ands	r2, r1
 8001ed2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	4013      	ands	r3, r2
 8001edc:	d063      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d12a      	bne.n	8001f3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ee6:	4b95      	ldr	r3, [pc, #596]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eea:	4b94      	ldr	r3, [pc, #592]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001eec:	2104      	movs	r1, #4
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ef2:	4b92      	ldr	r3, [pc, #584]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef6:	4b91      	ldr	r3, [pc, #580]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	430a      	orrs	r2, r1
 8001efc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f893 	bl	8001028 <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f08:	f7ff f88e 	bl	8001028 <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e152      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f1a:	4b88      	ldr	r3, [pc, #544]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	d0f1      	beq.n	8001f08 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f24:	4b85      	ldr	r3, [pc, #532]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f28:	22f8      	movs	r2, #248	; 0xf8
 8001f2a:	4393      	bics	r3, r2
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	00da      	lsls	r2, r3, #3
 8001f34:	4b81      	ldr	r3, [pc, #516]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34
 8001f3a:	e034      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	3305      	adds	r3, #5
 8001f42:	d111      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f44:	4b7d      	ldr	r3, [pc, #500]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f48:	4b7c      	ldr	r3, [pc, #496]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f4a:	2104      	movs	r1, #4
 8001f4c:	438a      	bics	r2, r1
 8001f4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f50:	4b7a      	ldr	r3, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f54:	22f8      	movs	r2, #248	; 0xf8
 8001f56:	4393      	bics	r3, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	00da      	lsls	r2, r3, #3
 8001f60:	4b76      	ldr	r3, [pc, #472]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f62:	430a      	orrs	r2, r1
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34
 8001f66:	e01e      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f68:	4b74      	ldr	r3, [pc, #464]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f6c:	4b73      	ldr	r3, [pc, #460]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f6e:	2104      	movs	r1, #4
 8001f70:	430a      	orrs	r2, r1
 8001f72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f74:	4b71      	ldr	r3, [pc, #452]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f78:	4b70      	ldr	r3, [pc, #448]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	438a      	bics	r2, r1
 8001f7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7ff f852 	bl	8001028 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f8a:	f7ff f84d 	bl	8001028 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e111      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f9c:	4b67      	ldr	r3, [pc, #412]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d1f1      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2220      	movs	r2, #32
 8001fac:	4013      	ands	r3, r2
 8001fae:	d05c      	beq.n	800206a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001fb0:	4b62      	ldr	r3, [pc, #392]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	220c      	movs	r2, #12
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	d00e      	beq.n	8001fda <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001fbc:	4b5f      	ldr	r3, [pc, #380]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	220c      	movs	r2, #12
 8001fc2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d114      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001fc8:	4b5c      	ldr	r3, [pc, #368]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	23c0      	movs	r3, #192	; 0xc0
 8001fce:	025b      	lsls	r3, r3, #9
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	23c0      	movs	r3, #192	; 0xc0
 8001fd4:	025b      	lsls	r3, r3, #9
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fda:	4b58      	ldr	r3, [pc, #352]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	025b      	lsls	r3, r3, #9
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d040      	beq.n	8002068 <HAL_RCC_OscConfig+0x5a8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d03c      	beq.n	8002068 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0e6      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d01b      	beq.n	8002032 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ffa:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffe:	4b4f      	ldr	r3, [pc, #316]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	0249      	lsls	r1, r1, #9
 8002004:	430a      	orrs	r2, r1
 8002006:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff f80e 	bl	8001028 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002012:	f7ff f809 	bl	8001028 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0cd      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002024:	4b45      	ldr	r3, [pc, #276]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8002026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	025b      	lsls	r3, r3, #9
 800202c:	4013      	ands	r3, r2
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x552>
 8002030:	e01b      	b.n	800206a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002032:	4b42      	ldr	r3, [pc, #264]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8002034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002036:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8002038:	4943      	ldr	r1, [pc, #268]	; (8002148 <HAL_RCC_OscConfig+0x688>)
 800203a:	400a      	ands	r2, r1
 800203c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7fe fff3 	bl	8001028 <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002048:	f7fe ffee 	bl	8001028 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e0b2      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800205a:	4b38      	ldr	r3, [pc, #224]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 800205c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	025b      	lsls	r3, r3, #9
 8002062:	4013      	ands	r3, r2
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x588>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002068:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	2b00      	cmp	r3, #0
 8002070:	d100      	bne.n	8002074 <HAL_RCC_OscConfig+0x5b4>
 8002072:	e0a4      	b.n	80021be <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	220c      	movs	r2, #12
 800207a:	4013      	ands	r3, r2
 800207c:	2b08      	cmp	r3, #8
 800207e:	d100      	bne.n	8002082 <HAL_RCC_OscConfig+0x5c2>
 8002080:	e078      	b.n	8002174 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	2b02      	cmp	r3, #2
 8002088:	d14c      	bne.n	8002124 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8002090:	492e      	ldr	r1, [pc, #184]	; (800214c <HAL_RCC_OscConfig+0x68c>)
 8002092:	400a      	ands	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe ffc7 	bl	8001028 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe ffc2 	bl	8001028 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e086      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	049b      	lsls	r3, r3, #18
 80020ba:	4013      	ands	r3, r2
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	220f      	movs	r2, #15
 80020c4:	4393      	bics	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 80020ce:	430a      	orrs	r2, r1
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a1e      	ldr	r2, [pc, #120]	; (8002150 <HAL_RCC_OscConfig+0x690>)
 80020d8:	4013      	ands	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	431a      	orrs	r2, r3
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	0449      	lsls	r1, r1, #17
 80020f6:	430a      	orrs	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7fe ff95 	bl	8001028 <HAL_GetTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe ff90 	bl	8001028 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e054      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	049b      	lsls	r3, r3, #18
 800211e:	4013      	ands	r3, r2
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x644>
 8002122:	e04c      	b.n	80021be <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <HAL_RCC_OscConfig+0x67c>)
 800212a:	4908      	ldr	r1, [pc, #32]	; (800214c <HAL_RCC_OscConfig+0x68c>)
 800212c:	400a      	ands	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe ff7a 	bl	8001028 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002138:	e015      	b.n	8002166 <HAL_RCC_OscConfig+0x6a6>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	40021000 	.word	0x40021000
 8002140:	00001388 	.word	0x00001388
 8002144:	efffffff 	.word	0xefffffff
 8002148:	fffeffff 	.word	0xfffeffff
 800214c:	feffffff 	.word	0xfeffffff
 8002150:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe ff68 	bl	8001028 <HAL_GetTick>
 8002158:	0002      	movs	r2, r0
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e02c      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002166:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <HAL_RCC_OscConfig+0x708>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	049b      	lsls	r3, r3, #18
 800216e:	4013      	ands	r3, r2
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x694>
 8002172:	e024      	b.n	80021be <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e01f      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_OscConfig+0x708>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <HAL_RCC_OscConfig+0x708>)
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	23c0      	movs	r3, #192	; 0xc0
 8002190:	025b      	lsls	r3, r3, #9
 8002192:	401a      	ands	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	429a      	cmp	r2, r3
 800219a:	d10e      	bne.n	80021ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	220f      	movs	r2, #15
 80021a0:	401a      	ands	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	23f0      	movs	r3, #240	; 0xf0
 80021ae:	039b      	lsls	r3, r3, #14
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b008      	add	sp, #32
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000

080021cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0bf      	b.n	8002360 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b61      	ldr	r3, [pc, #388]	; (8002368 <HAL_RCC_ClockConfig+0x19c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d911      	bls.n	8002212 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b5e      	ldr	r3, [pc, #376]	; (8002368 <HAL_RCC_ClockConfig+0x19c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2201      	movs	r2, #1
 80021f4:	4393      	bics	r3, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <HAL_RCC_ClockConfig+0x19c>)
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_ClockConfig+0x19c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	4013      	ands	r3, r2
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0a6      	b.n	8002360 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d015      	beq.n	8002248 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2204      	movs	r2, #4
 8002222:	4013      	ands	r3, r2
 8002224:	d006      	beq.n	8002234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002226:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4b50      	ldr	r3, [pc, #320]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 800222c:	21e0      	movs	r1, #224	; 0xe0
 800222e:	00c9      	lsls	r1, r1, #3
 8002230:	430a      	orrs	r2, r1
 8002232:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002234:	4b4d      	ldr	r3, [pc, #308]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	22f0      	movs	r2, #240	; 0xf0
 800223a:	4393      	bics	r3, r2
 800223c:	0019      	movs	r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	4b4a      	ldr	r3, [pc, #296]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2201      	movs	r2, #1
 800224e:	4013      	ands	r3, r2
 8002250:	d04c      	beq.n	80022ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b44      	ldr	r3, [pc, #272]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	029b      	lsls	r3, r3, #10
 8002262:	4013      	ands	r3, r2
 8002264:	d120      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e07a      	b.n	8002360 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002272:	4b3e      	ldr	r3, [pc, #248]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	049b      	lsls	r3, r3, #18
 800227a:	4013      	ands	r3, r2
 800227c:	d114      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06e      	b.n	8002360 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800228a:	4b38      	ldr	r3, [pc, #224]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 800228c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	025b      	lsls	r3, r3, #9
 8002292:	4013      	ands	r3, r2
 8002294:	d108      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e062      	b.n	8002360 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e05b      	b.n	8002360 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2203      	movs	r2, #3
 80022ae:	4393      	bics	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 80022b8:	430a      	orrs	r2, r1
 80022ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7fe feb4 	bl	8001028 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c4:	e009      	b.n	80022da <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c6:	f7fe feaf 	bl	8001028 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	4a27      	ldr	r2, [pc, #156]	; (8002370 <HAL_RCC_ClockConfig+0x1a4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e042      	b.n	8002360 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	220c      	movs	r2, #12
 80022e0:	401a      	ands	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1ec      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_RCC_ClockConfig+0x19c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	4013      	ands	r3, r2
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d211      	bcs.n	800231e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_RCC_ClockConfig+0x19c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2201      	movs	r2, #1
 8002300:	4393      	bics	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_RCC_ClockConfig+0x19c>)
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_RCC_ClockConfig+0x19c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2201      	movs	r2, #1
 8002312:	4013      	ands	r3, r2
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e020      	b.n	8002360 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2204      	movs	r2, #4
 8002324:	4013      	ands	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_RCC_ClockConfig+0x1a8>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800233c:	f000 f820 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8002340:	0001      	movs	r1, r0
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x1a0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	220f      	movs	r2, #15
 800234a:	4013      	ands	r3, r2
 800234c:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x1ac>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	000a      	movs	r2, r1
 8002352:	40da      	lsrs	r2, r3
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 8002356:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002358:	2003      	movs	r0, #3
 800235a:	f7fe fd5f 	bl	8000e1c <HAL_InitTick>
  
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b004      	add	sp, #16
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40022000 	.word	0x40022000
 800236c:	40021000 	.word	0x40021000
 8002370:	00001388 	.word	0x00001388
 8002374:	fffff8ff 	.word	0xfffff8ff
 8002378:	080076e4 	.word	0x080076e4
 800237c:	2000000c 	.word	0x2000000c

08002380 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b08f      	sub	sp, #60	; 0x3c
 8002384:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002386:	2314      	movs	r3, #20
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	4a38      	ldr	r2, [pc, #224]	; (800246c <HAL_RCC_GetSysClockFreq+0xec>)
 800238c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800238e:	c313      	stmia	r3!, {r0, r1, r4}
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	4a36      	ldr	r2, [pc, #216]	; (8002470 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002398:	ca13      	ldmia	r2!, {r0, r1, r4}
 800239a:	c313      	stmia	r3!, {r0, r1, r4}
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a4:	2300      	movs	r3, #0
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80023b4:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	220c      	movs	r2, #12
 80023be:	4013      	ands	r3, r2
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d047      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0xd4>
 80023c4:	d849      	bhi.n	800245a <HAL_RCC_GetSysClockFreq+0xda>
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d002      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x50>
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0x56>
 80023ce:	e044      	b.n	800245a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023d0:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023d4:	e044      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d8:	0c9b      	lsrs	r3, r3, #18
 80023da:	220f      	movs	r2, #15
 80023dc:	4013      	ands	r3, r2
 80023de:	2214      	movs	r2, #20
 80023e0:	18ba      	adds	r2, r7, r2
 80023e2:	5cd3      	ldrb	r3, [r2, r3]
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	220f      	movs	r2, #15
 80023ec:	4013      	ands	r3, r2
 80023ee:	1d3a      	adds	r2, r7, #4
 80023f0:	5cd3      	ldrb	r3, [r2, r3]
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f6:	23c0      	movs	r3, #192	; 0xc0
 80023f8:	025b      	lsls	r3, r3, #9
 80023fa:	401a      	ands	r2, r3
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	025b      	lsls	r3, r3, #9
 8002400:	429a      	cmp	r2, r3
 8002402:	d109      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002406:	481c      	ldr	r0, [pc, #112]	; (8002478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002408:	f7fd fe90 	bl	800012c <__udivsi3>
 800240c:	0003      	movs	r3, r0
 800240e:	001a      	movs	r2, r3
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	4353      	muls	r3, r2
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
 8002416:	e01a      	b.n	800244e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800241a:	23c0      	movs	r3, #192	; 0xc0
 800241c:	025b      	lsls	r3, r3, #9
 800241e:	401a      	ands	r2, r3
 8002420:	23c0      	movs	r3, #192	; 0xc0
 8002422:	025b      	lsls	r3, r3, #9
 8002424:	429a      	cmp	r2, r3
 8002426:	d109      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800242a:	4814      	ldr	r0, [pc, #80]	; (800247c <HAL_RCC_GetSysClockFreq+0xfc>)
 800242c:	f7fd fe7e 	bl	800012c <__udivsi3>
 8002430:	0003      	movs	r3, r0
 8002432:	001a      	movs	r2, r3
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	4353      	muls	r3, r2
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
 800243a:	e008      	b.n	800244e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800243c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800243e:	480e      	ldr	r0, [pc, #56]	; (8002478 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002440:	f7fd fe74 	bl	800012c <__udivsi3>
 8002444:	0003      	movs	r3, r0
 8002446:	001a      	movs	r2, r3
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	4353      	muls	r3, r2
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002452:	e005      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002458:	e002      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <HAL_RCC_GetSysClockFreq+0xf8>)
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800245e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002462:	0018      	movs	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	b00f      	add	sp, #60	; 0x3c
 8002468:	bd90      	pop	{r4, r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	08007534 	.word	0x08007534
 8002470:	08007544 	.word	0x08007544
 8002474:	40021000 	.word	0x40021000
 8002478:	007a1200 	.word	0x007a1200
 800247c:	02dc6c00 	.word	0x02dc6c00

08002480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002484:	4b02      	ldr	r3, [pc, #8]	; (8002490 <HAL_RCC_GetHCLKFreq+0x10>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	2000000c 	.word	0x2000000c

08002494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002498:	f7ff fff2 	bl	8002480 <HAL_RCC_GetHCLKFreq>
 800249c:	0001      	movs	r1, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	2207      	movs	r2, #7
 80024a6:	4013      	ands	r3, r2
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	40d9      	lsrs	r1, r3
 80024ae:	000b      	movs	r3, r1
}    
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	40021000 	.word	0x40021000
 80024bc:	080076f4 	.word	0x080076f4

080024c0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <HAL_RCC_GetClockConfig+0x4c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2203      	movs	r2, #3
 80024d6:	401a      	ands	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_GetClockConfig+0x4c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	22f0      	movs	r2, #240	; 0xf0
 80024e2:	401a      	ands	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_RCC_GetClockConfig+0x4c>)
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	23e0      	movs	r3, #224	; 0xe0
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	401a      	ands	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_GetClockConfig+0x50>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2201      	movs	r2, #1
 80024fc:	401a      	ands	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	601a      	str	r2, [r3, #0]
}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	b002      	add	sp, #8
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	40021000 	.word	0x40021000
 8002510:	40022000 	.word	0x40022000

08002514 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	025b      	lsls	r3, r3, #9
 800252c:	4013      	ands	r3, r2
 800252e:	d100      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002530:	e08e      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002532:	2017      	movs	r0, #23
 8002534:	183b      	adds	r3, r7, r0
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253a:	4b6e      	ldr	r3, [pc, #440]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800253c:	69da      	ldr	r2, [r3, #28]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	055b      	lsls	r3, r3, #21
 8002542:	4013      	ands	r3, r2
 8002544:	d110      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	4b6b      	ldr	r3, [pc, #428]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	4b6a      	ldr	r3, [pc, #424]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0549      	lsls	r1, r1, #21
 8002550:	430a      	orrs	r2, r1
 8002552:	61da      	str	r2, [r3, #28]
 8002554:	4b67      	ldr	r3, [pc, #412]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	055b      	lsls	r3, r3, #21
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002562:	183b      	adds	r3, r7, r0
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4013      	ands	r3, r2
 8002572:	d11a      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002574:	4b60      	ldr	r3, [pc, #384]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b5f      	ldr	r3, [pc, #380]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	0049      	lsls	r1, r1, #1
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7fe fd51 	bl	8001028 <HAL_GetTick>
 8002586:	0003      	movs	r3, r0
 8002588:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	e008      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258c:	f7fe fd4c 	bl	8001028 <HAL_GetTick>
 8002590:	0002      	movs	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0a6      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	d0f0      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025aa:	4b52      	ldr	r3, [pc, #328]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ac:	6a1a      	ldr	r2, [r3, #32]
 80025ae:	23c0      	movs	r3, #192	; 0xc0
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d034      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	23c0      	movs	r3, #192	; 0xc0
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4013      	ands	r3, r2
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d02c      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025cc:	4b49      	ldr	r3, [pc, #292]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a4a      	ldr	r2, [pc, #296]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025d8:	6a1a      	ldr	r2, [r3, #32]
 80025da:	4b46      	ldr	r3, [pc, #280]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	0249      	lsls	r1, r1, #9
 80025e0:	430a      	orrs	r2, r1
 80025e2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025e4:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025e6:	6a1a      	ldr	r2, [r3, #32]
 80025e8:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ea:	4945      	ldr	r1, [pc, #276]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025f0:	4b40      	ldr	r3, [pc, #256]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	4013      	ands	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7fe fd13 	bl	8001028 <HAL_GetTick>
 8002602:	0003      	movs	r3, r0
 8002604:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	e009      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fe fd0e 	bl	8001028 <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	4a3c      	ldr	r2, [pc, #240]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e067      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	2202      	movs	r2, #2
 8002622:	4013      	ands	r3, r2
 8002624:	d0f0      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002626:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a34      	ldr	r2, [pc, #208]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800262c:	4013      	ands	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002636:	430a      	orrs	r2, r1
 8002638:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800263a:	2317      	movs	r3, #23
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800264a:	492f      	ldr	r1, [pc, #188]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800264c:	400a      	ands	r2, r1
 800264e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2201      	movs	r2, #1
 8002656:	4013      	ands	r3, r2
 8002658:	d009      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	2203      	movs	r2, #3
 8002660:	4393      	bics	r3, r2
 8002662:	0019      	movs	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800266a:	430a      	orrs	r2, r1
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2202      	movs	r2, #2
 8002674:	4013      	ands	r3, r2
 8002676:	d009      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	4a23      	ldr	r2, [pc, #140]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800267e:	4013      	ands	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002688:	430a      	orrs	r2, r1
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2220      	movs	r2, #32
 8002692:	4013      	ands	r3, r2
 8002694:	d009      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	2210      	movs	r2, #16
 800269c:	4393      	bics	r3, r2
 800269e:	0019      	movs	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026a6:	430a      	orrs	r2, r1
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	4013      	ands	r3, r2
 80026b4:	d009      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	4393      	bics	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026c6:	430a      	orrs	r2, r1
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4013      	ands	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	4393      	bics	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026e6:	430a      	orrs	r2, r1
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	0018      	movs	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b006      	add	sp, #24
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40007000 	.word	0x40007000
 80026fc:	fffffcff 	.word	0xfffffcff
 8002700:	fffeffff 	.word	0xfffeffff
 8002704:	00001388 	.word	0x00001388
 8002708:	efffffff 	.word	0xefffffff
 800270c:	fffcffff 	.word	0xfffcffff

08002710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e0a8      	b.n	8002874 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	2382      	movs	r3, #130	; 0x82
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	429a      	cmp	r2, r3
 8002734:	d009      	beq.n	800274a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	61da      	str	r2, [r3, #28]
 800273c:	e005      	b.n	800274a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	225d      	movs	r2, #93	; 0x5d
 8002754:	5c9b      	ldrb	r3, [r3, r2]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	225c      	movs	r2, #92	; 0x5c
 8002760:	2100      	movs	r1, #0
 8002762:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	0018      	movs	r0, r3
 8002768:	f7fe f9f6 	bl	8000b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	225d      	movs	r2, #93	; 0x5d
 8002770:	2102      	movs	r1, #2
 8002772:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2140      	movs	r1, #64	; 0x40
 8002780:	438a      	bics	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	23e0      	movs	r3, #224	; 0xe0
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	429a      	cmp	r2, r3
 800278e:	d902      	bls.n	8002796 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e002      	b.n	800279c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	015b      	lsls	r3, r3, #5
 800279a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	23f0      	movs	r3, #240	; 0xf0
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d008      	beq.n	80027ba <HAL_SPI_Init+0xaa>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	23e0      	movs	r3, #224	; 0xe0
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d002      	beq.n	80027ba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	2382      	movs	r3, #130	; 0x82
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	401a      	ands	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	2384      	movs	r3, #132	; 0x84
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	400b      	ands	r3, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2102      	movs	r1, #2
 80027d6:	400b      	ands	r3, r1
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2101      	movs	r1, #1
 80027e0:	400b      	ands	r3, r1
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6999      	ldr	r1, [r3, #24]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	400b      	ands	r3, r1
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2138      	movs	r1, #56	; 0x38
 80027f6:	400b      	ands	r3, r1
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	400b      	ands	r3, r1
 8002802:	431a      	orrs	r2, r3
 8002804:	0011      	movs	r1, r2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	401a      	ands	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	2204      	movs	r2, #4
 8002820:	401a      	ands	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	2110      	movs	r1, #16
 8002828:	400b      	ands	r3, r1
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002830:	2108      	movs	r1, #8
 8002832:	400b      	ands	r3, r1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68d9      	ldr	r1, [r3, #12]
 800283a:	23f0      	movs	r3, #240	; 0xf0
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	400b      	ands	r3, r1
 8002840:	431a      	orrs	r2, r3
 8002842:	0011      	movs	r1, r2
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	015b      	lsls	r3, r3, #5
 800284a:	401a      	ands	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69da      	ldr	r2, [r3, #28]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4907      	ldr	r1, [pc, #28]	; (800287c <HAL_SPI_Init+0x16c>)
 8002860:	400a      	ands	r2, r1
 8002862:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	225d      	movs	r2, #93	; 0x5d
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b004      	add	sp, #16
 800287a:	bd80      	pop	{r7, pc}
 800287c:	fffff7ff 	.word	0xfffff7ff

08002880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e042      	b.n	8002918 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	223d      	movs	r2, #61	; 0x3d
 8002896:	5c9b      	ldrb	r3, [r3, r2]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d107      	bne.n	80028ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	223c      	movs	r2, #60	; 0x3c
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 f839 	bl	8002920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	223d      	movs	r2, #61	; 0x3d
 80028b2:	2102      	movs	r1, #2
 80028b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3304      	adds	r3, #4
 80028be:	0019      	movs	r1, r3
 80028c0:	0010      	movs	r0, r2
 80028c2:	f000 f9bd 	bl	8002c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2246      	movs	r2, #70	; 0x46
 80028ca:	2101      	movs	r1, #1
 80028cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	223e      	movs	r2, #62	; 0x3e
 80028d2:	2101      	movs	r1, #1
 80028d4:	5499      	strb	r1, [r3, r2]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	223f      	movs	r2, #63	; 0x3f
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2240      	movs	r2, #64	; 0x40
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2241      	movs	r2, #65	; 0x41
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2242      	movs	r2, #66	; 0x42
 80028f2:	2101      	movs	r1, #1
 80028f4:	5499      	strb	r1, [r3, r2]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2243      	movs	r2, #67	; 0x43
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2244      	movs	r2, #68	; 0x44
 8002902:	2101      	movs	r1, #1
 8002904:	5499      	strb	r1, [r3, r2]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2245      	movs	r2, #69	; 0x45
 800290a:	2101      	movs	r1, #1
 800290c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	223d      	movs	r2, #61	; 0x3d
 8002912:	2101      	movs	r1, #1
 8002914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	b002      	add	sp, #8
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	223d      	movs	r2, #61	; 0x3d
 800293c:	5c9b      	ldrb	r3, [r3, r2]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d001      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e03b      	b.n	80029c0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	223d      	movs	r2, #61	; 0x3d
 800294c:	2102      	movs	r1, #2
 800294e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	430a      	orrs	r2, r1
 800295e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <HAL_TIM_Base_Start_IT+0x98>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00f      	beq.n	800298a <HAL_TIM_Base_Start_IT+0x5a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2380      	movs	r3, #128	; 0x80
 8002970:	05db      	lsls	r3, r3, #23
 8002972:	429a      	cmp	r2, r3
 8002974:	d009      	beq.n	800298a <HAL_TIM_Base_Start_IT+0x5a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a14      	ldr	r2, [pc, #80]	; (80029cc <HAL_TIM_Base_Start_IT+0x9c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d004      	beq.n	800298a <HAL_TIM_Base_Start_IT+0x5a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d111      	bne.n	80029ae <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2207      	movs	r2, #7
 8002992:	4013      	ands	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b06      	cmp	r3, #6
 800299a:	d010      	beq.n	80029be <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2101      	movs	r1, #1
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	e007      	b.n	80029be <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b004      	add	sp, #16
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40014000 	.word	0x40014000

080029d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2202      	movs	r2, #2
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d124      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2202      	movs	r2, #2
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d11d      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2203      	movs	r2, #3
 80029fe:	4252      	negs	r2, r2
 8002a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2203      	movs	r2, #3
 8002a10:	4013      	ands	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 f8fa 	bl	8002c10 <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e007      	b.n	8002a2e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f8ed 	bl	8002c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 f8f9 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d125      	bne.n	8002a8e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2204      	movs	r2, #4
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d11e      	bne.n	8002a8e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2205      	movs	r2, #5
 8002a56:	4252      	negs	r2, r2
 8002a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	23c0      	movs	r3, #192	; 0xc0
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d004      	beq.n	8002a78 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f8cd 	bl	8002c10 <HAL_TIM_IC_CaptureCallback>
 8002a76:	e007      	b.n	8002a88 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 f8c0 	bl	8002c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f8cc 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2208      	movs	r2, #8
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d124      	bne.n	8002ae6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d11d      	bne.n	8002ae6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2209      	movs	r2, #9
 8002ab0:	4252      	negs	r2, r2
 8002ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 f8a1 	bl	8002c10 <HAL_TIM_IC_CaptureCallback>
 8002ace:	e007      	b.n	8002ae0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f000 f894 	bl	8002c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 f8a0 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2210      	movs	r2, #16
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d125      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2210      	movs	r2, #16
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b10      	cmp	r3, #16
 8002b00:	d11e      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2211      	movs	r2, #17
 8002b08:	4252      	negs	r2, r2
 8002b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2208      	movs	r2, #8
 8002b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	23c0      	movs	r3, #192	; 0xc0
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 f874 	bl	8002c10 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e007      	b.n	8002b3a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 f867 	bl	8002c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 f873 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2201      	movs	r2, #1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10f      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d108      	bne.n	8002b6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2202      	movs	r2, #2
 8002b62:	4252      	negs	r2, r2
 8002b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7fd ff65 	bl	8000a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b80      	cmp	r3, #128	; 0x80
 8002b7a:	d10f      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2280      	movs	r2, #128	; 0x80
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b80      	cmp	r3, #128	; 0x80
 8002b88:	d108      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2281      	movs	r2, #129	; 0x81
 8002b90:	4252      	negs	r2, r2
 8002b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 f8da 	bl	8002d50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2240      	movs	r2, #64	; 0x40
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b40      	cmp	r3, #64	; 0x40
 8002ba8:	d10f      	bne.n	8002bca <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2240      	movs	r2, #64	; 0x40
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d108      	bne.n	8002bca <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2241      	movs	r2, #65	; 0x41
 8002bbe:	4252      	negs	r2, r2
 8002bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f000 f833 	bl	8002c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d108      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2221      	movs	r2, #33	; 0x21
 8002bec:	4252      	negs	r2, r2
 8002bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f000 f8a4 	bl	8002d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b002      	add	sp, #8
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a34      	ldr	r2, [pc, #208]	; (8002d24 <TIM_Base_SetConfig+0xe4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d008      	beq.n	8002c6a <TIM_Base_SetConfig+0x2a>
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	05db      	lsls	r3, r3, #23
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d003      	beq.n	8002c6a <TIM_Base_SetConfig+0x2a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a30      	ldr	r2, [pc, #192]	; (8002d28 <TIM_Base_SetConfig+0xe8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d108      	bne.n	8002c7c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2270      	movs	r2, #112	; 0x70
 8002c6e:	4393      	bics	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a29      	ldr	r2, [pc, #164]	; (8002d24 <TIM_Base_SetConfig+0xe4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <TIM_Base_SetConfig+0x76>
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	05db      	lsls	r3, r3, #23
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d013      	beq.n	8002cb6 <TIM_Base_SetConfig+0x76>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a25      	ldr	r2, [pc, #148]	; (8002d28 <TIM_Base_SetConfig+0xe8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00f      	beq.n	8002cb6 <TIM_Base_SetConfig+0x76>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <TIM_Base_SetConfig+0xec>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <TIM_Base_SetConfig+0x76>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a23      	ldr	r2, [pc, #140]	; (8002d30 <TIM_Base_SetConfig+0xf0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <TIM_Base_SetConfig+0x76>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a22      	ldr	r2, [pc, #136]	; (8002d34 <TIM_Base_SetConfig+0xf4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_Base_SetConfig+0x76>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a21      	ldr	r2, [pc, #132]	; (8002d38 <TIM_Base_SetConfig+0xf8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <TIM_Base_SetConfig+0xfc>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	4393      	bics	r3, r2
 8002cce:	001a      	movs	r2, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <TIM_Base_SetConfig+0xe4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00b      	beq.n	8002d0e <TIM_Base_SetConfig+0xce>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <TIM_Base_SetConfig+0xf0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <TIM_Base_SetConfig+0xce>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <TIM_Base_SetConfig+0xf4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d003      	beq.n	8002d0e <TIM_Base_SetConfig+0xce>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <TIM_Base_SetConfig+0xf8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d103      	bne.n	8002d16 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	615a      	str	r2, [r3, #20]
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40002000 	.word	0x40002000
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	fffffcff 	.word	0xfffffcff

08002d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e074      	b.n	8002e5c <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	223c      	movs	r2, #60	; 0x3c
 8002d76:	5c9b      	ldrb	r3, [r3, r2]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	223d      	movs	r2, #61	; 0x3d
 8002d82:	2100      	movs	r1, #0
 8002d84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f7fd ff33 	bl	8000bf4 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	223c      	movs	r2, #60	; 0x3c
 8002d92:	2102      	movs	r1, #2
 8002d94:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002dac:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002db4:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002dba:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002dc0:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002dc6:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002dcc:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002dd2:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7b1b      	ldrb	r3, [r3, #12]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d108      	bne.n	8002df6 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	0249      	lsls	r1, r1, #9
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	43d2      	mvns	r2, r2
 8002e0c:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e26:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681c      	ldr	r4, [r3, #0]
 8002e30:	0010      	movs	r0, r2
 8002e32:	f000 f817 	bl	8002e64 <TSC_extract_groups>
 8002e36:	0003      	movs	r3, r0
 8002e38:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2103      	movs	r1, #3
 8002e46:	438a      	bics	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2203      	movs	r2, #3
 8002e50:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	223c      	movs	r2, #60	; 0x3c
 8002e56:	2101      	movs	r1, #1
 8002e58:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b003      	add	sp, #12
 8002e62:	bd90      	pop	{r4, r7, pc}

08002e64 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	e011      	b.n	8002e9a <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	0013      	movs	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4013      	ands	r3, r2
 8002e84:	d006      	beq.n	8002e94 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002e86:	2201      	movs	r2, #1
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	0013      	movs	r3, r2
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3301      	adds	r3, #1
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b07      	cmp	r3, #7
 8002e9e:	d9ea      	bls.n	8002e76 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b004      	add	sp, #16
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e044      	b.n	8002f48 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2274      	movs	r2, #116	; 0x74
 8002eca:	2100      	movs	r1, #0
 8002ecc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fd ff2d 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2224      	movs	r2, #36	; 0x24
 8002eda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fcbe 	bl	8003870 <UART_SetConfig>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e024      	b.n	8002f48 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 fe39 	bl	8003b80 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	490d      	ldr	r1, [pc, #52]	; (8002f50 <HAL_UART_Init+0xa4>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	212a      	movs	r1, #42	; 0x2a
 8002f2a:	438a      	bics	r2, r1
 8002f2c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2101      	movs	r1, #1
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 fed1 	bl	8003ce8 <UART_CheckIdleState>
 8002f46:	0003      	movs	r3, r0
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	ffffb7ff 	.word	0xffffb7ff

08002f54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	1dbb      	adds	r3, r7, #6
 8002f62:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d000      	beq.n	8002f6e <HAL_UART_Transmit+0x1a>
 8002f6c:	e096      	b.n	800309c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_UART_Transmit+0x28>
 8002f74:	1dbb      	adds	r3, r7, #6
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e08e      	b.n	800309e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	015b      	lsls	r3, r3, #5
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d109      	bne.n	8002fa0 <HAL_UART_Transmit+0x4c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2201      	movs	r2, #1
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d001      	beq.n	8002fa0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e07e      	b.n	800309e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2274      	movs	r2, #116	; 0x74
 8002fa4:	5c9b      	ldrb	r3, [r3, r2]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Transmit+0x5a>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e077      	b.n	800309e <HAL_UART_Transmit+0x14a>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2274      	movs	r2, #116	; 0x74
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	2100      	movs	r1, #0
 8002fbc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe f830 	bl	8001028 <HAL_GetTick>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1dba      	adds	r2, r7, #6
 8002fd0:	2150      	movs	r1, #80	; 0x50
 8002fd2:	8812      	ldrh	r2, [r2, #0]
 8002fd4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1dba      	adds	r2, r7, #6
 8002fda:	2152      	movs	r1, #82	; 0x52
 8002fdc:	8812      	ldrh	r2, [r2, #0]
 8002fde:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	015b      	lsls	r3, r3, #5
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d108      	bne.n	8002ffe <HAL_UART_Transmit+0xaa>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d104      	bne.n	8002ffe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	61bb      	str	r3, [r7, #24]
 8002ffc:	e003      	b.n	8003006 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2274      	movs	r2, #116	; 0x74
 800300a:	2100      	movs	r1, #0
 800300c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800300e:	e02d      	b.n	800306c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	0013      	movs	r3, r2
 800301a:	2200      	movs	r2, #0
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	f000 feab 	bl	8003d78 <UART_WaitOnFlagUntilTimeout>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d001      	beq.n	800302a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e039      	b.n	800309e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	881a      	ldrh	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	05d2      	lsls	r2, r2, #23
 800303a:	0dd2      	lsrs	r2, r2, #23
 800303c:	b292      	uxth	r2, r2
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	3302      	adds	r3, #2
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e008      	b.n	800305a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	781a      	ldrb	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b292      	uxth	r2, r2
 8003052:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2252      	movs	r2, #82	; 0x52
 800305e:	5a9b      	ldrh	r3, [r3, r2]
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b299      	uxth	r1, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2252      	movs	r2, #82	; 0x52
 800306a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2252      	movs	r2, #82	; 0x52
 8003070:	5a9b      	ldrh	r3, [r3, r2]
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1cb      	bne.n	8003010 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	0013      	movs	r3, r2
 8003082:	2200      	movs	r2, #0
 8003084:	2140      	movs	r1, #64	; 0x40
 8003086:	f000 fe77 	bl	8003d78 <UART_WaitOnFlagUntilTimeout>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d001      	beq.n	8003092 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e005      	b.n	800309e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	e000      	b.n	800309e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800309c:	2302      	movs	r3, #2
  }
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b008      	add	sp, #32
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	1dbb      	adds	r3, r7, #6
 80030b6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d000      	beq.n	80030c2 <HAL_UART_Receive+0x1a>
 80030c0:	e0da      	b.n	8003278 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_UART_Receive+0x28>
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0d2      	b.n	800327a <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	015b      	lsls	r3, r3, #5
 80030dc:	429a      	cmp	r2, r3
 80030de:	d109      	bne.n	80030f4 <HAL_UART_Receive+0x4c>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2201      	movs	r2, #1
 80030ec:	4013      	ands	r3, r2
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0c2      	b.n	800327a <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2274      	movs	r2, #116	; 0x74
 80030f8:	5c9b      	ldrb	r3, [r3, r2]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Receive+0x5a>
 80030fe:	2302      	movs	r3, #2
 8003100:	e0bb      	b.n	800327a <HAL_UART_Receive+0x1d2>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2274      	movs	r2, #116	; 0x74
 8003106:	2101      	movs	r1, #1
 8003108:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	2100      	movs	r1, #0
 8003110:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2222      	movs	r2, #34	; 0x22
 8003116:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800311e:	f7fd ff83 	bl	8001028 <HAL_GetTick>
 8003122:	0003      	movs	r3, r0
 8003124:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1dba      	adds	r2, r7, #6
 800312a:	2158      	movs	r1, #88	; 0x58
 800312c:	8812      	ldrh	r2, [r2, #0]
 800312e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1dba      	adds	r2, r7, #6
 8003134:	215a      	movs	r1, #90	; 0x5a
 8003136:	8812      	ldrh	r2, [r2, #0]
 8003138:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	015b      	lsls	r3, r3, #5
 8003142:	429a      	cmp	r2, r3
 8003144:	d10d      	bne.n	8003162 <HAL_UART_Receive+0xba>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <HAL_UART_Receive+0xb0>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	225c      	movs	r2, #92	; 0x5c
 8003152:	494c      	ldr	r1, [pc, #304]	; (8003284 <HAL_UART_Receive+0x1dc>)
 8003154:	5299      	strh	r1, [r3, r2]
 8003156:	e02e      	b.n	80031b6 <HAL_UART_Receive+0x10e>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	225c      	movs	r2, #92	; 0x5c
 800315c:	21ff      	movs	r1, #255	; 0xff
 800315e:	5299      	strh	r1, [r3, r2]
 8003160:	e029      	b.n	80031b6 <HAL_UART_Receive+0x10e>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10d      	bne.n	8003186 <HAL_UART_Receive+0xde>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d104      	bne.n	800317c <HAL_UART_Receive+0xd4>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	225c      	movs	r2, #92	; 0x5c
 8003176:	21ff      	movs	r1, #255	; 0xff
 8003178:	5299      	strh	r1, [r3, r2]
 800317a:	e01c      	b.n	80031b6 <HAL_UART_Receive+0x10e>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	225c      	movs	r2, #92	; 0x5c
 8003180:	217f      	movs	r1, #127	; 0x7f
 8003182:	5299      	strh	r1, [r3, r2]
 8003184:	e017      	b.n	80031b6 <HAL_UART_Receive+0x10e>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	055b      	lsls	r3, r3, #21
 800318e:	429a      	cmp	r2, r3
 8003190:	d10d      	bne.n	80031ae <HAL_UART_Receive+0x106>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d104      	bne.n	80031a4 <HAL_UART_Receive+0xfc>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	225c      	movs	r2, #92	; 0x5c
 800319e:	217f      	movs	r1, #127	; 0x7f
 80031a0:	5299      	strh	r1, [r3, r2]
 80031a2:	e008      	b.n	80031b6 <HAL_UART_Receive+0x10e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	225c      	movs	r2, #92	; 0x5c
 80031a8:	213f      	movs	r1, #63	; 0x3f
 80031aa:	5299      	strh	r1, [r3, r2]
 80031ac:	e003      	b.n	80031b6 <HAL_UART_Receive+0x10e>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	225c      	movs	r2, #92	; 0x5c
 80031b2:	2100      	movs	r1, #0
 80031b4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80031b6:	2312      	movs	r3, #18
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	215c      	movs	r1, #92	; 0x5c
 80031be:	5a52      	ldrh	r2, [r2, r1]
 80031c0:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	015b      	lsls	r3, r3, #5
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d108      	bne.n	80031e0 <HAL_UART_Receive+0x138>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e003      	b.n	80031e8 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2274      	movs	r2, #116	; 0x74
 80031ec:	2100      	movs	r1, #0
 80031ee:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031f0:	e037      	b.n	8003262 <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	0013      	movs	r3, r2
 80031fc:	2200      	movs	r2, #0
 80031fe:	2120      	movs	r1, #32
 8003200:	f000 fdba 	bl	8003d78 <UART_WaitOnFlagUntilTimeout>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e036      	b.n	800327a <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10e      	bne.n	8003230 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003218:	b29b      	uxth	r3, r3
 800321a:	2212      	movs	r2, #18
 800321c:	18ba      	adds	r2, r7, r2
 800321e:	8812      	ldrh	r2, [r2, #0]
 8003220:	4013      	ands	r3, r2
 8003222:	b29a      	uxth	r2, r3
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	3302      	adds	r3, #2
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e00f      	b.n	8003250 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003236:	b29b      	uxth	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2212      	movs	r2, #18
 800323c:	18ba      	adds	r2, r7, r2
 800323e:	8812      	ldrh	r2, [r2, #0]
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	4013      	ands	r3, r2
 8003244:	b2da      	uxtb	r2, r3
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3301      	adds	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	225a      	movs	r2, #90	; 0x5a
 8003254:	5a9b      	ldrh	r3, [r3, r2]
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b299      	uxth	r1, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	225a      	movs	r2, #90	; 0x5a
 8003260:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	225a      	movs	r2, #90	; 0x5a
 8003266:	5a9b      	ldrh	r3, [r3, r2]
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1c1      	bne.n	80031f2 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	0018      	movs	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	b008      	add	sp, #32
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	000001ff 	.word	0x000001ff

08003288 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b0ab      	sub	sp, #172	; 0xac
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	22a4      	movs	r2, #164	; 0xa4
 8003298:	18b9      	adds	r1, r7, r2
 800329a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	20a0      	movs	r0, #160	; 0xa0
 80032a4:	1839      	adds	r1, r7, r0
 80032a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	219c      	movs	r1, #156	; 0x9c
 80032b0:	1879      	adds	r1, r7, r1
 80032b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032b4:	0011      	movs	r1, r2
 80032b6:	18bb      	adds	r3, r7, r2
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a99      	ldr	r2, [pc, #612]	; (8003520 <HAL_UART_IRQHandler+0x298>)
 80032bc:	4013      	ands	r3, r2
 80032be:	2298      	movs	r2, #152	; 0x98
 80032c0:	18bc      	adds	r4, r7, r2
 80032c2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80032c4:	18bb      	adds	r3, r7, r2
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d114      	bne.n	80032f6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2220      	movs	r2, #32
 80032d2:	4013      	ands	r3, r2
 80032d4:	d00f      	beq.n	80032f6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032d6:	183b      	adds	r3, r7, r0
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2220      	movs	r2, #32
 80032dc:	4013      	ands	r3, r2
 80032de:	d00a      	beq.n	80032f6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d100      	bne.n	80032ea <HAL_UART_IRQHandler+0x62>
 80032e8:	e296      	b.n	8003818 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	0010      	movs	r0, r2
 80032f2:	4798      	blx	r3
      }
      return;
 80032f4:	e290      	b.n	8003818 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032f6:	2398      	movs	r3, #152	; 0x98
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d100      	bne.n	8003302 <HAL_UART_IRQHandler+0x7a>
 8003300:	e114      	b.n	800352c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003302:	239c      	movs	r3, #156	; 0x9c
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
 800330c:	d106      	bne.n	800331c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800330e:	23a0      	movs	r3, #160	; 0xa0
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a83      	ldr	r2, [pc, #524]	; (8003524 <HAL_UART_IRQHandler+0x29c>)
 8003316:	4013      	ands	r3, r2
 8003318:	d100      	bne.n	800331c <HAL_UART_IRQHandler+0x94>
 800331a:	e107      	b.n	800352c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800331c:	23a4      	movs	r3, #164	; 0xa4
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2201      	movs	r2, #1
 8003324:	4013      	ands	r3, r2
 8003326:	d012      	beq.n	800334e <HAL_UART_IRQHandler+0xc6>
 8003328:	23a0      	movs	r3, #160	; 0xa0
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4013      	ands	r3, r2
 8003334:	d00b      	beq.n	800334e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2280      	movs	r2, #128	; 0x80
 8003342:	589b      	ldr	r3, [r3, r2]
 8003344:	2201      	movs	r2, #1
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2180      	movs	r1, #128	; 0x80
 800334c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800334e:	23a4      	movs	r3, #164	; 0xa4
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2202      	movs	r2, #2
 8003356:	4013      	ands	r3, r2
 8003358:	d011      	beq.n	800337e <HAL_UART_IRQHandler+0xf6>
 800335a:	239c      	movs	r3, #156	; 0x9c
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2201      	movs	r2, #1
 8003362:	4013      	ands	r3, r2
 8003364:	d00b      	beq.n	800337e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2202      	movs	r2, #2
 800336c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	589b      	ldr	r3, [r3, r2]
 8003374:	2204      	movs	r2, #4
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2180      	movs	r1, #128	; 0x80
 800337c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800337e:	23a4      	movs	r3, #164	; 0xa4
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2204      	movs	r2, #4
 8003386:	4013      	ands	r3, r2
 8003388:	d011      	beq.n	80033ae <HAL_UART_IRQHandler+0x126>
 800338a:	239c      	movs	r3, #156	; 0x9c
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	4013      	ands	r3, r2
 8003394:	d00b      	beq.n	80033ae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2204      	movs	r2, #4
 800339c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	589b      	ldr	r3, [r3, r2]
 80033a4:	2202      	movs	r2, #2
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2180      	movs	r1, #128	; 0x80
 80033ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033ae:	23a4      	movs	r3, #164	; 0xa4
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2208      	movs	r2, #8
 80033b6:	4013      	ands	r3, r2
 80033b8:	d017      	beq.n	80033ea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033ba:	23a0      	movs	r3, #160	; 0xa0
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2220      	movs	r2, #32
 80033c2:	4013      	ands	r3, r2
 80033c4:	d105      	bne.n	80033d2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033c6:	239c      	movs	r3, #156	; 0x9c
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2201      	movs	r2, #1
 80033ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033d0:	d00b      	beq.n	80033ea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2208      	movs	r2, #8
 80033d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	589b      	ldr	r3, [r3, r2]
 80033e0:	2208      	movs	r2, #8
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2180      	movs	r1, #128	; 0x80
 80033e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033ea:	23a4      	movs	r3, #164	; 0xa4
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	d013      	beq.n	8003420 <HAL_UART_IRQHandler+0x198>
 80033f8:	23a0      	movs	r3, #160	; 0xa0
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	04db      	lsls	r3, r3, #19
 8003402:	4013      	ands	r3, r2
 8003404:	d00c      	beq.n	8003420 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	589b      	ldr	r3, [r3, r2]
 8003416:	2220      	movs	r2, #32
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	589b      	ldr	r3, [r3, r2]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d100      	bne.n	800342c <HAL_UART_IRQHandler+0x1a4>
 800342a:	e1f7      	b.n	800381c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800342c:	23a4      	movs	r3, #164	; 0xa4
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2220      	movs	r2, #32
 8003434:	4013      	ands	r3, r2
 8003436:	d00e      	beq.n	8003456 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003438:	23a0      	movs	r3, #160	; 0xa0
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2220      	movs	r2, #32
 8003440:	4013      	ands	r3, r2
 8003442:	d008      	beq.n	8003456 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	0010      	movs	r0, r2
 8003454:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2280      	movs	r2, #128	; 0x80
 800345a:	589b      	ldr	r3, [r3, r2]
 800345c:	2194      	movs	r1, #148	; 0x94
 800345e:	187a      	adds	r2, r7, r1
 8003460:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2240      	movs	r2, #64	; 0x40
 800346a:	4013      	ands	r3, r2
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d004      	beq.n	800347a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003470:	187b      	adds	r3, r7, r1
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2228      	movs	r2, #40	; 0x28
 8003476:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003478:	d047      	beq.n	800350a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	0018      	movs	r0, r3
 800347e:	f000 fd3f 	bl	8003f00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2240      	movs	r2, #64	; 0x40
 800348a:	4013      	ands	r3, r2
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d137      	bne.n	8003500 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003490:	f3ef 8310 	mrs	r3, PRIMASK
 8003494:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003498:	2090      	movs	r0, #144	; 0x90
 800349a:	183a      	adds	r2, r7, r0
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	2301      	movs	r3, #1
 80034a0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034a4:	f383 8810 	msr	PRIMASK, r3
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2140      	movs	r1, #64	; 0x40
 80034b6:	438a      	bics	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	183b      	adds	r3, r7, r0
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034c2:	f383 8810 	msr	PRIMASK, r3
}
 80034c6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d012      	beq.n	80034f6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_UART_IRQHandler+0x2a0>)
 80034d6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	0018      	movs	r0, r3
 80034de:	f7fd fe92 	bl	8001206 <HAL_DMA_Abort_IT>
 80034e2:	1e03      	subs	r3, r0, #0
 80034e4:	d01a      	beq.n	800351c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	0018      	movs	r0, r3
 80034f2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f4:	e012      	b.n	800351c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 f9a5 	bl	8003848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fe:	e00d      	b.n	800351c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	0018      	movs	r0, r3
 8003504:	f000 f9a0 	bl	8003848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	e008      	b.n	800351c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	0018      	movs	r0, r3
 800350e:	f000 f99b 	bl	8003848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	2100      	movs	r1, #0
 8003518:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800351a:	e17f      	b.n	800381c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	46c0      	nop			; (mov r8, r8)
    return;
 800351e:	e17d      	b.n	800381c <HAL_UART_IRQHandler+0x594>
 8003520:	0000080f 	.word	0x0000080f
 8003524:	04000120 	.word	0x04000120
 8003528:	08003fc5 	.word	0x08003fc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003530:	2b01      	cmp	r3, #1
 8003532:	d000      	beq.n	8003536 <HAL_UART_IRQHandler+0x2ae>
 8003534:	e131      	b.n	800379a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003536:	23a4      	movs	r3, #164	; 0xa4
 8003538:	18fb      	adds	r3, r7, r3
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2210      	movs	r2, #16
 800353e:	4013      	ands	r3, r2
 8003540:	d100      	bne.n	8003544 <HAL_UART_IRQHandler+0x2bc>
 8003542:	e12a      	b.n	800379a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003544:	23a0      	movs	r3, #160	; 0xa0
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2210      	movs	r2, #16
 800354c:	4013      	ands	r3, r2
 800354e:	d100      	bne.n	8003552 <HAL_UART_IRQHandler+0x2ca>
 8003550:	e123      	b.n	800379a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2210      	movs	r2, #16
 8003558:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2240      	movs	r2, #64	; 0x40
 8003562:	4013      	ands	r3, r2
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d000      	beq.n	800356a <HAL_UART_IRQHandler+0x2e2>
 8003568:	e09b      	b.n	80036a2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	217e      	movs	r1, #126	; 0x7e
 8003574:	187b      	adds	r3, r7, r1
 8003576:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003578:	187b      	adds	r3, r7, r1
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d100      	bne.n	8003582 <HAL_UART_IRQHandler+0x2fa>
 8003580:	e14e      	b.n	8003820 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2258      	movs	r2, #88	; 0x58
 8003586:	5a9b      	ldrh	r3, [r3, r2]
 8003588:	187a      	adds	r2, r7, r1
 800358a:	8812      	ldrh	r2, [r2, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d300      	bcc.n	8003592 <HAL_UART_IRQHandler+0x30a>
 8003590:	e146      	b.n	8003820 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	187a      	adds	r2, r7, r1
 8003596:	215a      	movs	r1, #90	; 0x5a
 8003598:	8812      	ldrh	r2, [r2, #0]
 800359a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d06e      	beq.n	8003684 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a6:	f3ef 8310 	mrs	r3, PRIMASK
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80035b0:	2301      	movs	r3, #1
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b6:	f383 8810 	msr	PRIMASK, r3
}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	499a      	ldr	r1, [pc, #616]	; (8003830 <HAL_UART_IRQHandler+0x5a8>)
 80035c8:	400a      	ands	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	f383 8810 	msr	PRIMASK, r3
}
 80035d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d8:	f3ef 8310 	mrs	r3, PRIMASK
 80035dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80035de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e0:	677b      	str	r3, [r7, #116]	; 0x74
 80035e2:	2301      	movs	r3, #1
 80035e4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e8:	f383 8810 	msr	PRIMASK, r3
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2101      	movs	r1, #1
 80035fa:	438a      	bics	r2, r1
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003600:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003604:	f383 8810 	msr	PRIMASK, r3
}
 8003608:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360a:	f3ef 8310 	mrs	r3, PRIMASK
 800360e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003610:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003612:	673b      	str	r3, [r7, #112]	; 0x70
 8003614:	2301      	movs	r3, #1
 8003616:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361a:	f383 8810 	msr	PRIMASK, r3
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2140      	movs	r1, #64	; 0x40
 800362c:	438a      	bics	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003632:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003636:	f383 8810 	msr	PRIMASK, r3
}
 800363a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003648:	f3ef 8310 	mrs	r3, PRIMASK
 800364c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800364e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003650:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003652:	2301      	movs	r3, #1
 8003654:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003658:	f383 8810 	msr	PRIMASK, r3
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2110      	movs	r1, #16
 800366a:	438a      	bics	r2, r1
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003670:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003674:	f383 8810 	msr	PRIMASK, r3
}
 8003678:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	0018      	movs	r0, r3
 8003680:	f7fd fd89 	bl	8001196 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2258      	movs	r2, #88	; 0x58
 8003688:	5a9a      	ldrh	r2, [r3, r2]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	215a      	movs	r1, #90	; 0x5a
 800368e:	5a5b      	ldrh	r3, [r3, r1]
 8003690:	b29b      	uxth	r3, r3
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	0011      	movs	r1, r2
 800369a:	0018      	movs	r0, r3
 800369c:	f000 f8dc 	bl	8003858 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036a0:	e0be      	b.n	8003820 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2258      	movs	r2, #88	; 0x58
 80036a6:	5a99      	ldrh	r1, [r3, r2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	225a      	movs	r2, #90	; 0x5a
 80036ac:	5a9b      	ldrh	r3, [r3, r2]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	208e      	movs	r0, #142	; 0x8e
 80036b2:	183b      	adds	r3, r7, r0
 80036b4:	1a8a      	subs	r2, r1, r2
 80036b6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	225a      	movs	r2, #90	; 0x5a
 80036bc:	5a9b      	ldrh	r3, [r3, r2]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d100      	bne.n	80036c6 <HAL_UART_IRQHandler+0x43e>
 80036c4:	e0ae      	b.n	8003824 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80036c6:	183b      	adds	r3, r7, r0
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d100      	bne.n	80036d0 <HAL_UART_IRQHandler+0x448>
 80036ce:	e0a9      	b.n	8003824 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d0:	f3ef 8310 	mrs	r3, PRIMASK
 80036d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80036d6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d8:	2488      	movs	r4, #136	; 0x88
 80036da:	193a      	adds	r2, r7, r4
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	2301      	movs	r3, #1
 80036e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f383 8810 	msr	PRIMASK, r3
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	494f      	ldr	r1, [pc, #316]	; (8003834 <HAL_UART_IRQHandler+0x5ac>)
 80036f6:	400a      	ands	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	193b      	adds	r3, r7, r4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f383 8810 	msr	PRIMASK, r3
}
 8003706:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003708:	f3ef 8310 	mrs	r3, PRIMASK
 800370c:	61bb      	str	r3, [r7, #24]
  return(result);
 800370e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	2484      	movs	r4, #132	; 0x84
 8003712:	193a      	adds	r2, r7, r4
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	2301      	movs	r3, #1
 8003718:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f383 8810 	msr	PRIMASK, r3
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2101      	movs	r1, #1
 800372e:	438a      	bics	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	193b      	adds	r3, r7, r4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f383 8810 	msr	PRIMASK, r3
}
 800373e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003752:	f3ef 8310 	mrs	r3, PRIMASK
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375a:	2480      	movs	r4, #128	; 0x80
 800375c:	193a      	adds	r2, r7, r4
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	2301      	movs	r3, #1
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2110      	movs	r1, #16
 8003778:	438a      	bics	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	193b      	adds	r3, r7, r4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800378a:	183b      	adds	r3, r7, r0
 800378c:	881a      	ldrh	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	0011      	movs	r1, r2
 8003792:	0018      	movs	r0, r3
 8003794:	f000 f860 	bl	8003858 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003798:	e044      	b.n	8003824 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800379a:	23a4      	movs	r3, #164	; 0xa4
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	035b      	lsls	r3, r3, #13
 80037a4:	4013      	ands	r3, r2
 80037a6:	d010      	beq.n	80037ca <HAL_UART_IRQHandler+0x542>
 80037a8:	239c      	movs	r3, #156	; 0x9c
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	03db      	lsls	r3, r3, #15
 80037b2:	4013      	ands	r3, r2
 80037b4:	d009      	beq.n	80037ca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	0352      	lsls	r2, r2, #13
 80037be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 fc40 	bl	8004048 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037c8:	e02f      	b.n	800382a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037ca:	23a4      	movs	r3, #164	; 0xa4
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	4013      	ands	r3, r2
 80037d4:	d00f      	beq.n	80037f6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037d6:	23a0      	movs	r3, #160	; 0xa0
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	4013      	ands	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01e      	beq.n	8003828 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	0010      	movs	r0, r2
 80037f2:	4798      	blx	r3
    }
    return;
 80037f4:	e018      	b.n	8003828 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037f6:	23a4      	movs	r3, #164	; 0xa4
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2240      	movs	r2, #64	; 0x40
 80037fe:	4013      	ands	r3, r2
 8003800:	d013      	beq.n	800382a <HAL_UART_IRQHandler+0x5a2>
 8003802:	23a0      	movs	r3, #160	; 0xa0
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2240      	movs	r2, #64	; 0x40
 800380a:	4013      	ands	r3, r2
 800380c:	d00d      	beq.n	800382a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	0018      	movs	r0, r3
 8003812:	f000 fbee 	bl	8003ff2 <UART_EndTransmit_IT>
    return;
 8003816:	e008      	b.n	800382a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	e006      	b.n	800382a <HAL_UART_IRQHandler+0x5a2>
    return;
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	e004      	b.n	800382a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	e002      	b.n	800382a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	e000      	b.n	800382a <HAL_UART_IRQHandler+0x5a2>
    return;
 8003828:	46c0      	nop			; (mov r8, r8)
  }

}
 800382a:	46bd      	mov	sp, r7
 800382c:	b02b      	add	sp, #172	; 0xac
 800382e:	bd90      	pop	{r4, r7, pc}
 8003830:	fffffeff 	.word	0xfffffeff
 8003834:	fffffedf 	.word	0xfffffedf

08003838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	000a      	movs	r2, r1
 8003862:	1cbb      	adds	r3, r7, #2
 8003864:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	46bd      	mov	sp, r7
 800386a:	b002      	add	sp, #8
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003878:	231e      	movs	r3, #30
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4aaf      	ldr	r2, [pc, #700]	; (8003b5c <UART_SetConfig+0x2ec>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	0019      	movs	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4aaa      	ldr	r2, [pc, #680]	; (8003b60 <UART_SetConfig+0x2f0>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4aa1      	ldr	r2, [pc, #644]	; (8003b64 <UART_SetConfig+0x2f4>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a9d      	ldr	r2, [pc, #628]	; (8003b68 <UART_SetConfig+0x2f8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d127      	bne.n	8003946 <UART_SetConfig+0xd6>
 80038f6:	4b9d      	ldr	r3, [pc, #628]	; (8003b6c <UART_SetConfig+0x2fc>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	2203      	movs	r2, #3
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d00d      	beq.n	800391e <UART_SetConfig+0xae>
 8003902:	d81b      	bhi.n	800393c <UART_SetConfig+0xcc>
 8003904:	2b02      	cmp	r3, #2
 8003906:	d014      	beq.n	8003932 <UART_SetConfig+0xc2>
 8003908:	d818      	bhi.n	800393c <UART_SetConfig+0xcc>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <UART_SetConfig+0xa4>
 800390e:	2b01      	cmp	r3, #1
 8003910:	d00a      	beq.n	8003928 <UART_SetConfig+0xb8>
 8003912:	e013      	b.n	800393c <UART_SetConfig+0xcc>
 8003914:	231f      	movs	r3, #31
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e065      	b.n	80039ea <UART_SetConfig+0x17a>
 800391e:	231f      	movs	r3, #31
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	2202      	movs	r2, #2
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e060      	b.n	80039ea <UART_SetConfig+0x17a>
 8003928:	231f      	movs	r3, #31
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2204      	movs	r2, #4
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	e05b      	b.n	80039ea <UART_SetConfig+0x17a>
 8003932:	231f      	movs	r3, #31
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	2208      	movs	r2, #8
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e056      	b.n	80039ea <UART_SetConfig+0x17a>
 800393c:	231f      	movs	r3, #31
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	2210      	movs	r2, #16
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e051      	b.n	80039ea <UART_SetConfig+0x17a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a89      	ldr	r2, [pc, #548]	; (8003b70 <UART_SetConfig+0x300>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d134      	bne.n	80039ba <UART_SetConfig+0x14a>
 8003950:	4b86      	ldr	r3, [pc, #536]	; (8003b6c <UART_SetConfig+0x2fc>)
 8003952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003954:	23c0      	movs	r3, #192	; 0xc0
 8003956:	029b      	lsls	r3, r3, #10
 8003958:	4013      	ands	r3, r2
 800395a:	22c0      	movs	r2, #192	; 0xc0
 800395c:	0292      	lsls	r2, r2, #10
 800395e:	4293      	cmp	r3, r2
 8003960:	d017      	beq.n	8003992 <UART_SetConfig+0x122>
 8003962:	22c0      	movs	r2, #192	; 0xc0
 8003964:	0292      	lsls	r2, r2, #10
 8003966:	4293      	cmp	r3, r2
 8003968:	d822      	bhi.n	80039b0 <UART_SetConfig+0x140>
 800396a:	2280      	movs	r2, #128	; 0x80
 800396c:	0292      	lsls	r2, r2, #10
 800396e:	4293      	cmp	r3, r2
 8003970:	d019      	beq.n	80039a6 <UART_SetConfig+0x136>
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	0292      	lsls	r2, r2, #10
 8003976:	4293      	cmp	r3, r2
 8003978:	d81a      	bhi.n	80039b0 <UART_SetConfig+0x140>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <UART_SetConfig+0x118>
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	0252      	lsls	r2, r2, #9
 8003982:	4293      	cmp	r3, r2
 8003984:	d00a      	beq.n	800399c <UART_SetConfig+0x12c>
 8003986:	e013      	b.n	80039b0 <UART_SetConfig+0x140>
 8003988:	231f      	movs	r3, #31
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e02b      	b.n	80039ea <UART_SetConfig+0x17a>
 8003992:	231f      	movs	r3, #31
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2202      	movs	r2, #2
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e026      	b.n	80039ea <UART_SetConfig+0x17a>
 800399c:	231f      	movs	r3, #31
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	2204      	movs	r2, #4
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e021      	b.n	80039ea <UART_SetConfig+0x17a>
 80039a6:	231f      	movs	r3, #31
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	2208      	movs	r2, #8
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e01c      	b.n	80039ea <UART_SetConfig+0x17a>
 80039b0:	231f      	movs	r3, #31
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	2210      	movs	r2, #16
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	e017      	b.n	80039ea <UART_SetConfig+0x17a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6d      	ldr	r2, [pc, #436]	; (8003b74 <UART_SetConfig+0x304>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d104      	bne.n	80039ce <UART_SetConfig+0x15e>
 80039c4:	231f      	movs	r3, #31
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e00d      	b.n	80039ea <UART_SetConfig+0x17a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a69      	ldr	r2, [pc, #420]	; (8003b78 <UART_SetConfig+0x308>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d104      	bne.n	80039e2 <UART_SetConfig+0x172>
 80039d8:	231f      	movs	r3, #31
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e003      	b.n	80039ea <UART_SetConfig+0x17a>
 80039e2:	231f      	movs	r3, #31
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	2210      	movs	r2, #16
 80039e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d15d      	bne.n	8003ab2 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80039f6:	231f      	movs	r3, #31
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d015      	beq.n	8003a2c <UART_SetConfig+0x1bc>
 8003a00:	dc18      	bgt.n	8003a34 <UART_SetConfig+0x1c4>
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d00d      	beq.n	8003a22 <UART_SetConfig+0x1b2>
 8003a06:	dc15      	bgt.n	8003a34 <UART_SetConfig+0x1c4>
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <UART_SetConfig+0x1a2>
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d005      	beq.n	8003a1c <UART_SetConfig+0x1ac>
 8003a10:	e010      	b.n	8003a34 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a12:	f7fe fd3f 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003a16:	0003      	movs	r3, r0
 8003a18:	61bb      	str	r3, [r7, #24]
        break;
 8003a1a:	e012      	b.n	8003a42 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1c:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <UART_SetConfig+0x30c>)
 8003a1e:	61bb      	str	r3, [r7, #24]
        break;
 8003a20:	e00f      	b.n	8003a42 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7fe fcad 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8003a26:	0003      	movs	r3, r0
 8003a28:	61bb      	str	r3, [r7, #24]
        break;
 8003a2a:	e00a      	b.n	8003a42 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	61bb      	str	r3, [r7, #24]
        break;
 8003a32:	e006      	b.n	8003a42 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a38:	231e      	movs	r3, #30
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
        break;
 8003a40:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d100      	bne.n	8003a4a <UART_SetConfig+0x1da>
 8003a48:	e07b      	b.n	8003b42 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	005a      	lsls	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	18d2      	adds	r2, r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	0010      	movs	r0, r2
 8003a5e:	f7fc fb65 	bl	800012c <__udivsi3>
 8003a62:	0003      	movs	r3, r0
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	d91c      	bls.n	8003aa8 <UART_SetConfig+0x238>
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	025b      	lsls	r3, r3, #9
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d217      	bcs.n	8003aa8 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	200e      	movs	r0, #14
 8003a7e:	183b      	adds	r3, r7, r0
 8003a80:	210f      	movs	r1, #15
 8003a82:	438a      	bics	r2, r1
 8003a84:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2207      	movs	r2, #7
 8003a8e:	4013      	ands	r3, r2
 8003a90:	b299      	uxth	r1, r3
 8003a92:	183b      	adds	r3, r7, r0
 8003a94:	183a      	adds	r2, r7, r0
 8003a96:	8812      	ldrh	r2, [r2, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	183a      	adds	r2, r7, r0
 8003aa2:	8812      	ldrh	r2, [r2, #0]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	e04c      	b.n	8003b42 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa8:	231e      	movs	r3, #30
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	e047      	b.n	8003b42 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ab2:	231f      	movs	r3, #31
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d015      	beq.n	8003ae8 <UART_SetConfig+0x278>
 8003abc:	dc18      	bgt.n	8003af0 <UART_SetConfig+0x280>
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d00d      	beq.n	8003ade <UART_SetConfig+0x26e>
 8003ac2:	dc15      	bgt.n	8003af0 <UART_SetConfig+0x280>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <UART_SetConfig+0x25e>
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d005      	beq.n	8003ad8 <UART_SetConfig+0x268>
 8003acc:	e010      	b.n	8003af0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7fe fce1 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	61bb      	str	r3, [r7, #24]
        break;
 8003ad6:	e012      	b.n	8003afe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad8:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <UART_SetConfig+0x30c>)
 8003ada:	61bb      	str	r3, [r7, #24]
        break;
 8003adc:	e00f      	b.n	8003afe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ade:	f7fe fc4f 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	61bb      	str	r3, [r7, #24]
        break;
 8003ae6:	e00a      	b.n	8003afe <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	61bb      	str	r3, [r7, #24]
        break;
 8003aee:	e006      	b.n	8003afe <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003af4:	231e      	movs	r3, #30
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2201      	movs	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
        break;
 8003afc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01e      	beq.n	8003b42 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	085a      	lsrs	r2, r3, #1
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	18d2      	adds	r2, r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	0019      	movs	r1, r3
 8003b14:	0010      	movs	r0, r2
 8003b16:	f7fc fb09 	bl	800012c <__udivsi3>
 8003b1a:	0003      	movs	r3, r0
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	d909      	bls.n	8003b3a <UART_SetConfig+0x2ca>
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	025b      	lsls	r3, r3, #9
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d204      	bcs.n	8003b3a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	e003      	b.n	8003b42 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003b3a:	231e      	movs	r3, #30
 8003b3c:	18fb      	adds	r3, r7, r3
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b4e:	231e      	movs	r3, #30
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	781b      	ldrb	r3, [r3, #0]
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b008      	add	sp, #32
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	efff69f3 	.word	0xefff69f3
 8003b60:	ffffcfff 	.word	0xffffcfff
 8003b64:	fffff4ff 	.word	0xfffff4ff
 8003b68:	40013800 	.word	0x40013800
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40004400 	.word	0x40004400
 8003b74:	40004800 	.word	0x40004800
 8003b78:	40004c00 	.word	0x40004c00
 8003b7c:	007a1200 	.word	0x007a1200

08003b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d00b      	beq.n	8003baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a4a      	ldr	r2, [pc, #296]	; (8003cc4 <UART_AdvFeatureConfig+0x144>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2202      	movs	r2, #2
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4a43      	ldr	r2, [pc, #268]	; (8003cc8 <UART_AdvFeatureConfig+0x148>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d00b      	beq.n	8003bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4a3b      	ldr	r2, [pc, #236]	; (8003ccc <UART_AdvFeatureConfig+0x14c>)
 8003bde:	4013      	ands	r3, r2
 8003be0:	0019      	movs	r1, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a34      	ldr	r2, [pc, #208]	; (8003cd0 <UART_AdvFeatureConfig+0x150>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	0019      	movs	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2210      	movs	r2, #16
 8003c16:	4013      	ands	r3, r2
 8003c18:	d00b      	beq.n	8003c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a2c      	ldr	r2, [pc, #176]	; (8003cd4 <UART_AdvFeatureConfig+0x154>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	0019      	movs	r1, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	2220      	movs	r2, #32
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d00b      	beq.n	8003c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <UART_AdvFeatureConfig+0x158>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	2240      	movs	r2, #64	; 0x40
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a1d      	ldr	r2, [pc, #116]	; (8003cdc <UART_AdvFeatureConfig+0x15c>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	035b      	lsls	r3, r3, #13
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d10b      	bne.n	8003c9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <UART_AdvFeatureConfig+0x160>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	0019      	movs	r1, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	2280      	movs	r2, #128	; 0x80
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d00b      	beq.n	8003cbc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <UART_AdvFeatureConfig+0x164>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	0019      	movs	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]
  }
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b002      	add	sp, #8
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	fffdffff 	.word	0xfffdffff
 8003cc8:	fffeffff 	.word	0xfffeffff
 8003ccc:	fffbffff 	.word	0xfffbffff
 8003cd0:	ffff7fff 	.word	0xffff7fff
 8003cd4:	ffffefff 	.word	0xffffefff
 8003cd8:	ffffdfff 	.word	0xffffdfff
 8003cdc:	ffefffff 	.word	0xffefffff
 8003ce0:	ff9fffff 	.word	0xff9fffff
 8003ce4:	fff7ffff 	.word	0xfff7ffff

08003ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2280      	movs	r2, #128	; 0x80
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cf8:	f7fd f996 	bl	8001028 <HAL_GetTick>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2208      	movs	r2, #8
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d10c      	bne.n	8003d28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2280      	movs	r2, #128	; 0x80
 8003d12:	0391      	lsls	r1, r2, #14
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <UART_CheckIdleState+0x8c>)
 8003d18:	9200      	str	r2, [sp, #0]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f000 f82c 	bl	8003d78 <UART_WaitOnFlagUntilTimeout>
 8003d20:	1e03      	subs	r3, r0, #0
 8003d22:	d001      	beq.n	8003d28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e021      	b.n	8003d6c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d10c      	bne.n	8003d50 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2280      	movs	r2, #128	; 0x80
 8003d3a:	03d1      	lsls	r1, r2, #15
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4a0d      	ldr	r2, [pc, #52]	; (8003d74 <UART_CheckIdleState+0x8c>)
 8003d40:	9200      	str	r2, [sp, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f000 f818 	bl	8003d78 <UART_WaitOnFlagUntilTimeout>
 8003d48:	1e03      	subs	r3, r0, #0
 8003d4a:	d001      	beq.n	8003d50 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e00d      	b.n	8003d6c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2274      	movs	r2, #116	; 0x74
 8003d66:	2100      	movs	r1, #0
 8003d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b004      	add	sp, #16
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	01ffffff 	.word	0x01ffffff

08003d78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b094      	sub	sp, #80	; 0x50
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	1dfb      	adds	r3, r7, #7
 8003d86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d88:	e0a3      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	d100      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003d90:	e09f      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d92:	f7fd f949 	bl	8001028 <HAL_GetTick>
 8003d96:	0002      	movs	r2, r0
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d13d      	bne.n	8003e24 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003db0:	647b      	str	r3, [r7, #68]	; 0x44
 8003db2:	2301      	movs	r3, #1
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	f383 8810 	msr	PRIMASK, r3
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	494c      	ldr	r1, [pc, #304]	; (8003efc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003dca:	400a      	ands	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	f383 8810 	msr	PRIMASK, r3
}
 8003dd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dda:	f3ef 8310 	mrs	r3, PRIMASK
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	643b      	str	r3, [r7, #64]	; 0x40
 8003de4:	2301      	movs	r3, #1
 8003de6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	f383 8810 	msr	PRIMASK, r3
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e06:	f383 8810 	msr	PRIMASK, r3
}
 8003e0a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2274      	movs	r2, #116	; 0x74
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e067      	b.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d050      	beq.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d146      	bne.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2280      	movs	r2, #128	; 0x80
 8003e4a:	0112      	lsls	r2, r2, #4
 8003e4c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e52:	613b      	str	r3, [r7, #16]
  return(result);
 8003e54:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e58:	2301      	movs	r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f383 8810 	msr	PRIMASK, r3
}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4923      	ldr	r1, [pc, #140]	; (8003efc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003e70:	400a      	ands	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f383 8810 	msr	PRIMASK, r3
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e80:	f3ef 8310 	mrs	r3, PRIMASK
 8003e84:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e86:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f383 8810 	msr	PRIMASK, r3
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	438a      	bics	r2, r1
 8003ea4:	609a      	str	r2, [r3, #8]
 8003ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	f383 8810 	msr	PRIMASK, r3
}
 8003eb0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2280      	movs	r2, #128	; 0x80
 8003ec2:	2120      	movs	r1, #32
 8003ec4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2274      	movs	r2, #116	; 0x74
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e010      	b.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	4013      	ands	r3, r2
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	425a      	negs	r2, r3
 8003ee2:	4153      	adcs	r3, r2
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	001a      	movs	r2, r3
 8003ee8:	1dfb      	adds	r3, r7, #7
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d100      	bne.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003ef0:	e74b      	b.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b014      	add	sp, #80	; 0x50
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	fffffe5f 	.word	0xfffffe5f

08003f00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08e      	sub	sp, #56	; 0x38
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f08:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0c:	617b      	str	r3, [r7, #20]
  return(result);
 8003f0e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f10:	637b      	str	r3, [r7, #52]	; 0x34
 8003f12:	2301      	movs	r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f383 8810 	msr	PRIMASK, r3
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4925      	ldr	r1, [pc, #148]	; (8003fc0 <UART_EndRxTransfer+0xc0>)
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f383 8810 	msr	PRIMASK, r3
}
 8003f38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3e:	623b      	str	r3, [r7, #32]
  return(result);
 8003f40:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f42:	633b      	str	r3, [r7, #48]	; 0x30
 8003f44:	2301      	movs	r3, #1
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	f383 8810 	msr	PRIMASK, r3
}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	438a      	bics	r2, r1
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	f383 8810 	msr	PRIMASK, r3
}
 8003f6a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d118      	bne.n	8003fa6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f74:	f3ef 8310 	mrs	r3, PRIMASK
 8003f78:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f7e:	2301      	movs	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f383 8810 	msr	PRIMASK, r3
}
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2110      	movs	r1, #16
 8003f96:	438a      	bics	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f383 8810 	msr	PRIMASK, r3
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b00e      	add	sp, #56	; 0x38
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	fffffedf 	.word	0xfffffedf

08003fc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	225a      	movs	r2, #90	; 0x5a
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2252      	movs	r2, #82	; 0x52
 8003fde:	2100      	movs	r1, #0
 8003fe0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7ff fc2f 	bl	8003848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b004      	add	sp, #16
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b086      	sub	sp, #24
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8003ffe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004000:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	2301      	movs	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f383 8810 	msr	PRIMASK, r3
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2140      	movs	r1, #64	; 0x40
 800401c:	438a      	bics	r2, r1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f383 8810 	msr	PRIMASK, r3
}
 800402a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	0018      	movs	r0, r3
 800403c:	f7ff fbfc 	bl	8003838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b006      	add	sp, #24
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}

08004058 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <USB_DisableGlobalInt+0x30>)
 8004062:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2240      	movs	r2, #64	; 0x40
 8004068:	5a9b      	ldrh	r3, [r3, r2]
 800406a:	b29b      	uxth	r3, r3
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	b292      	uxth	r2, r2
 8004070:	43d2      	mvns	r2, r2
 8004072:	b292      	uxth	r2, r2
 8004074:	4013      	ands	r3, r2
 8004076:	b299      	uxth	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2240      	movs	r2, #64	; 0x40
 800407c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b004      	add	sp, #16
 8004086:	bd80      	pop	{r7, pc}
 8004088:	0000bf80 	.word	0x0000bf80

0800408c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800408c:	b084      	sub	sp, #16
 800408e:	b590      	push	{r4, r7, lr}
 8004090:	46c6      	mov	lr, r8
 8004092:	b500      	push	{lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	2004      	movs	r0, #4
 800409c:	2410      	movs	r4, #16
 800409e:	46a4      	mov	ip, r4
 80040a0:	2408      	movs	r4, #8
 80040a2:	46a0      	mov	r8, r4
 80040a4:	44b8      	add	r8, r7
 80040a6:	44c4      	add	ip, r8
 80040a8:	4460      	add	r0, ip
 80040aa:	6001      	str	r1, [r0, #0]
 80040ac:	6042      	str	r2, [r0, #4]
 80040ae:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2240      	movs	r2, #64	; 0x40
 80040b4:	2101      	movs	r1, #1
 80040b6:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2240      	movs	r2, #64	; 0x40
 80040bc:	2100      	movs	r1, #0
 80040be:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2244      	movs	r2, #68	; 0x44
 80040c4:	2100      	movs	r1, #0
 80040c6:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2250      	movs	r2, #80	; 0x50
 80040cc:	2100      	movs	r1, #0
 80040ce:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b002      	add	sp, #8
 80040d8:	bc80      	pop	{r7}
 80040da:	46b8      	mov	r8, r7
 80040dc:	bc90      	pop	{r4, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	b004      	add	sp, #16
 80040e2:	4718      	bx	r3

080040e4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ea:	f3ef 8305 	mrs	r3, IPSR
 80040ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80040f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f6:	f3ef 8310 	mrs	r3, PRIMASK
 80040fa:	607b      	str	r3, [r7, #4]
  return(result);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <osKernelInitialize+0x2e>
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <osKernelInitialize+0x54>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d103      	bne.n	8004112 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 800410a:	2306      	movs	r3, #6
 800410c:	425b      	negs	r3, r3
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e00c      	b.n	800412c <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <osKernelInitialize+0x54>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d105      	bne.n	8004126 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <osKernelInitialize+0x54>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e002      	b.n	800412c <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8004126:	2301      	movs	r3, #1
 8004128:	425b      	negs	r3, r3
 800412a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800412c:	68fb      	ldr	r3, [r7, #12]
}
 800412e:	0018      	movs	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	b004      	add	sp, #16
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	20000140 	.word	0x20000140

0800413c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004142:	f3ef 8305 	mrs	r3, IPSR
 8004146:	60bb      	str	r3, [r7, #8]
  return(result);
 8004148:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414e:	f3ef 8310 	mrs	r3, PRIMASK
 8004152:	607b      	str	r3, [r7, #4]
  return(result);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <osKernelStart+0x2e>
 800415a:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <osKernelStart+0x58>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d103      	bne.n	800416a <osKernelStart+0x2e>
    stat = osErrorISR;
 8004162:	2306      	movs	r3, #6
 8004164:	425b      	negs	r3, r3
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e00e      	b.n	8004188 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <osKernelStart+0x58>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d107      	bne.n	8004182 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <osKernelStart+0x58>)
 8004174:	2202      	movs	r2, #2
 8004176:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004178:	f001 f914 	bl	80053a4 <vTaskStartScheduler>
      stat = osOK;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e002      	b.n	8004188 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8004182:	2301      	movs	r3, #1
 8004184:	425b      	negs	r3, r3
 8004186:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004188:	68fb      	ldr	r3, [r7, #12]
}
 800418a:	0018      	movs	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	b004      	add	sp, #16
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	20000140 	.word	0x20000140

08004198 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004198:	b5b0      	push	{r4, r5, r7, lr}
 800419a:	b090      	sub	sp, #64	; 0x40
 800419c:	af04      	add	r7, sp, #16
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041a8:	f3ef 8305 	mrs	r3, IPSR
 80041ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80041ae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d000      	beq.n	80041b6 <osThreadNew+0x1e>
 80041b4:	e090      	b.n	80042d8 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d004      	beq.n	80041cc <osThreadNew+0x34>
 80041c2:	4b48      	ldr	r3, [pc, #288]	; (80042e4 <osThreadNew+0x14c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d100      	bne.n	80041cc <osThreadNew+0x34>
 80041ca:	e085      	b.n	80042d8 <osThreadNew+0x140>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d100      	bne.n	80041d4 <osThreadNew+0x3c>
 80041d2:	e081      	b.n	80042d8 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80041d8:	2318      	movs	r3, #24
 80041da:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 80041dc:	2117      	movs	r1, #23
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 80041e4:	187b      	adds	r3, r7, r1
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 80041e8:	2301      	movs	r3, #1
 80041ea:	425b      	negs	r3, r3
 80041ec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d044      	beq.n	800427e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <osThreadNew+0x6a>
        name = attr->name;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <osThreadNew+0x8e>
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2b38      	cmp	r3, #56	; 0x38
 800421a:	d804      	bhi.n	8004226 <osThreadNew+0x8e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	4013      	ands	r3, r2
 8004224:	d001      	beq.n	800422a <osThreadNew+0x92>
        return (NULL);
 8004226:	2300      	movs	r3, #0
 8004228:	e057      	b.n	80042da <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	089b      	lsrs	r3, r3, #2
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00e      	beq.n	8004260 <osThreadNew+0xc8>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	2bbb      	cmp	r3, #187	; 0xbb
 8004248:	d90a      	bls.n	8004260 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <osThreadNew+0xc8>
        mem = 1;
 800425a:	2301      	movs	r3, #1
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	e010      	b.n	8004282 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10c      	bne.n	8004282 <osThreadNew+0xea>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d108      	bne.n	8004282 <osThreadNew+0xea>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <osThreadNew+0xea>
          mem = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	e001      	b.n	8004282 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d112      	bne.n	80042ae <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004290:	68bd      	ldr	r5, [r7, #8]
 8004292:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8004294:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	9302      	str	r3, [sp, #8]
 800429a:	9201      	str	r2, [sp, #4]
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	002b      	movs	r3, r5
 80042a2:	0022      	movs	r2, r4
 80042a4:	f000 fec9 	bl	800503a <xTaskCreateStatic>
 80042a8:	0003      	movs	r3, r0
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	e014      	b.n	80042d8 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d111      	bne.n	80042d8 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68bc      	ldr	r4, [r7, #8]
 80042ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	2310      	movs	r3, #16
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	0023      	movs	r3, r4
 80042ca:	f000 fef9 	bl	80050c0 <xTaskCreate>
 80042ce:	0003      	movs	r3, r0
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d001      	beq.n	80042d8 <osThreadNew+0x140>
          hTask = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042d8:	693b      	ldr	r3, [r7, #16]
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b00c      	add	sp, #48	; 0x30
 80042e0:	bdb0      	pop	{r4, r5, r7, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	20000140 	.word	0x20000140

080042e8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042f0:	f3ef 8305 	mrs	r3, IPSR
 80042f4:	613b      	str	r3, [r7, #16]
  return(result);
 80042f6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004300:	60fb      	str	r3, [r7, #12]
  return(result);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <osDelay+0x30>
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <osDelay+0x4c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d103      	bne.n	8004318 <osDelay+0x30>
    stat = osErrorISR;
 8004310:	2306      	movs	r3, #6
 8004312:	425b      	negs	r3, r3
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	e008      	b.n	800432a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <osDelay+0x42>
      vTaskDelay(ticks);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f001 f817 	bl	8005358 <vTaskDelay>
    }
  }

  return (stat);
 800432a:	697b      	ldr	r3, [r7, #20]
}
 800432c:	0018      	movs	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	b006      	add	sp, #24
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000140 	.word	0x20000140

08004338 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a06      	ldr	r2, [pc, #24]	; (8004360 <vApplicationGetIdleTaskMemory+0x28>)
 8004348:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4a05      	ldr	r2, [pc, #20]	; (8004364 <vApplicationGetIdleTaskMemory+0x2c>)
 800434e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	601a      	str	r2, [r3, #0]
}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b004      	add	sp, #16
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	20000144 	.word	0x20000144
 8004364:	20000200 	.word	0x20000200

08004368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a06      	ldr	r2, [pc, #24]	; (8004390 <vApplicationGetTimerTaskMemory+0x28>)
 8004378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4a05      	ldr	r2, [pc, #20]	; (8004394 <vApplicationGetTimerTaskMemory+0x2c>)
 800437e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2280      	movs	r2, #128	; 0x80
 8004384:	0052      	lsls	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b004      	add	sp, #16
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000400 	.word	0x20000400
 8004394:	200004bc 	.word	0x200004bc

08004398 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <FreeRTOS_CLIRegisterCommand+0x16>
 80043aa:	b672      	cpsid	i
 80043ac:	e7fe      	b.n	80043ac <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 80043ae:	2008      	movs	r0, #8
 80043b0:	f002 f8be 	bl	8006530 <pvPortMalloc>
 80043b4:	0003      	movs	r3, r0
 80043b6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <FreeRTOS_CLIRegisterCommand+0x2a>
 80043be:	b672      	cpsid	i
 80043c0:	e7fe      	b.n	80043c0 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d012      	beq.n	80043ee <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
 80043c8:	f002 f81a 	bl	8006400 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 80043d8:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <FreeRTOS_CLIRegisterCommand+0x60>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <FreeRTOS_CLIRegisterCommand+0x60>)
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
 80043e6:	f002 f81d 	bl	8006424 <vPortExitCritical>

		xReturn = pdPASS;
 80043ea:	2301      	movs	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b004      	add	sp, #16
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	2000001c 	.word	0x2000001c

080043fc <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8004408:	2301      	movs	r3, #1
 800440a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 800440c:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d144      	bne.n	800449e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004414:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 8004416:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <FreeRTOS_CLIProcessCommand+0x10c>)
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	e03a      	b.n	8004492 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800441c:	4b39      	ldr	r3, [pc, #228]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	0018      	movs	r0, r3
 800442a:	f7fb fe6d 	bl	8000108 <strlen>
 800442e:	0003      	movs	r3, r0
 8004430:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	18d3      	adds	r3, r2, r3
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b20      	cmp	r3, #32
 800443c:	d005      	beq.n	800444a <FreeRTOS_CLIProcessCommand+0x4e>
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	18d3      	adds	r3, r2, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d11e      	bne.n	8004488 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	69b9      	ldr	r1, [r7, #24]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	0018      	movs	r0, r3
 8004452:	f002 fb55 	bl	8006b00 <strncmp>
 8004456:	1e03      	subs	r3, r0, #0
 8004458:	d116      	bne.n	8004488 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800445a:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	7b1b      	ldrb	r3, [r3, #12]
 8004462:	b25b      	sxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	db19      	blt.n	800449c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	0018      	movs	r0, r3
 800446c:	f000 f8d8 	bl	8004620 <prvGetNumberOfParameters>
 8004470:	0003      	movs	r3, r0
 8004472:	001a      	movs	r2, r3
 8004474:	4b23      	ldr	r3, [pc, #140]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	7b1b      	ldrb	r3, [r3, #12]
 800447c:	b25b      	sxtb	r3, r3
 800447e:	429a      	cmp	r2, r3
 8004480:	d00c      	beq.n	800449c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8004486:	e009      	b.n	800449c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004488:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	4b1d      	ldr	r3, [pc, #116]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1c0      	bne.n	800441c <FreeRTOS_CLIProcessCommand+0x20>
 800449a:	e000      	b.n	800449e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
 800449c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800449e:	4b19      	ldr	r3, [pc, #100]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <FreeRTOS_CLIProcessCommand+0xc4>
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d109      	bne.n	80044c0 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4917      	ldr	r1, [pc, #92]	; (800450c <FreeRTOS_CLIProcessCommand+0x110>)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	0018      	movs	r0, r3
 80044b4:	f002 fb35 	bl	8006b22 <strncpy>
		pxCommand = NULL;
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e01c      	b.n	80044fa <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
 80044c0:	4b10      	ldr	r3, [pc, #64]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d010      	beq.n	80044ea <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80044c8:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	68b8      	ldr	r0, [r7, #8]
 80044d6:	4798      	blx	r3
 80044d8:	0003      	movs	r3, r0
 80044da:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <FreeRTOS_CLIProcessCommand+0x108>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e007      	b.n	80044fa <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4908      	ldr	r1, [pc, #32]	; (8004510 <FreeRTOS_CLIProcessCommand+0x114>)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f002 fb16 	bl	8006b22 <strncpy>
		xReturn = pdFALSE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 80044fa:	69fb      	ldr	r3, [r7, #28]
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b008      	add	sp, #32
 8004502:	bd80      	pop	{r7, pc}
 8004504:	200008bc 	.word	0x200008bc
 8004508:	20000014 	.word	0x20000014
 800450c:	0800758c 	.word	0x0800758c
 8004510:	080075e4 	.word	0x080075e4

08004514 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 800452e:	e03b      	b.n	80045a8 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3301      	adds	r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <FreeRTOS_CLIGetParameter+0x3a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b20      	cmp	r3, #32
 8004544:	d1f4      	bne.n	8004530 <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8004546:	e002      	b.n	800454e <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3301      	adds	r3, #1
 800454c:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <FreeRTOS_CLIGetParameter+0x4a>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b20      	cmp	r3, #32
 800455c:	d0f4      	beq.n	8004548 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d025      	beq.n	80045b2 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	3301      	adds	r3, #1
 800456a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	429a      	cmp	r2, r3
 8004572:	d119      	bne.n	80045a8 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8004578:	e007      	b.n	800458a <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <FreeRTOS_CLIGetParameter+0x86>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	2b20      	cmp	r3, #32
 8004598:	d1ef      	bne.n	800457a <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	613b      	str	r3, [r7, #16]
				}

				break;
 80045a6:	e006      	b.n	80045b6 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d3c2      	bcc.n	8004536 <FreeRTOS_CLIGetParameter+0x22>
 80045b0:	e002      	b.n	80045b8 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	e000      	b.n	80045b8 <FreeRTOS_CLIGetParameter+0xa4>
				break;
 80045b6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return pcReturn;
 80045b8:	693b      	ldr	r3, [r7, #16]
}
 80045ba:	0018      	movs	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	b006      	add	sp, #24
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <prvHelpCommand+0x54>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <prvHelpCommand+0x54>)
 80045da:	4a10      	ldr	r2, [pc, #64]	; (800461c <prvHelpCommand+0x58>)
 80045dc:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <prvHelpCommand+0x54>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f002 fa99 	bl	8006b22 <strncpy>
	pxCommand = pxCommand->pxNext;
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <prvHelpCommand+0x54>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <prvHelpCommand+0x54>)
 80045f8:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
 80045fa:	4b07      	ldr	r3, [pc, #28]	; (8004618 <prvHelpCommand+0x54>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e001      	b.n	800460c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800460c:	697b      	ldr	r3, [r7, #20]
}
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b006      	add	sp, #24
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	200008c0 	.word	0x200008c0
 800461c:	20000014 	.word	0x20000014

08004620 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8004628:	230f      	movs	r3, #15
 800462a:	18fb      	adds	r3, r7, r3
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8004634:	e017      	b.n	8004666 <prvGetNumberOfParameters+0x46>
	{
		if( ( *pcCommandString ) == ' ' )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b20      	cmp	r3, #32
 800463c:	d10e      	bne.n	800465c <prvGetNumberOfParameters+0x3c>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d00d      	beq.n	8004660 <prvGetNumberOfParameters+0x40>
			{
				cParameters++;
 8004644:	210f      	movs	r1, #15
 8004646:	187b      	adds	r3, r7, r1
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	b25b      	sxtb	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	3301      	adds	r3, #1
 8004650:	b2da      	uxtb	r2, r3
 8004652:	187b      	adds	r3, r7, r1
 8004654:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	e001      	b.n	8004660 <prvGetNumberOfParameters+0x40>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3301      	adds	r3, #1
 8004664:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e3      	bne.n	8004636 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d108      	bne.n	8004686 <prvGetNumberOfParameters+0x66>
	{
		cParameters--;
 8004674:	210f      	movs	r1, #15
 8004676:	187b      	adds	r3, r7, r1
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b25b      	sxtb	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b2da      	uxtb	r2, r3
 8004682:	187b      	adds	r3, r7, r1
 8004684:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8004686:	230f      	movs	r3, #15
 8004688:	18fb      	adds	r3, r7, r3
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	b25b      	sxtb	r3, r3
}
 800468e:	0018      	movs	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	b004      	add	sp, #16
 8004694:	bd80      	pop	{r7, pc}

08004696 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3308      	adds	r3, #8
 80046a2:	001a      	movs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	4252      	negs	r2, r2
 80046ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3308      	adds	r3, #8
 80046b4:	001a      	movs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3308      	adds	r3, #8
 80046be:	001a      	movs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b002      	add	sp, #8
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	601a      	str	r2, [r3, #0]
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b004      	add	sp, #16
 800472a:	bd80      	pop	{r7, pc}

0800472c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	3301      	adds	r3, #1
 8004740:	d103      	bne.n	800474a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e00c      	b.n	8004764 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3308      	adds	r3, #8
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e002      	b.n	8004758 <vListInsert+0x2c>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d2f6      	bcs.n	8004752 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b004      	add	sp, #16
 8004796:	bd80      	pop	{r7, pc}

08004798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6892      	ldr	r2, [r2, #8]
 80047ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6852      	ldr	r2, [r2, #4]
 80047b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d103      	bne.n	80047cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	1e5a      	subs	r2, r3, #1
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	0018      	movs	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b004      	add	sp, #16
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <xQueueGenericReset+0x18>
 80047fc:	b672      	cpsid	i
 80047fe:	e7fe      	b.n	80047fe <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8004800:	f001 fdfe 	bl	8006400 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	434b      	muls	r3, r1
 8004812:	18d2      	adds	r2, r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	1e59      	subs	r1, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	434b      	muls	r3, r1
 8004836:	18d2      	adds	r2, r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2244      	movs	r2, #68	; 0x44
 8004840:	21ff      	movs	r1, #255	; 0xff
 8004842:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2245      	movs	r2, #69	; 0x45
 8004848:	21ff      	movs	r1, #255	; 0xff
 800484a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10d      	bne.n	800486e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d013      	beq.n	8004882 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3310      	adds	r3, #16
 800485e:	0018      	movs	r0, r3
 8004860:	f000 fff6 	bl	8005850 <xTaskRemoveFromEventList>
 8004864:	1e03      	subs	r3, r0, #0
 8004866:	d00c      	beq.n	8004882 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004868:	f001 fdba 	bl	80063e0 <vPortYield>
 800486c:	e009      	b.n	8004882 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3310      	adds	r3, #16
 8004872:	0018      	movs	r0, r3
 8004874:	f7ff ff0f 	bl	8004696 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3324      	adds	r3, #36	; 0x24
 800487c:	0018      	movs	r0, r3
 800487e:	f7ff ff0a 	bl	8004696 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004882:	f001 fdcf 	bl	8006424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004886:	2301      	movs	r3, #1
}
 8004888:	0018      	movs	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	b004      	add	sp, #16
 800488e:	bd80      	pop	{r7, pc}

08004890 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b089      	sub	sp, #36	; 0x24
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <xQueueGenericCreateStatic+0x18>
 80048a4:	b672      	cpsid	i
 80048a6:	e7fe      	b.n	80048a6 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <xQueueGenericCreateStatic+0x22>
 80048ae:	b672      	cpsid	i
 80048b0:	e7fe      	b.n	80048b0 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <xQueueGenericCreateStatic+0x2e>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <xQueueGenericCreateStatic+0x32>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <xQueueGenericCreateStatic+0x34>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <xQueueGenericCreateStatic+0x3c>
 80048c8:	b672      	cpsid	i
 80048ca:	e7fe      	b.n	80048ca <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <xQueueGenericCreateStatic+0x48>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <xQueueGenericCreateStatic+0x4c>
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <xQueueGenericCreateStatic+0x4e>
 80048dc:	2300      	movs	r3, #0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <xQueueGenericCreateStatic+0x56>
 80048e2:	b672      	cpsid	i
 80048e4:	e7fe      	b.n	80048e4 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048e6:	2350      	movs	r3, #80	; 0x50
 80048e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	2b50      	cmp	r3, #80	; 0x50
 80048ee:	d001      	beq.n	80048f4 <xQueueGenericCreateStatic+0x64>
 80048f0:	b672      	cpsid	i
 80048f2:	e7fe      	b.n	80048f2 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00e      	beq.n	800491c <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2246      	movs	r2, #70	; 0x46
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004906:	2328      	movs	r3, #40	; 0x28
 8004908:	18fb      	adds	r3, r7, r3
 800490a:	781c      	ldrb	r4, [r3, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	0023      	movs	r3, r4
 8004918:	f000 f805 	bl	8004926 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800491c:	697b      	ldr	r3, [r7, #20]
	}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b007      	add	sp, #28
 8004924:	bd90      	pop	{r4, r7, pc}

08004926 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	001a      	movs	r2, r3
 8004934:	1cfb      	adds	r3, r7, #3
 8004936:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d103      	bne.n	8004946 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e002      	b.n	800494c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2101      	movs	r1, #1
 800495c:	0018      	movs	r0, r3
 800495e:	f7ff ff43 	bl	80047e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	1cfa      	adds	r2, r7, #3
 8004966:	214c      	movs	r1, #76	; 0x4c
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b004      	add	sp, #16
 8004972:	bd80      	pop	{r7, pc}

08004974 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004982:	2300      	movs	r3, #0
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <xQueueGenericSend+0x20>
 8004990:	b672      	cpsid	i
 8004992:	e7fe      	b.n	8004992 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d103      	bne.n	80049a2 <xQueueGenericSend+0x2e>
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <xQueueGenericSend+0x32>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <xQueueGenericSend+0x34>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <xQueueGenericSend+0x3c>
 80049ac:	b672      	cpsid	i
 80049ae:	e7fe      	b.n	80049ae <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d103      	bne.n	80049be <xQueueGenericSend+0x4a>
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <xQueueGenericSend+0x4e>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <xQueueGenericSend+0x50>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <xQueueGenericSend+0x58>
 80049c8:	b672      	cpsid	i
 80049ca:	e7fe      	b.n	80049ca <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049cc:	f001 f8de 	bl	8005b8c <xTaskGetSchedulerState>
 80049d0:	1e03      	subs	r3, r0, #0
 80049d2:	d102      	bne.n	80049da <xQueueGenericSend+0x66>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <xQueueGenericSend+0x6a>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <xQueueGenericSend+0x6c>
 80049de:	2300      	movs	r3, #0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <xQueueGenericSend+0x74>
 80049e4:	b672      	cpsid	i
 80049e6:	e7fe      	b.n	80049e6 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049e8:	f001 fd0a 	bl	8006400 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <xQueueGenericSend+0x8a>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d11e      	bne.n	8004a3c <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	0018      	movs	r0, r3
 8004a06:	f000 f99f 	bl	8004d48 <prvCopyDataToQueue>
 8004a0a:	0003      	movs	r3, r0
 8004a0c:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	3324      	adds	r3, #36	; 0x24
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 ff18 	bl	8005850 <xTaskRemoveFromEventList>
 8004a20:	1e03      	subs	r3, r0, #0
 8004a22:	d007      	beq.n	8004a34 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a24:	f001 fcdc 	bl	80063e0 <vPortYield>
 8004a28:	e004      	b.n	8004a34 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a30:	f001 fcd6 	bl	80063e0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a34:	f001 fcf6 	bl	8006424 <vPortExitCritical>
				return pdPASS;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e05b      	b.n	8004af4 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d103      	bne.n	8004a4a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a42:	f001 fcef 	bl	8006424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e054      	b.n	8004af4 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d106      	bne.n	8004a5e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a50:	2314      	movs	r3, #20
 8004a52:	18fb      	adds	r3, r7, r3
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 ff57 	bl	8005908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a5e:	f001 fce1 	bl	8006424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a62:	f000 fcfd 	bl	8005460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a66:	f001 fccb 	bl	8006400 <vPortEnterCritical>
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	2244      	movs	r2, #68	; 0x44
 8004a6e:	5c9b      	ldrb	r3, [r3, r2]
 8004a70:	b25b      	sxtb	r3, r3
 8004a72:	3301      	adds	r3, #1
 8004a74:	d103      	bne.n	8004a7e <xQueueGenericSend+0x10a>
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	2244      	movs	r2, #68	; 0x44
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	5499      	strb	r1, [r3, r2]
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	2245      	movs	r2, #69	; 0x45
 8004a82:	5c9b      	ldrb	r3, [r3, r2]
 8004a84:	b25b      	sxtb	r3, r3
 8004a86:	3301      	adds	r3, #1
 8004a88:	d103      	bne.n	8004a92 <xQueueGenericSend+0x11e>
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	2245      	movs	r2, #69	; 0x45
 8004a8e:	2100      	movs	r1, #0
 8004a90:	5499      	strb	r1, [r3, r2]
 8004a92:	f001 fcc7 	bl	8006424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a96:	1d3a      	adds	r2, r7, #4
 8004a98:	2314      	movs	r3, #20
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	0011      	movs	r1, r2
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f000 ff46 	bl	8005930 <xTaskCheckForTimeOut>
 8004aa4:	1e03      	subs	r3, r0, #0
 8004aa6:	d11e      	bne.n	8004ae6 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f000 fa51 	bl	8004f52 <prvIsQueueFull>
 8004ab0:	1e03      	subs	r3, r0, #0
 8004ab2:	d011      	beq.n	8004ad8 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	3310      	adds	r3, #16
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	0011      	movs	r1, r2
 8004abc:	0018      	movs	r0, r3
 8004abe:	f000 fe83 	bl	80057c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f000 f9d0 	bl	8004e6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004aca:	f000 fcd5 	bl	8005478 <xTaskResumeAll>
 8004ace:	1e03      	subs	r3, r0, #0
 8004ad0:	d18a      	bne.n	80049e8 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004ad2:	f001 fc85 	bl	80063e0 <vPortYield>
 8004ad6:	e787      	b.n	80049e8 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f000 f9c5 	bl	8004e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ae0:	f000 fcca 	bl	8005478 <xTaskResumeAll>
 8004ae4:	e780      	b.n	80049e8 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f000 f9be 	bl	8004e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aee:	f000 fcc3 	bl	8005478 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004af2:	2300      	movs	r3, #0
		}
	}
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b00a      	add	sp, #40	; 0x28
 8004afa:	bd80      	pop	{r7, pc}

08004afc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004afc:	b590      	push	{r4, r7, lr}
 8004afe:	b089      	sub	sp, #36	; 0x24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <xQueueGenericSendFromISR+0x1c>
 8004b14:	b672      	cpsid	i
 8004b16:	e7fe      	b.n	8004b16 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <xQueueGenericSendFromISR+0x2a>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <xQueueGenericSendFromISR+0x2e>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <xQueueGenericSendFromISR+0x30>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <xQueueGenericSendFromISR+0x38>
 8004b30:	b672      	cpsid	i
 8004b32:	e7fe      	b.n	8004b32 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d103      	bne.n	8004b42 <xQueueGenericSendFromISR+0x46>
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <xQueueGenericSendFromISR+0x4a>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <xQueueGenericSendFromISR+0x4c>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <xQueueGenericSendFromISR+0x54>
 8004b4c:	b672      	cpsid	i
 8004b4e:	e7fe      	b.n	8004b4e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b50:	f001 fc80 	bl	8006454 <ulSetInterruptMaskFromISR>
 8004b54:	0003      	movs	r3, r0
 8004b56:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d302      	bcc.n	8004b6a <xQueueGenericSendFromISR+0x6e>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d12e      	bne.n	8004bc8 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b6a:	2413      	movs	r4, #19
 8004b6c:	193b      	adds	r3, r7, r4
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	2145      	movs	r1, #69	; 0x45
 8004b72:	5c52      	ldrb	r2, [r2, r1]
 8004b74:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 f8e3 	bl	8004d48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b82:	193b      	adds	r3, r7, r4
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	b25b      	sxtb	r3, r3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	d111      	bne.n	8004bb0 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d016      	beq.n	8004bc2 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	3324      	adds	r3, #36	; 0x24
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f000 fe59 	bl	8005850 <xTaskRemoveFromEventList>
 8004b9e:	1e03      	subs	r3, r0, #0
 8004ba0:	d00f      	beq.n	8004bc2 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00c      	beq.n	8004bc2 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e008      	b.n	8004bc2 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bb0:	2313      	movs	r3, #19
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	b259      	sxtb	r1, r3
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2245      	movs	r2, #69	; 0x45
 8004bc0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
		{
 8004bc6:	e001      	b.n	8004bcc <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f001 fc46 	bl	8006460 <vClearInterruptMaskFromISR>

	return xReturn;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
}
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b009      	add	sp, #36	; 0x24
 8004bdc:	bd90      	pop	{r4, r7, pc}

08004bde <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b08a      	sub	sp, #40	; 0x28
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <xQueueReceive+0x1e>
 8004bf8:	b672      	cpsid	i
 8004bfa:	e7fe      	b.n	8004bfa <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <xQueueReceive+0x2c>
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <xQueueReceive+0x30>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <xQueueReceive+0x32>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <xQueueReceive+0x3a>
 8004c14:	b672      	cpsid	i
 8004c16:	e7fe      	b.n	8004c16 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c18:	f000 ffb8 	bl	8005b8c <xTaskGetSchedulerState>
 8004c1c:	1e03      	subs	r3, r0, #0
 8004c1e:	d102      	bne.n	8004c26 <xQueueReceive+0x48>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <xQueueReceive+0x4c>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <xQueueReceive+0x4e>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <xQueueReceive+0x56>
 8004c30:	b672      	cpsid	i
 8004c32:	e7fe      	b.n	8004c32 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c34:	f001 fbe4 	bl	8006400 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01a      	beq.n	8004c7a <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	0011      	movs	r1, r2
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 f8e7 	bl	8004e1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	1e5a      	subs	r2, r3, #1
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	3310      	adds	r3, #16
 8004c64:	0018      	movs	r0, r3
 8004c66:	f000 fdf3 	bl	8005850 <xTaskRemoveFromEventList>
 8004c6a:	1e03      	subs	r3, r0, #0
 8004c6c:	d001      	beq.n	8004c72 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c6e:	f001 fbb7 	bl	80063e0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c72:	f001 fbd7 	bl	8006424 <vPortExitCritical>
				return pdPASS;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e062      	b.n	8004d40 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c80:	f001 fbd0 	bl	8006424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e05b      	b.n	8004d40 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c8e:	2314      	movs	r3, #20
 8004c90:	18fb      	adds	r3, r7, r3
 8004c92:	0018      	movs	r0, r3
 8004c94:	f000 fe38 	bl	8005908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c9c:	f001 fbc2 	bl	8006424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ca0:	f000 fbde 	bl	8005460 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ca4:	f001 fbac 	bl	8006400 <vPortEnterCritical>
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2244      	movs	r2, #68	; 0x44
 8004cac:	5c9b      	ldrb	r3, [r3, r2]
 8004cae:	b25b      	sxtb	r3, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	d103      	bne.n	8004cbc <xQueueReceive+0xde>
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	2244      	movs	r2, #68	; 0x44
 8004cb8:	2100      	movs	r1, #0
 8004cba:	5499      	strb	r1, [r3, r2]
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	2245      	movs	r2, #69	; 0x45
 8004cc0:	5c9b      	ldrb	r3, [r3, r2]
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	d103      	bne.n	8004cd0 <xQueueReceive+0xf2>
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	2245      	movs	r2, #69	; 0x45
 8004ccc:	2100      	movs	r1, #0
 8004cce:	5499      	strb	r1, [r3, r2]
 8004cd0:	f001 fba8 	bl	8006424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cd4:	1d3a      	adds	r2, r7, #4
 8004cd6:	2314      	movs	r3, #20
 8004cd8:	18fb      	adds	r3, r7, r3
 8004cda:	0011      	movs	r1, r2
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f000 fe27 	bl	8005930 <xTaskCheckForTimeOut>
 8004ce2:	1e03      	subs	r3, r0, #0
 8004ce4:	d11e      	bne.n	8004d24 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f000 f91c 	bl	8004f26 <prvIsQueueEmpty>
 8004cee:	1e03      	subs	r3, r0, #0
 8004cf0:	d011      	beq.n	8004d16 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	3324      	adds	r3, #36	; 0x24
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	0011      	movs	r1, r2
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	f000 fd64 	bl	80057c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	0018      	movs	r0, r3
 8004d04:	f000 f8b1 	bl	8004e6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d08:	f000 fbb6 	bl	8005478 <xTaskResumeAll>
 8004d0c:	1e03      	subs	r3, r0, #0
 8004d0e:	d191      	bne.n	8004c34 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004d10:	f001 fb66 	bl	80063e0 <vPortYield>
 8004d14:	e78e      	b.n	8004c34 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f000 f8a6 	bl	8004e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d1e:	f000 fbab 	bl	8005478 <xTaskResumeAll>
 8004d22:	e787      	b.n	8004c34 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	0018      	movs	r0, r3
 8004d28:	f000 f89f 	bl	8004e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d2c:	f000 fba4 	bl	8005478 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 f8f7 	bl	8004f26 <prvIsQueueEmpty>
 8004d38:	1e03      	subs	r3, r0, #0
 8004d3a:	d100      	bne.n	8004d3e <xQueueReceive+0x160>
 8004d3c:	e77a      	b.n	8004c34 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b00a      	add	sp, #40	; 0x28
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10e      	bne.n	8004d84 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d14e      	bne.n	8004e0c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	0018      	movs	r0, r3
 8004d74:	f000 ff26 	bl	8005bc4 <xTaskPriorityDisinherit>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	605a      	str	r2, [r3, #4]
 8004d82:	e043      	b.n	8004e0c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d119      	bne.n	8004dbe <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6898      	ldr	r0, [r3, #8]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	0019      	movs	r1, r3
 8004d96:	f001 fd9d 	bl	80068d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	18d2      	adds	r2, r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d32b      	bcc.n	8004e0c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	e026      	b.n	8004e0c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	68d8      	ldr	r0, [r3, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	0019      	movs	r1, r3
 8004dca:	f001 fd83 	bl	80068d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	425b      	negs	r3, r3
 8004dd8:	18d2      	adds	r2, r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d207      	bcs.n	8004dfa <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	425b      	negs	r3, r3
 8004df4:	18d2      	adds	r2, r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d105      	bne.n	8004e0c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e14:	697b      	ldr	r3, [r7, #20]
}
 8004e16:	0018      	movs	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	b006      	add	sp, #24
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d018      	beq.n	8004e62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	18d2      	adds	r2, r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d303      	bcc.n	8004e52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68d9      	ldr	r1, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f001 fd39 	bl	80068d4 <memcpy>
	}
}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b002      	add	sp, #8
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e72:	f001 fac5 	bl	8006400 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e76:	230f      	movs	r3, #15
 8004e78:	18fb      	adds	r3, r7, r3
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	2145      	movs	r1, #69	; 0x45
 8004e7e:	5c52      	ldrb	r2, [r2, r1]
 8004e80:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e82:	e013      	b.n	8004eac <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d016      	beq.n	8004eba <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3324      	adds	r3, #36	; 0x24
 8004e90:	0018      	movs	r0, r3
 8004e92:	f000 fcdd 	bl	8005850 <xTaskRemoveFromEventList>
 8004e96:	1e03      	subs	r3, r0, #0
 8004e98:	d001      	beq.n	8004e9e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e9a:	f000 fd99 	bl	80059d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e9e:	210f      	movs	r1, #15
 8004ea0:	187b      	adds	r3, r7, r1
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eac:	230f      	movs	r3, #15
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b25b      	sxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	dce5      	bgt.n	8004e84 <prvUnlockQueue+0x1a>
 8004eb8:	e000      	b.n	8004ebc <prvUnlockQueue+0x52>
					break;
 8004eba:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2245      	movs	r2, #69	; 0x45
 8004ec0:	21ff      	movs	r1, #255	; 0xff
 8004ec2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004ec4:	f001 faae 	bl	8006424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ec8:	f001 fa9a 	bl	8006400 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ecc:	230e      	movs	r3, #14
 8004ece:	18fb      	adds	r3, r7, r3
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	2144      	movs	r1, #68	; 0x44
 8004ed4:	5c52      	ldrb	r2, [r2, r1]
 8004ed6:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ed8:	e013      	b.n	8004f02 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d016      	beq.n	8004f10 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3310      	adds	r3, #16
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f000 fcb2 	bl	8005850 <xTaskRemoveFromEventList>
 8004eec:	1e03      	subs	r3, r0, #0
 8004eee:	d001      	beq.n	8004ef4 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004ef0:	f000 fd6e 	bl	80059d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ef4:	210e      	movs	r1, #14
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	187b      	adds	r3, r7, r1
 8004f00:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f02:	230e      	movs	r3, #14
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	b25b      	sxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	dce5      	bgt.n	8004eda <prvUnlockQueue+0x70>
 8004f0e:	e000      	b.n	8004f12 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004f10:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2244      	movs	r2, #68	; 0x44
 8004f16:	21ff      	movs	r1, #255	; 0xff
 8004f18:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004f1a:	f001 fa83 	bl	8006424 <vPortExitCritical>
}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b004      	add	sp, #16
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f2e:	f001 fa67 	bl	8006400 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e001      	b.n	8004f44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f44:	f001 fa6e 	bl	8006424 <vPortExitCritical>

	return xReturn;
 8004f48:	68fb      	ldr	r3, [r7, #12]
}
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b004      	add	sp, #16
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f5a:	f001 fa51 	bl	8006400 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d102      	bne.n	8004f70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e001      	b.n	8004f74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f74:	f001 fa56 	bl	8006424 <vPortExitCritical>

	return xReturn;
 8004f78:	68fb      	ldr	r3, [r7, #12]
}
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b004      	add	sp, #16
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e015      	b.n	8004fc0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <vQueueAddToRegistry+0x4c>)
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	00d2      	lsls	r2, r2, #3
 8004f9a:	58d3      	ldr	r3, [r2, r3]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10c      	bne.n	8004fba <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fa0:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <vQueueAddToRegistry+0x4c>)
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	00d2      	lsls	r2, r2, #3
 8004fa6:	6839      	ldr	r1, [r7, #0]
 8004fa8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <vQueueAddToRegistry+0x4c>)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	18d3      	adds	r3, r2, r3
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fb8:	e006      	b.n	8004fc8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b07      	cmp	r3, #7
 8004fc4:	d9e6      	bls.n	8004f94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	46c0      	nop			; (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	b004      	add	sp, #16
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	2000288c 	.word	0x2000288c

08004fd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004fe4:	f001 fa0c 	bl	8006400 <vPortEnterCritical>
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2244      	movs	r2, #68	; 0x44
 8004fec:	5c9b      	ldrb	r3, [r3, r2]
 8004fee:	b25b      	sxtb	r3, r3
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	d103      	bne.n	8004ffc <vQueueWaitForMessageRestricted+0x28>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2244      	movs	r2, #68	; 0x44
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	5499      	strb	r1, [r3, r2]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2245      	movs	r2, #69	; 0x45
 8005000:	5c9b      	ldrb	r3, [r3, r2]
 8005002:	b25b      	sxtb	r3, r3
 8005004:	3301      	adds	r3, #1
 8005006:	d103      	bne.n	8005010 <vQueueWaitForMessageRestricted+0x3c>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2245      	movs	r2, #69	; 0x45
 800500c:	2100      	movs	r1, #0
 800500e:	5499      	strb	r1, [r3, r2]
 8005010:	f001 fa08 	bl	8006424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	0018      	movs	r0, r3
 8005026:	f000 fbed 	bl	8005804 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	0018      	movs	r0, r3
 800502e:	f7ff ff1c 	bl	8004e6a <prvUnlockQueue>
	}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	46bd      	mov	sp, r7
 8005036:	b006      	add	sp, #24
 8005038:	bd80      	pop	{r7, pc}

0800503a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800503a:	b590      	push	{r4, r7, lr}
 800503c:	b08d      	sub	sp, #52	; 0x34
 800503e:	af04      	add	r7, sp, #16
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <xTaskCreateStatic+0x18>
 800504e:	b672      	cpsid	i
 8005050:	e7fe      	b.n	8005050 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <xTaskCreateStatic+0x22>
 8005058:	b672      	cpsid	i
 800505a:	e7fe      	b.n	800505a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800505c:	23bc      	movs	r3, #188	; 0xbc
 800505e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2bbc      	cmp	r3, #188	; 0xbc
 8005064:	d001      	beq.n	800506a <xTaskCreateStatic+0x30>
 8005066:	b672      	cpsid	i
 8005068:	e7fe      	b.n	8005068 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d020      	beq.n	80050b2 <xTaskCreateStatic+0x78>
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01d      	beq.n	80050b2 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800507e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	22b9      	movs	r2, #185	; 0xb9
 8005084:	2102      	movs	r1, #2
 8005086:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005088:	683c      	ldr	r4, [r7, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	2300      	movs	r3, #0
 8005092:	9303      	str	r3, [sp, #12]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	9302      	str	r3, [sp, #8]
 8005098:	2318      	movs	r3, #24
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	0023      	movs	r3, r4
 80050a4:	f000 f858 	bl	8005158 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	0018      	movs	r0, r3
 80050ac:	f000 f8ec 	bl	8005288 <prvAddNewTaskToReadyList>
 80050b0:	e001      	b.n	80050b6 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050b6:	69bb      	ldr	r3, [r7, #24]
	}
 80050b8:	0018      	movs	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b009      	add	sp, #36	; 0x24
 80050be:	bd90      	pop	{r4, r7, pc}

080050c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b08d      	sub	sp, #52	; 0x34
 80050c4:	af04      	add	r7, sp, #16
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	1dbb      	adds	r3, r7, #6
 80050ce:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d0:	1dbb      	adds	r3, r7, #6
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	0018      	movs	r0, r3
 80050d8:	f001 fa2a 	bl	8006530 <pvPortMalloc>
 80050dc:	0003      	movs	r3, r0
 80050de:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d010      	beq.n	8005108 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80050e6:	20bc      	movs	r0, #188	; 0xbc
 80050e8:	f001 fa22 	bl	8006530 <pvPortMalloc>
 80050ec:	0003      	movs	r3, r0
 80050ee:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30
 80050fc:	e006      	b.n	800510c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	0018      	movs	r0, r3
 8005102:	f001 fabb 	bl	800667c <vPortFree>
 8005106:	e001      	b.n	800510c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01a      	beq.n	8005148 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	22b9      	movs	r2, #185	; 0xb9
 8005116:	2100      	movs	r1, #0
 8005118:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800511a:	1dbb      	adds	r3, r7, #6
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	683c      	ldr	r4, [r7, #0]
 8005120:	68b9      	ldr	r1, [r7, #8]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	2300      	movs	r3, #0
 8005126:	9303      	str	r3, [sp, #12]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	9302      	str	r3, [sp, #8]
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	0023      	movs	r3, r4
 8005136:	f000 f80f 	bl	8005158 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	0018      	movs	r0, r3
 800513e:	f000 f8a3 	bl	8005288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005142:	2301      	movs	r3, #1
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	e002      	b.n	800514e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005148:	2301      	movs	r3, #1
 800514a:	425b      	negs	r3, r3
 800514c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800514e:	69bb      	ldr	r3, [r7, #24]
	}
 8005150:	0018      	movs	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	b009      	add	sp, #36	; 0x24
 8005156:	bd90      	pop	{r4, r7, pc}

08005158 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	001a      	movs	r2, r3
 8005170:	21a5      	movs	r1, #165	; 0xa5
 8005172:	f001 fbb8 	bl	80068e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	493e      	ldr	r1, [pc, #248]	; (8005278 <prvInitialiseNewTask+0x120>)
 800517e:	468c      	mov	ip, r1
 8005180:	4463      	add	r3, ip
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	18d3      	adds	r3, r2, r3
 8005186:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2207      	movs	r2, #7
 800518c:	4393      	bics	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2207      	movs	r2, #7
 8005194:	4013      	ands	r3, r2
 8005196:	d001      	beq.n	800519c <prvInitialiseNewTask+0x44>
 8005198:	b672      	cpsid	i
 800519a:	e7fe      	b.n	800519a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800519c:	2300      	movs	r3, #0
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	e013      	b.n	80051ca <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	18d3      	adds	r3, r2, r3
 80051a8:	7818      	ldrb	r0, [r3, #0]
 80051aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ac:	2134      	movs	r1, #52	; 0x34
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	18d3      	adds	r3, r2, r3
 80051b2:	185b      	adds	r3, r3, r1
 80051b4:	1c02      	adds	r2, r0, #0
 80051b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	18d3      	adds	r3, r2, r3
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d006      	beq.n	80051d2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	3301      	adds	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b0f      	cmp	r3, #15
 80051ce:	d9e8      	bls.n	80051a2 <prvInitialiseNewTask+0x4a>
 80051d0:	e000      	b.n	80051d4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80051d2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	2243      	movs	r2, #67	; 0x43
 80051d8:	2100      	movs	r1, #0
 80051da:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	2b37      	cmp	r3, #55	; 0x37
 80051e0:	d901      	bls.n	80051e6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051e2:	2337      	movs	r3, #55	; 0x37
 80051e4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	6a3a      	ldr	r2, [r7, #32]
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	6a3a      	ldr	r2, [r7, #32]
 80051f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	2200      	movs	r2, #0
 80051f6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	3304      	adds	r3, #4
 80051fc:	0018      	movs	r0, r3
 80051fe:	f7ff fa68 	bl	80046d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	3318      	adds	r3, #24
 8005206:	0018      	movs	r0, r3
 8005208:	f7ff fa63 	bl	80046d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005210:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	2238      	movs	r2, #56	; 0x38
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005220:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	22b4      	movs	r2, #180	; 0xb4
 8005226:	2100      	movs	r1, #0
 8005228:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800522a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522c:	22b8      	movs	r2, #184	; 0xb8
 800522e:	2100      	movs	r1, #0
 8005230:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	3354      	adds	r3, #84	; 0x54
 8005236:	2260      	movs	r2, #96	; 0x60
 8005238:	2100      	movs	r1, #0
 800523a:	0018      	movs	r0, r3
 800523c:	f001 fb53 	bl	80068e6 <memset>
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	4a0e      	ldr	r2, [pc, #56]	; (800527c <prvInitialiseNewTask+0x124>)
 8005244:	659a      	str	r2, [r3, #88]	; 0x58
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	4a0d      	ldr	r2, [pc, #52]	; (8005280 <prvInitialiseNewTask+0x128>)
 800524a:	65da      	str	r2, [r3, #92]	; 0x5c
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <prvInitialiseNewTask+0x12c>)
 8005250:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	68f9      	ldr	r1, [r7, #12]
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	0018      	movs	r0, r3
 800525a:	f001 f833 	bl	80062c4 <pxPortInitialiseStack>
 800525e:	0002      	movs	r2, r0
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005270:	46c0      	nop			; (mov r8, r8)
 8005272:	46bd      	mov	sp, r7
 8005274:	b006      	add	sp, #24
 8005276:	bd80      	pop	{r7, pc}
 8005278:	3fffffff 	.word	0x3fffffff
 800527c:	08007754 	.word	0x08007754
 8005280:	08007774 	.word	0x08007774
 8005284:	08007734 	.word	0x08007734

08005288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005290:	f001 f8b6 	bl	8006400 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005294:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <prvAddNewTaskToReadyList+0xb8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	4b29      	ldr	r3, [pc, #164]	; (8005340 <prvAddNewTaskToReadyList+0xb8>)
 800529c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800529e:	4b29      	ldr	r3, [pc, #164]	; (8005344 <prvAddNewTaskToReadyList+0xbc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052a6:	4b27      	ldr	r3, [pc, #156]	; (8005344 <prvAddNewTaskToReadyList+0xbc>)
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052ac:	4b24      	ldr	r3, [pc, #144]	; (8005340 <prvAddNewTaskToReadyList+0xb8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d110      	bne.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052b4:	f000 fba6 	bl	8005a04 <prvInitialiseTaskLists>
 80052b8:	e00d      	b.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052ba:	4b23      	ldr	r3, [pc, #140]	; (8005348 <prvAddNewTaskToReadyList+0xc0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052c2:	4b20      	ldr	r3, [pc, #128]	; (8005344 <prvAddNewTaskToReadyList+0xbc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d802      	bhi.n	80052d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052d0:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <prvAddNewTaskToReadyList+0xbc>)
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052d6:	4b1d      	ldr	r3, [pc, #116]	; (800534c <prvAddNewTaskToReadyList+0xc4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	4b1b      	ldr	r3, [pc, #108]	; (800534c <prvAddNewTaskToReadyList+0xc4>)
 80052de:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052e0:	4b1a      	ldr	r3, [pc, #104]	; (800534c <prvAddNewTaskToReadyList+0xc4>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	4b18      	ldr	r3, [pc, #96]	; (8005350 <prvAddNewTaskToReadyList+0xc8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d903      	bls.n	80052fc <prvAddNewTaskToReadyList+0x74>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f8:	4b15      	ldr	r3, [pc, #84]	; (8005350 <prvAddNewTaskToReadyList+0xc8>)
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005300:	0013      	movs	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	189b      	adds	r3, r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4a12      	ldr	r2, [pc, #72]	; (8005354 <prvAddNewTaskToReadyList+0xcc>)
 800530a:	189a      	adds	r2, r3, r2
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	0019      	movs	r1, r3
 8005312:	0010      	movs	r0, r2
 8005314:	f7ff f9e8 	bl	80046e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005318:	f001 f884 	bl	8006424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <prvAddNewTaskToReadyList+0xc0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <prvAddNewTaskToReadyList+0xbc>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	429a      	cmp	r2, r3
 8005330:	d201      	bcs.n	8005336 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005332:	f001 f855 	bl	80063e0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	46bd      	mov	sp, r7
 800533a:	b002      	add	sp, #8
 800533c:	bd80      	pop	{r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	20000d98 	.word	0x20000d98
 8005344:	200008c4 	.word	0x200008c4
 8005348:	20000da4 	.word	0x20000da4
 800534c:	20000db4 	.word	0x20000db4
 8005350:	20000da0 	.word	0x20000da0
 8005354:	200008c8 	.word	0x200008c8

08005358 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d010      	beq.n	800538c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800536a:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <vTaskDelay+0x48>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <vTaskDelay+0x1e>
 8005372:	b672      	cpsid	i
 8005374:	e7fe      	b.n	8005374 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005376:	f000 f873 	bl	8005460 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2100      	movs	r1, #0
 800537e:	0018      	movs	r0, r3
 8005380:	f000 fc7c 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005384:	f000 f878 	bl	8005478 <xTaskResumeAll>
 8005388:	0003      	movs	r3, r0
 800538a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8005392:	f001 f825 	bl	80063e0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b004      	add	sp, #16
 800539c:	bd80      	pop	{r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	20000dc0 	.word	0x20000dc0

080053a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b089      	sub	sp, #36	; 0x24
 80053a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053b2:	003a      	movs	r2, r7
 80053b4:	1d39      	adds	r1, r7, #4
 80053b6:	2308      	movs	r3, #8
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	0018      	movs	r0, r3
 80053bc:	f7fe ffbc 	bl	8004338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053c0:	683c      	ldr	r4, [r7, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	491e      	ldr	r1, [pc, #120]	; (8005440 <vTaskStartScheduler+0x9c>)
 80053c8:	481e      	ldr	r0, [pc, #120]	; (8005444 <vTaskStartScheduler+0xa0>)
 80053ca:	9202      	str	r2, [sp, #8]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	2300      	movs	r3, #0
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	2300      	movs	r3, #0
 80053d4:	0022      	movs	r2, r4
 80053d6:	f7ff fe30 	bl	800503a <xTaskCreateStatic>
 80053da:	0002      	movs	r2, r0
 80053dc:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <vTaskStartScheduler+0xa4>)
 80053de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053e0:	4b19      	ldr	r3, [pc, #100]	; (8005448 <vTaskStartScheduler+0xa4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053e8:	2301      	movs	r3, #1
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	e001      	b.n	80053f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d103      	bne.n	8005400 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80053f8:	f000 fc94 	bl	8005d24 <xTimerCreateTimerTask>
 80053fc:	0003      	movs	r3, r0
 80053fe:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d113      	bne.n	800542e <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005406:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005408:	4b10      	ldr	r3, [pc, #64]	; (800544c <vTaskStartScheduler+0xa8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3354      	adds	r3, #84	; 0x54
 800540e:	001a      	movs	r2, r3
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <vTaskStartScheduler+0xac>)
 8005412:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <vTaskStartScheduler+0xb0>)
 8005416:	2201      	movs	r2, #1
 8005418:	4252      	negs	r2, r2
 800541a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800541c:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <vTaskStartScheduler+0xb4>)
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005422:	4b0e      	ldr	r3, [pc, #56]	; (800545c <vTaskStartScheduler+0xb8>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005428:	f000 ffb6 	bl	8006398 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800542c:	e004      	b.n	8005438 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	d101      	bne.n	8005438 <vTaskStartScheduler+0x94>
 8005434:	b672      	cpsid	i
 8005436:	e7fe      	b.n	8005436 <vTaskStartScheduler+0x92>
}
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	46bd      	mov	sp, r7
 800543c:	b005      	add	sp, #20
 800543e:	bd90      	pop	{r4, r7, pc}
 8005440:	08007634 	.word	0x08007634
 8005444:	080059e5 	.word	0x080059e5
 8005448:	20000dbc 	.word	0x20000dbc
 800544c:	200008c4 	.word	0x200008c4
 8005450:	20000024 	.word	0x20000024
 8005454:	20000db8 	.word	0x20000db8
 8005458:	20000da4 	.word	0x20000da4
 800545c:	20000d9c 	.word	0x20000d9c

08005460 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005464:	4b03      	ldr	r3, [pc, #12]	; (8005474 <vTaskSuspendAll+0x14>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	4b02      	ldr	r3, [pc, #8]	; (8005474 <vTaskSuspendAll+0x14>)
 800546c:	601a      	str	r2, [r3, #0]
}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000dc0 	.word	0x20000dc0

08005478 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005482:	2300      	movs	r3, #0
 8005484:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005486:	4b3a      	ldr	r3, [pc, #232]	; (8005570 <xTaskResumeAll+0xf8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <xTaskResumeAll+0x1a>
 800548e:	b672      	cpsid	i
 8005490:	e7fe      	b.n	8005490 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005492:	f000 ffb5 	bl	8006400 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005496:	4b36      	ldr	r3, [pc, #216]	; (8005570 <xTaskResumeAll+0xf8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	1e5a      	subs	r2, r3, #1
 800549c:	4b34      	ldr	r3, [pc, #208]	; (8005570 <xTaskResumeAll+0xf8>)
 800549e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a0:	4b33      	ldr	r3, [pc, #204]	; (8005570 <xTaskResumeAll+0xf8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d15b      	bne.n	8005560 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054a8:	4b32      	ldr	r3, [pc, #200]	; (8005574 <xTaskResumeAll+0xfc>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d057      	beq.n	8005560 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054b0:	e02f      	b.n	8005512 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054b2:	4b31      	ldr	r3, [pc, #196]	; (8005578 <xTaskResumeAll+0x100>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3318      	adds	r3, #24
 80054be:	0018      	movs	r0, r3
 80054c0:	f7ff f96a 	bl	8004798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3304      	adds	r3, #4
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7ff f965 	bl	8004798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d2:	4b2a      	ldr	r3, [pc, #168]	; (800557c <xTaskResumeAll+0x104>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d903      	bls.n	80054e2 <xTaskResumeAll+0x6a>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054de:	4b27      	ldr	r3, [pc, #156]	; (800557c <xTaskResumeAll+0x104>)
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e6:	0013      	movs	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	189b      	adds	r3, r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4a24      	ldr	r2, [pc, #144]	; (8005580 <xTaskResumeAll+0x108>)
 80054f0:	189a      	adds	r2, r3, r2
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3304      	adds	r3, #4
 80054f6:	0019      	movs	r1, r3
 80054f8:	0010      	movs	r0, r2
 80054fa:	f7ff f8f5 	bl	80046e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005502:	4b20      	ldr	r3, [pc, #128]	; (8005584 <xTaskResumeAll+0x10c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	429a      	cmp	r2, r3
 800550a:	d302      	bcc.n	8005512 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800550c:	4b1e      	ldr	r3, [pc, #120]	; (8005588 <xTaskResumeAll+0x110>)
 800550e:	2201      	movs	r2, #1
 8005510:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005512:	4b19      	ldr	r3, [pc, #100]	; (8005578 <xTaskResumeAll+0x100>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1cb      	bne.n	80054b2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005520:	f000 fb10 	bl	8005b44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005524:	4b19      	ldr	r3, [pc, #100]	; (800558c <xTaskResumeAll+0x114>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00f      	beq.n	8005550 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005530:	f000 f83c 	bl	80055ac <xTaskIncrementTick>
 8005534:	1e03      	subs	r3, r0, #0
 8005536:	d002      	beq.n	800553e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005538:	4b13      	ldr	r3, [pc, #76]	; (8005588 <xTaskResumeAll+0x110>)
 800553a:	2201      	movs	r2, #1
 800553c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3b01      	subs	r3, #1
 8005542:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f2      	bne.n	8005530 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800554a:	4b10      	ldr	r3, [pc, #64]	; (800558c <xTaskResumeAll+0x114>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005550:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <xTaskResumeAll+0x110>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005558:	2301      	movs	r3, #1
 800555a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800555c:	f000 ff40 	bl	80063e0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005560:	f000 ff60 	bl	8006424 <vPortExitCritical>

	return xAlreadyYielded;
 8005564:	68bb      	ldr	r3, [r7, #8]
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b004      	add	sp, #16
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	20000dc0 	.word	0x20000dc0
 8005574:	20000d98 	.word	0x20000d98
 8005578:	20000d58 	.word	0x20000d58
 800557c:	20000da0 	.word	0x20000da0
 8005580:	200008c8 	.word	0x200008c8
 8005584:	200008c4 	.word	0x200008c4
 8005588:	20000dac 	.word	0x20000dac
 800558c:	20000da8 	.word	0x20000da8

08005590 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005596:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <xTaskGetTickCount+0x18>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800559c:	687b      	ldr	r3, [r7, #4]
}
 800559e:	0018      	movs	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b002      	add	sp, #8
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	20000d9c 	.word	0x20000d9c

080055ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b6:	4b4c      	ldr	r3, [pc, #304]	; (80056e8 <xTaskIncrementTick+0x13c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d000      	beq.n	80055c0 <xTaskIncrementTick+0x14>
 80055be:	e083      	b.n	80056c8 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055c0:	4b4a      	ldr	r3, [pc, #296]	; (80056ec <xTaskIncrementTick+0x140>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055c8:	4b48      	ldr	r3, [pc, #288]	; (80056ec <xTaskIncrementTick+0x140>)
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d117      	bne.n	8005604 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80055d4:	4b46      	ldr	r3, [pc, #280]	; (80056f0 <xTaskIncrementTick+0x144>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <xTaskIncrementTick+0x36>
 80055de:	b672      	cpsid	i
 80055e0:	e7fe      	b.n	80055e0 <xTaskIncrementTick+0x34>
 80055e2:	4b43      	ldr	r3, [pc, #268]	; (80056f0 <xTaskIncrementTick+0x144>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	4b42      	ldr	r3, [pc, #264]	; (80056f4 <xTaskIncrementTick+0x148>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	4b40      	ldr	r3, [pc, #256]	; (80056f0 <xTaskIncrementTick+0x144>)
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	4b40      	ldr	r3, [pc, #256]	; (80056f4 <xTaskIncrementTick+0x148>)
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	4b40      	ldr	r3, [pc, #256]	; (80056f8 <xTaskIncrementTick+0x14c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	4b3e      	ldr	r3, [pc, #248]	; (80056f8 <xTaskIncrementTick+0x14c>)
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	f000 faa0 	bl	8005b44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005604:	4b3d      	ldr	r3, [pc, #244]	; (80056fc <xTaskIncrementTick+0x150>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	429a      	cmp	r2, r3
 800560c:	d34e      	bcc.n	80056ac <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800560e:	4b38      	ldr	r3, [pc, #224]	; (80056f0 <xTaskIncrementTick+0x144>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <xTaskIncrementTick+0x70>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <xTaskIncrementTick+0x72>
 800561c:	2300      	movs	r3, #0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005622:	4b36      	ldr	r3, [pc, #216]	; (80056fc <xTaskIncrementTick+0x150>)
 8005624:	2201      	movs	r2, #1
 8005626:	4252      	negs	r2, r2
 8005628:	601a      	str	r2, [r3, #0]
					break;
 800562a:	e03f      	b.n	80056ac <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800562c:	4b30      	ldr	r3, [pc, #192]	; (80056f0 <xTaskIncrementTick+0x144>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d203      	bcs.n	800564c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <xTaskIncrementTick+0x150>)
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	601a      	str	r2, [r3, #0]
						break;
 800564a:	e02f      	b.n	80056ac <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	3304      	adds	r3, #4
 8005650:	0018      	movs	r0, r3
 8005652:	f7ff f8a1 	bl	8004798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	3318      	adds	r3, #24
 8005662:	0018      	movs	r0, r3
 8005664:	f7ff f898 	bl	8004798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800566c:	4b24      	ldr	r3, [pc, #144]	; (8005700 <xTaskIncrementTick+0x154>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d903      	bls.n	800567c <xTaskIncrementTick+0xd0>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4b21      	ldr	r3, [pc, #132]	; (8005700 <xTaskIncrementTick+0x154>)
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005680:	0013      	movs	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	189b      	adds	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4a1e      	ldr	r2, [pc, #120]	; (8005704 <xTaskIncrementTick+0x158>)
 800568a:	189a      	adds	r2, r3, r2
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	3304      	adds	r3, #4
 8005690:	0019      	movs	r1, r3
 8005692:	0010      	movs	r0, r2
 8005694:	f7ff f828 	bl	80046e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <xTaskIncrementTick+0x15c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d3b3      	bcc.n	800560e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80056a6:	2301      	movs	r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056aa:	e7b0      	b.n	800560e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056ac:	4b16      	ldr	r3, [pc, #88]	; (8005708 <xTaskIncrementTick+0x15c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	4914      	ldr	r1, [pc, #80]	; (8005704 <xTaskIncrementTick+0x158>)
 80056b4:	0013      	movs	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	189b      	adds	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	585b      	ldr	r3, [r3, r1]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d907      	bls.n	80056d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80056c2:	2301      	movs	r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	e004      	b.n	80056d2 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056c8:	4b10      	ldr	r3, [pc, #64]	; (800570c <xTaskIncrementTick+0x160>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	4b0f      	ldr	r3, [pc, #60]	; (800570c <xTaskIncrementTick+0x160>)
 80056d0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056d2:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <xTaskIncrementTick+0x164>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80056da:	2301      	movs	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056de:	697b      	ldr	r3, [r7, #20]
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b006      	add	sp, #24
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000dc0 	.word	0x20000dc0
 80056ec:	20000d9c 	.word	0x20000d9c
 80056f0:	20000d50 	.word	0x20000d50
 80056f4:	20000d54 	.word	0x20000d54
 80056f8:	20000db0 	.word	0x20000db0
 80056fc:	20000db8 	.word	0x20000db8
 8005700:	20000da0 	.word	0x20000da0
 8005704:	200008c8 	.word	0x200008c8
 8005708:	200008c4 	.word	0x200008c4
 800570c:	20000da8 	.word	0x20000da8
 8005710:	20000dac 	.word	0x20000dac

08005714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800571a:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <vTaskSwitchContext+0x9c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <vTaskSwitchContext+0xa0>)
 8005724:	2201      	movs	r2, #1
 8005726:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005728:	e03d      	b.n	80057a6 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 800572a:	4b22      	ldr	r3, [pc, #136]	; (80057b4 <vTaskSwitchContext+0xa0>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005730:	4b21      	ldr	r3, [pc, #132]	; (80057b8 <vTaskSwitchContext+0xa4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	607b      	str	r3, [r7, #4]
 8005736:	e007      	b.n	8005748 <vTaskSwitchContext+0x34>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <vTaskSwitchContext+0x2e>
 800573e:	b672      	cpsid	i
 8005740:	e7fe      	b.n	8005740 <vTaskSwitchContext+0x2c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3b01      	subs	r3, #1
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	491c      	ldr	r1, [pc, #112]	; (80057bc <vTaskSwitchContext+0xa8>)
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	0013      	movs	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	189b      	adds	r3, r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	585b      	ldr	r3, [r3, r1]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ee      	beq.n	8005738 <vTaskSwitchContext+0x24>
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	0013      	movs	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	189b      	adds	r3, r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4a15      	ldr	r2, [pc, #84]	; (80057bc <vTaskSwitchContext+0xa8>)
 8005766:	189b      	adds	r3, r3, r2
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	3308      	adds	r3, #8
 800577c:	429a      	cmp	r2, r3
 800577e:	d104      	bne.n	800578a <vTaskSwitchContext+0x76>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <vTaskSwitchContext+0xac>)
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <vTaskSwitchContext+0xa4>)
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <vTaskSwitchContext+0xac>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3354      	adds	r3, #84	; 0x54
 80057a0:	001a      	movs	r2, r3
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <vTaskSwitchContext+0xb0>)
 80057a4:	601a      	str	r2, [r3, #0]
}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b002      	add	sp, #8
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	20000dc0 	.word	0x20000dc0
 80057b4:	20000dac 	.word	0x20000dac
 80057b8:	20000da0 	.word	0x20000da0
 80057bc:	200008c8 	.word	0x200008c8
 80057c0:	200008c4 	.word	0x200008c4
 80057c4:	20000024 	.word	0x20000024

080057c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <vTaskPlaceOnEventList+0x14>
 80057d8:	b672      	cpsid	i
 80057da:	e7fe      	b.n	80057da <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057dc:	4b08      	ldr	r3, [pc, #32]	; (8005800 <vTaskPlaceOnEventList+0x38>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3318      	adds	r3, #24
 80057e2:	001a      	movs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	0011      	movs	r1, r2
 80057e8:	0018      	movs	r0, r3
 80057ea:	f7fe ff9f 	bl	800472c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2101      	movs	r1, #1
 80057f2:	0018      	movs	r0, r3
 80057f4:	f000 fa42 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
}
 80057f8:	46c0      	nop			; (mov r8, r8)
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b002      	add	sp, #8
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	200008c4 	.word	0x200008c4

08005804 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <vTaskPlaceOnEventListRestricted+0x16>
 8005816:	b672      	cpsid	i
 8005818:	e7fe      	b.n	8005818 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800581a:	4b0c      	ldr	r3, [pc, #48]	; (800584c <vTaskPlaceOnEventListRestricted+0x48>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3318      	adds	r3, #24
 8005820:	001a      	movs	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f7fe ff5e 	bl	80046e8 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8005832:	2301      	movs	r3, #1
 8005834:	425b      	negs	r3, r3
 8005836:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	0011      	movs	r1, r2
 800583e:	0018      	movs	r0, r3
 8005840:	f000 fa1c 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
	}
 8005844:	46c0      	nop			; (mov r8, r8)
 8005846:	46bd      	mov	sp, r7
 8005848:	b004      	add	sp, #16
 800584a:	bd80      	pop	{r7, pc}
 800584c:	200008c4 	.word	0x200008c4

08005850 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <xTaskRemoveFromEventList+0x1a>
 8005866:	b672      	cpsid	i
 8005868:	e7fe      	b.n	8005868 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	3318      	adds	r3, #24
 800586e:	0018      	movs	r0, r3
 8005870:	f7fe ff92 	bl	8004798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005874:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <xTaskRemoveFromEventList+0xa0>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11d      	bne.n	80058b8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	3304      	adds	r3, #4
 8005880:	0018      	movs	r0, r3
 8005882:	f7fe ff89 	bl	8004798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588a:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <xTaskRemoveFromEventList+0xa4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d903      	bls.n	800589a <xTaskRemoveFromEventList+0x4a>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005896:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <xTaskRemoveFromEventList+0xa4>)
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	0013      	movs	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	189b      	adds	r3, r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4a14      	ldr	r2, [pc, #80]	; (80058f8 <xTaskRemoveFromEventList+0xa8>)
 80058a8:	189a      	adds	r2, r3, r2
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	3304      	adds	r3, #4
 80058ae:	0019      	movs	r1, r3
 80058b0:	0010      	movs	r0, r2
 80058b2:	f7fe ff19 	bl	80046e8 <vListInsertEnd>
 80058b6:	e007      	b.n	80058c8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	3318      	adds	r3, #24
 80058bc:	001a      	movs	r2, r3
 80058be:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <xTaskRemoveFromEventList+0xac>)
 80058c0:	0011      	movs	r1, r2
 80058c2:	0018      	movs	r0, r3
 80058c4:	f7fe ff10 	bl	80046e8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <xTaskRemoveFromEventList+0xb0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d905      	bls.n	80058e2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <xTaskRemoveFromEventList+0xb4>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e001      	b.n	80058e6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80058e6:	68fb      	ldr	r3, [r7, #12]
}
 80058e8:	0018      	movs	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b004      	add	sp, #16
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000dc0 	.word	0x20000dc0
 80058f4:	20000da0 	.word	0x20000da0
 80058f8:	200008c8 	.word	0x200008c8
 80058fc:	20000d58 	.word	0x20000d58
 8005900:	200008c4 	.word	0x200008c4
 8005904:	20000dac 	.word	0x20000dac

08005908 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <vTaskInternalSetTimeOutState+0x20>)
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005918:	4b04      	ldr	r3, [pc, #16]	; (800592c <vTaskInternalSetTimeOutState+0x24>)
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	605a      	str	r2, [r3, #4]
}
 8005920:	46c0      	nop			; (mov r8, r8)
 8005922:	46bd      	mov	sp, r7
 8005924:	b002      	add	sp, #8
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20000db0 	.word	0x20000db0
 800592c:	20000d9c 	.word	0x20000d9c

08005930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <xTaskCheckForTimeOut+0x14>
 8005940:	b672      	cpsid	i
 8005942:	e7fe      	b.n	8005942 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <xTaskCheckForTimeOut+0x1e>
 800594a:	b672      	cpsid	i
 800594c:	e7fe      	b.n	800594c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800594e:	f000 fd57 	bl	8006400 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005952:	4b1d      	ldr	r3, [pc, #116]	; (80059c8 <xTaskCheckForTimeOut+0x98>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3301      	adds	r3, #1
 8005968:	d102      	bne.n	8005970 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e024      	b.n	80059ba <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b15      	ldr	r3, [pc, #84]	; (80059cc <xTaskCheckForTimeOut+0x9c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d007      	beq.n	800598c <xTaskCheckForTimeOut+0x5c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	429a      	cmp	r2, r3
 8005984:	d302      	bcc.n	800598c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005986:	2301      	movs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	e016      	b.n	80059ba <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	429a      	cmp	r2, r3
 8005994:	d20c      	bcs.n	80059b0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1ad2      	subs	r2, r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	0018      	movs	r0, r3
 80059a6:	f7ff ffaf 	bl	8005908 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e004      	b.n	80059ba <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059b6:	2301      	movs	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80059ba:	f000 fd33 	bl	8006424 <vPortExitCritical>

	return xReturn;
 80059be:	697b      	ldr	r3, [r7, #20]
}
 80059c0:	0018      	movs	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	b006      	add	sp, #24
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20000d9c 	.word	0x20000d9c
 80059cc:	20000db0 	.word	0x20000db0

080059d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059d4:	4b02      	ldr	r3, [pc, #8]	; (80059e0 <vTaskMissedYield+0x10>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20000dac 	.word	0x20000dac

080059e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059ec:	f000 f84e 	bl	8005a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059f0:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <prvIdleTask+0x1c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d9f9      	bls.n	80059ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80059f8:	f000 fcf2 	bl	80063e0 <vPortYield>
		prvCheckTasksWaitingTermination();
 80059fc:	e7f6      	b.n	80059ec <prvIdleTask+0x8>
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	200008c8 	.word	0x200008c8

08005a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	e00c      	b.n	8005a2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	0013      	movs	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	189b      	adds	r3, r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4a14      	ldr	r2, [pc, #80]	; (8005a6c <prvInitialiseTaskLists+0x68>)
 8005a1c:	189b      	adds	r3, r3, r2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f7fe fe39 	bl	8004696 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3301      	adds	r3, #1
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b37      	cmp	r3, #55	; 0x37
 8005a2e:	d9ef      	bls.n	8005a10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <prvInitialiseTaskLists+0x6c>)
 8005a32:	0018      	movs	r0, r3
 8005a34:	f7fe fe2f 	bl	8004696 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a38:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <prvInitialiseTaskLists+0x70>)
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f7fe fe2b 	bl	8004696 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a40:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <prvInitialiseTaskLists+0x74>)
 8005a42:	0018      	movs	r0, r3
 8005a44:	f7fe fe27 	bl	8004696 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <prvInitialiseTaskLists+0x78>)
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f7fe fe23 	bl	8004696 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <prvInitialiseTaskLists+0x7c>)
 8005a52:	0018      	movs	r0, r3
 8005a54:	f7fe fe1f 	bl	8004696 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <prvInitialiseTaskLists+0x80>)
 8005a5a:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <prvInitialiseTaskLists+0x6c>)
 8005a5c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a5e:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <prvInitialiseTaskLists+0x84>)
 8005a60:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <prvInitialiseTaskLists+0x70>)
 8005a62:	601a      	str	r2, [r3, #0]
}
 8005a64:	46c0      	nop			; (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	200008c8 	.word	0x200008c8
 8005a70:	20000d28 	.word	0x20000d28
 8005a74:	20000d3c 	.word	0x20000d3c
 8005a78:	20000d58 	.word	0x20000d58
 8005a7c:	20000d6c 	.word	0x20000d6c
 8005a80:	20000d84 	.word	0x20000d84
 8005a84:	20000d50 	.word	0x20000d50
 8005a88:	20000d54 	.word	0x20000d54

08005a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a92:	e01a      	b.n	8005aca <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005a94:	f000 fcb4 	bl	8006400 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <prvCheckTasksWaitingTermination+0x50>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f7fe fe77 	bl	8004798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <prvCheckTasksWaitingTermination+0x54>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	1e5a      	subs	r2, r3, #1
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <prvCheckTasksWaitingTermination+0x54>)
 8005ab2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <prvCheckTasksWaitingTermination+0x58>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	1e5a      	subs	r2, r3, #1
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <prvCheckTasksWaitingTermination+0x58>)
 8005abc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005abe:	f000 fcb1 	bl	8006424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f000 f80f 	bl	8005ae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <prvCheckTasksWaitingTermination+0x58>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e0      	bne.n	8005a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	46c0      	nop			; (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b002      	add	sp, #8
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20000d6c 	.word	0x20000d6c
 8005ae0:	20000d98 	.word	0x20000d98
 8005ae4:	20000d80 	.word	0x20000d80

08005ae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3354      	adds	r3, #84	; 0x54
 8005af4:	0018      	movs	r0, r3
 8005af6:	f000 ff6b 	bl	80069d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	22b9      	movs	r2, #185	; 0xb9
 8005afe:	5c9b      	ldrb	r3, [r3, r2]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d109      	bne.n	8005b18 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 fdb7 	bl	800667c <vPortFree>
				vPortFree( pxTCB );
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	0018      	movs	r0, r3
 8005b12:	f000 fdb3 	bl	800667c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b16:	e010      	b.n	8005b3a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	22b9      	movs	r2, #185	; 0xb9
 8005b1c:	5c9b      	ldrb	r3, [r3, r2]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d104      	bne.n	8005b2c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f000 fda9 	bl	800667c <vPortFree>
	}
 8005b2a:	e006      	b.n	8005b3a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	22b9      	movs	r2, #185	; 0xb9
 8005b30:	5c9b      	ldrb	r3, [r3, r2]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d001      	beq.n	8005b3a <prvDeleteTCB+0x52>
 8005b36:	b672      	cpsid	i
 8005b38:	e7fe      	b.n	8005b38 <prvDeleteTCB+0x50>
	}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b002      	add	sp, #8
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b4a:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <prvResetNextTaskUnblockTime+0x40>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <prvResetNextTaskUnblockTime+0x14>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <prvResetNextTaskUnblockTime+0x16>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <prvResetNextTaskUnblockTime+0x44>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	4252      	negs	r2, r2
 8005b64:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b66:	e008      	b.n	8005b7a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <prvResetNextTaskUnblockTime+0x40>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	4b04      	ldr	r3, [pc, #16]	; (8005b88 <prvResetNextTaskUnblockTime+0x44>)
 8005b78:	601a      	str	r2, [r3, #0]
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b002      	add	sp, #8
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	20000d50 	.word	0x20000d50
 8005b88:	20000db8 	.word	0x20000db8

08005b8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b92:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <xTaskGetSchedulerState+0x30>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d102      	bne.n	8005ba0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	607b      	str	r3, [r7, #4]
 8005b9e:	e008      	b.n	8005bb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <xTaskGetSchedulerState+0x34>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	607b      	str	r3, [r7, #4]
 8005bac:	e001      	b.n	8005bb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bb2:	687b      	ldr	r3, [r7, #4]
	}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b002      	add	sp, #8
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20000da4 	.word	0x20000da4
 8005bc0:	20000dc0 	.word	0x20000dc0

08005bc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d044      	beq.n	8005c64 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bda:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <xTaskPriorityDisinherit+0xac>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d001      	beq.n	8005be8 <xTaskPriorityDisinherit+0x24>
 8005be4:	b672      	cpsid	i
 8005be6:	e7fe      	b.n	8005be6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <xTaskPriorityDisinherit+0x30>
 8005bf0:	b672      	cpsid	i
 8005bf2:	e7fe      	b.n	8005bf2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf8:	1e5a      	subs	r2, r3, #1
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d02c      	beq.n	8005c64 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d128      	bne.n	8005c64 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	3304      	adds	r3, #4
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7fe fdbe 	bl	8004798 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	2238      	movs	r2, #56	; 0x38
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <xTaskPriorityDisinherit+0xb0>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d903      	bls.n	8005c44 <xTaskPriorityDisinherit+0x80>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c40:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <xTaskPriorityDisinherit+0xb0>)
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c48:	0013      	movs	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	189b      	adds	r3, r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <xTaskPriorityDisinherit+0xb4>)
 8005c52:	189a      	adds	r2, r3, r2
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	3304      	adds	r3, #4
 8005c58:	0019      	movs	r1, r3
 8005c5a:	0010      	movs	r0, r2
 8005c5c:	f7fe fd44 	bl	80046e8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c64:	68fb      	ldr	r3, [r7, #12]
	}
 8005c66:	0018      	movs	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	b004      	add	sp, #16
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	46c0      	nop			; (mov r8, r8)
 8005c70:	200008c4 	.word	0x200008c4
 8005c74:	20000da0 	.word	0x20000da0
 8005c78:	200008c8 	.word	0x200008c8

08005c7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c86:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <prvAddCurrentTaskToDelayedList+0x90>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c8c:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3304      	adds	r3, #4
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7fe fd80 	bl	8004798 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	d10b      	bne.n	8005cb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca4:	4b1a      	ldr	r3, [pc, #104]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	1d1a      	adds	r2, r3, #4
 8005caa:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cac:	0011      	movs	r1, r2
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f7fe fd1a 	bl	80046e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cb4:	e026      	b.n	8005d04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	18d3      	adds	r3, r2, r3
 8005cbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cbe:	4b14      	ldr	r3, [pc, #80]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d209      	bcs.n	8005ce2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	0019      	movs	r1, r3
 8005cda:	0010      	movs	r0, r2
 8005cdc:	f7fe fd26 	bl	800472c <vListInsert>
}
 8005ce0:	e010      	b.n	8005d04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3304      	adds	r3, #4
 8005cec:	0019      	movs	r1, r3
 8005cee:	0010      	movs	r0, r2
 8005cf0:	f7fe fd1c 	bl	800472c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d202      	bcs.n	8005d04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cfe:	4b08      	ldr	r3, [pc, #32]	; (8005d20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	601a      	str	r2, [r3, #0]
}
 8005d04:	46c0      	nop			; (mov r8, r8)
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b004      	add	sp, #16
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20000d9c 	.word	0x20000d9c
 8005d10:	200008c4 	.word	0x200008c4
 8005d14:	20000d84 	.word	0x20000d84
 8005d18:	20000d54 	.word	0x20000d54
 8005d1c:	20000d50 	.word	0x20000d50
 8005d20:	20000db8 	.word	0x20000db8

08005d24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b089      	sub	sp, #36	; 0x24
 8005d28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d2e:	f000 fa87 	bl	8006240 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d32:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <xTimerCreateTimerTask+0x6c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d020      	beq.n	8005d7c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d42:	003a      	movs	r2, r7
 8005d44:	1d39      	adds	r1, r7, #4
 8005d46:	2308      	movs	r3, #8
 8005d48:	18fb      	adds	r3, r7, r3
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f7fe fb0c 	bl	8004368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d50:	683c      	ldr	r4, [r7, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	490f      	ldr	r1, [pc, #60]	; (8005d94 <xTimerCreateTimerTask+0x70>)
 8005d58:	480f      	ldr	r0, [pc, #60]	; (8005d98 <xTimerCreateTimerTask+0x74>)
 8005d5a:	9202      	str	r2, [sp, #8]
 8005d5c:	9301      	str	r3, [sp, #4]
 8005d5e:	2302      	movs	r3, #2
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	2300      	movs	r3, #0
 8005d64:	0022      	movs	r2, r4
 8005d66:	f7ff f968 	bl	800503a <xTaskCreateStatic>
 8005d6a:	0002      	movs	r2, r0
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <xTimerCreateTimerTask+0x78>)
 8005d6e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <xTimerCreateTimerTask+0x78>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <xTimerCreateTimerTask+0x62>
 8005d82:	b672      	cpsid	i
 8005d84:	e7fe      	b.n	8005d84 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8005d86:	68fb      	ldr	r3, [r7, #12]
}
 8005d88:	0018      	movs	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b005      	add	sp, #20
 8005d8e:	bd90      	pop	{r4, r7, pc}
 8005d90:	20000df4 	.word	0x20000df4
 8005d94:	0800764c 	.word	0x0800764c
 8005d98:	08005ea5 	.word	0x08005ea5
 8005d9c:	20000df8 	.word	0x20000df8

08005da0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005da0:	b590      	push	{r4, r7, lr}
 8005da2:	b08b      	sub	sp, #44	; 0x2c
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <xTimerGenericCommand+0x1c>
 8005db8:	b672      	cpsid	i
 8005dba:	e7fe      	b.n	8005dba <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005dbc:	4b1c      	ldr	r3, [pc, #112]	; (8005e30 <xTimerGenericCommand+0x90>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d030      	beq.n	8005e26 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005dc4:	2414      	movs	r4, #20
 8005dc6:	193b      	adds	r3, r7, r4
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dcc:	193b      	adds	r3, r7, r4
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005dd2:	193b      	adds	r3, r7, r4
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2b05      	cmp	r3, #5
 8005ddc:	dc19      	bgt.n	8005e12 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005dde:	f7ff fed5 	bl	8005b8c <xTaskGetSchedulerState>
 8005de2:	0003      	movs	r3, r0
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d109      	bne.n	8005dfc <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005de8:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <xTimerGenericCommand+0x90>)
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dee:	1939      	adds	r1, r7, r4
 8005df0:	2300      	movs	r3, #0
 8005df2:	f7fe fdbf 	bl	8004974 <xQueueGenericSend>
 8005df6:	0003      	movs	r3, r0
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfa:	e014      	b.n	8005e26 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <xTimerGenericCommand+0x90>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	2314      	movs	r3, #20
 8005e02:	18f9      	adds	r1, r7, r3
 8005e04:	2300      	movs	r3, #0
 8005e06:	2200      	movs	r2, #0
 8005e08:	f7fe fdb4 	bl	8004974 <xQueueGenericSend>
 8005e0c:	0003      	movs	r3, r0
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e10:	e009      	b.n	8005e26 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <xTimerGenericCommand+0x90>)
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	2314      	movs	r3, #20
 8005e1a:	18f9      	adds	r1, r7, r3
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f7fe fe6d 	bl	8004afc <xQueueGenericSendFromISR>
 8005e22:	0003      	movs	r3, r0
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b00b      	add	sp, #44	; 0x2c
 8005e2e:	bd90      	pop	{r4, r7, pc}
 8005e30:	20000df4 	.word	0x20000df4

08005e34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e3e:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <prvProcessExpiredTimer+0x6c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f7fe fca3 	bl	8004798 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d119      	bne.n	8005e8e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	18d1      	adds	r1, r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f8b6 	bl	8005fd8 <prvInsertTimerInActiveList>
 8005e6c:	1e03      	subs	r3, r0, #0
 8005e6e:	d00e      	beq.n	8005e8e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	2300      	movs	r3, #0
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	f7ff ff90 	bl	8005da0 <xTimerGenericCommand>
 8005e80:	0003      	movs	r3, r0
 8005e82:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <prvProcessExpiredTimer+0x5a>
 8005e8a:	b672      	cpsid	i
 8005e8c:	e7fe      	b.n	8005e8c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	0010      	movs	r0, r2
 8005e96:	4798      	blx	r3
}
 8005e98:	46c0      	nop			; (mov r8, r8)
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	b004      	add	sp, #16
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000dec 	.word	0x20000dec

08005ea4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eac:	2308      	movs	r3, #8
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f000 f851 	bl	8005f58 <prvGetNextExpireTime>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	0011      	movs	r1, r2
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f000 f803 	bl	8005ecc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ec6:	f000 f8c9 	bl	800605c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eca:	e7ef      	b.n	8005eac <prvTimerTask+0x8>

08005ecc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ed6:	f7ff fac3 	bl	8005460 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eda:	2308      	movs	r3, #8
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f000 f85a 	bl	8005f98 <prvSampleTimeNow>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d129      	bne.n	8005f42 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10c      	bne.n	8005f0e <prvProcessTimerOrBlockTask+0x42>
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d808      	bhi.n	8005f0e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005efc:	f7ff fabc 	bl	8005478 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	0011      	movs	r1, r2
 8005f06:	0018      	movs	r0, r3
 8005f08:	f7ff ff94 	bl	8005e34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f0c:	e01b      	b.n	8005f46 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <prvProcessTimerOrBlockTask+0x84>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	425a      	negs	r2, r3
 8005f1c:	4153      	adcs	r3, r2
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <prvProcessTimerOrBlockTask+0x88>)
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	0019      	movs	r1, r3
 8005f30:	f7ff f850 	bl	8004fd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f34:	f7ff faa0 	bl	8005478 <xTaskResumeAll>
 8005f38:	1e03      	subs	r3, r0, #0
 8005f3a:	d104      	bne.n	8005f46 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005f3c:	f000 fa50 	bl	80063e0 <vPortYield>
}
 8005f40:	e001      	b.n	8005f46 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8005f42:	f7ff fa99 	bl	8005478 <xTaskResumeAll>
}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b004      	add	sp, #16
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	20000df0 	.word	0x20000df0
 8005f54:	20000df4 	.word	0x20000df4

08005f58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f60:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <prvGetNextExpireTime+0x3c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	425a      	negs	r2, r3
 8005f68:	4153      	adcs	r3, r2
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	001a      	movs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f7a:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <prvGetNextExpireTime+0x3c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e001      	b.n	8005f8a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b004      	add	sp, #16
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000dec 	.word	0x20000dec

08005f98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005fa0:	f7ff faf6 	bl	8005590 <xTaskGetTickCount>
 8005fa4:	0003      	movs	r3, r0
 8005fa6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <prvSampleTimeNow+0x3c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d205      	bcs.n	8005fbe <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8005fb2:	f000 f8eb 	bl	800618c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	e002      	b.n	8005fc4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <prvSampleTimeNow+0x3c>)
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	0018      	movs	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b004      	add	sp, #16
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000dfc 	.word	0x20000dfc

08005fd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d812      	bhi.n	8006024 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	1ad2      	subs	r2, r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	429a      	cmp	r2, r3
 800600a:	d302      	bcc.n	8006012 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e01b      	b.n	800604a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006012:	4b10      	ldr	r3, [pc, #64]	; (8006054 <prvInsertTimerInActiveList+0x7c>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	3304      	adds	r3, #4
 800601a:	0019      	movs	r1, r3
 800601c:	0010      	movs	r0, r2
 800601e:	f7fe fb85 	bl	800472c <vListInsert>
 8006022:	e012      	b.n	800604a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d206      	bcs.n	800603a <prvInsertTimerInActiveList+0x62>
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d302      	bcc.n	800603a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e007      	b.n	800604a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800603a:	4b07      	ldr	r3, [pc, #28]	; (8006058 <prvInsertTimerInActiveList+0x80>)
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3304      	adds	r3, #4
 8006042:	0019      	movs	r1, r3
 8006044:	0010      	movs	r0, r2
 8006046:	f7fe fb71 	bl	800472c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800604a:	697b      	ldr	r3, [r7, #20]
}
 800604c:	0018      	movs	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	b006      	add	sp, #24
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000df0 	.word	0x20000df0
 8006058:	20000dec 	.word	0x20000dec

0800605c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b08d      	sub	sp, #52	; 0x34
 8006060:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006062:	e07f      	b.n	8006164 <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006064:	2208      	movs	r2, #8
 8006066:	18bb      	adds	r3, r7, r2
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	da0f      	bge.n	800608e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800606e:	18bb      	adds	r3, r7, r2
 8006070:	3304      	adds	r3, #4
 8006072:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <prvProcessReceivedCommands+0x22>
 800607a:	b672      	cpsid	i
 800607c:	e7fe      	b.n	800607c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	6858      	ldr	r0, [r3, #4]
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	0019      	movs	r1, r3
 800608c:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800608e:	2208      	movs	r2, #8
 8006090:	18bb      	adds	r3, r7, r2
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	db64      	blt.n	8006162 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006098:	18bb      	adds	r3, r7, r2
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d004      	beq.n	80060b0 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	3304      	adds	r3, #4
 80060aa:	0018      	movs	r0, r3
 80060ac:	f7fe fb74 	bl	8004798 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060b0:	1d3b      	adds	r3, r7, #4
 80060b2:	0018      	movs	r0, r3
 80060b4:	f7ff ff70 	bl	8005f98 <prvSampleTimeNow>
 80060b8:	0003      	movs	r3, r0
 80060ba:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80060bc:	2308      	movs	r3, #8
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b09      	cmp	r3, #9
 80060c4:	d84e      	bhi.n	8006164 <prvProcessReceivedCommands+0x108>
 80060c6:	009a      	lsls	r2, r3, #2
 80060c8:	4b2e      	ldr	r3, [pc, #184]	; (8006184 <prvProcessReceivedCommands+0x128>)
 80060ca:	18d3      	adds	r3, r2, r3
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060d0:	2408      	movs	r4, #8
 80060d2:	193b      	adds	r3, r7, r4
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	18d1      	adds	r1, r2, r3
 80060dc:	193b      	adds	r3, r7, r4
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	69fa      	ldr	r2, [r7, #28]
 80060e2:	6a38      	ldr	r0, [r7, #32]
 80060e4:	f7ff ff78 	bl	8005fd8 <prvInsertTimerInActiveList>
 80060e8:	1e03      	subs	r3, r0, #0
 80060ea:	d03b      	beq.n	8006164 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	6a3a      	ldr	r2, [r7, #32]
 80060f2:	0010      	movs	r0, r2
 80060f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d132      	bne.n	8006164 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060fe:	193b      	adds	r3, r7, r4
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	18d2      	adds	r2, r2, r3
 8006108:	6a38      	ldr	r0, [r7, #32]
 800610a:	2300      	movs	r3, #0
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	2300      	movs	r3, #0
 8006110:	2100      	movs	r1, #0
 8006112:	f7ff fe45 	bl	8005da0 <xTimerGenericCommand>
 8006116:	0003      	movs	r3, r0
 8006118:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d121      	bne.n	8006164 <prvProcessReceivedCommands+0x108>
 8006120:	b672      	cpsid	i
 8006122:	e7fe      	b.n	8006122 <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006124:	2308      	movs	r3, #8
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <prvProcessReceivedCommands+0xde>
 8006136:	b672      	cpsid	i
 8006138:	e7fe      	b.n	8006138 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	18d1      	adds	r1, r2, r3
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	6a38      	ldr	r0, [r7, #32]
 8006148:	f7ff ff46 	bl	8005fd8 <prvInsertTimerInActiveList>
					break;
 800614c:	e00a      	b.n	8006164 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	222c      	movs	r2, #44	; 0x2c
 8006152:	5c9b      	ldrb	r3, [r3, r2]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	0018      	movs	r0, r3
 800615c:	f000 fa8e 	bl	800667c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006160:	e000      	b.n	8006164 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006162:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006164:	4b08      	ldr	r3, [pc, #32]	; (8006188 <prvProcessReceivedCommands+0x12c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2208      	movs	r2, #8
 800616a:	18b9      	adds	r1, r7, r2
 800616c:	2200      	movs	r2, #0
 800616e:	0018      	movs	r0, r3
 8006170:	f7fe fd35 	bl	8004bde <xQueueReceive>
 8006174:	1e03      	subs	r3, r0, #0
 8006176:	d000      	beq.n	800617a <prvProcessReceivedCommands+0x11e>
 8006178:	e774      	b.n	8006064 <prvProcessReceivedCommands+0x8>
	}
}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	46c0      	nop			; (mov r8, r8)
 800617e:	46bd      	mov	sp, r7
 8006180:	b00b      	add	sp, #44	; 0x2c
 8006182:	bd90      	pop	{r4, r7, pc}
 8006184:	0800770c 	.word	0x0800770c
 8006188:	20000df4 	.word	0x20000df4

0800618c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006192:	e03e      	b.n	8006212 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006194:	4b28      	ldr	r3, [pc, #160]	; (8006238 <prvSwitchTimerLists+0xac>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800619e:	4b26      	ldr	r3, [pc, #152]	; (8006238 <prvSwitchTimerLists+0xac>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3304      	adds	r3, #4
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7fe faf3 	bl	8004798 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	0010      	movs	r0, r2
 80061ba:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d126      	bne.n	8006212 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	18d3      	adds	r3, r2, r3
 80061cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d90e      	bls.n	80061f4 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061e2:	4b15      	ldr	r3, [pc, #84]	; (8006238 <prvSwitchTimerLists+0xac>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3304      	adds	r3, #4
 80061ea:	0019      	movs	r1, r3
 80061ec:	0010      	movs	r0, r2
 80061ee:	f7fe fa9d 	bl	800472c <vListInsert>
 80061f2:	e00e      	b.n	8006212 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	2300      	movs	r3, #0
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2300      	movs	r3, #0
 80061fe:	2100      	movs	r1, #0
 8006200:	f7ff fdce 	bl	8005da0 <xTimerGenericCommand>
 8006204:	0003      	movs	r3, r0
 8006206:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <prvSwitchTimerLists+0x86>
 800620e:	b672      	cpsid	i
 8006210:	e7fe      	b.n	8006210 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006212:	4b09      	ldr	r3, [pc, #36]	; (8006238 <prvSwitchTimerLists+0xac>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1bb      	bne.n	8006194 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <prvSwitchTimerLists+0xac>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006222:	4b06      	ldr	r3, [pc, #24]	; (800623c <prvSwitchTimerLists+0xb0>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b04      	ldr	r3, [pc, #16]	; (8006238 <prvSwitchTimerLists+0xac>)
 8006228:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800622a:	4b04      	ldr	r3, [pc, #16]	; (800623c <prvSwitchTimerLists+0xb0>)
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	601a      	str	r2, [r3, #0]
}
 8006230:	46c0      	nop			; (mov r8, r8)
 8006232:	46bd      	mov	sp, r7
 8006234:	b006      	add	sp, #24
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20000dec 	.word	0x20000dec
 800623c:	20000df0 	.word	0x20000df0

08006240 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006246:	f000 f8db 	bl	8006400 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800624a:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <prvCheckForValidListAndQueue+0x64>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d123      	bne.n	800629a <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8006252:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <prvCheckForValidListAndQueue+0x68>)
 8006254:	0018      	movs	r0, r3
 8006256:	f7fe fa1e 	bl	8004696 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800625a:	4b14      	ldr	r3, [pc, #80]	; (80062ac <prvCheckForValidListAndQueue+0x6c>)
 800625c:	0018      	movs	r0, r3
 800625e:	f7fe fa1a 	bl	8004696 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006262:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <prvCheckForValidListAndQueue+0x70>)
 8006264:	4a10      	ldr	r2, [pc, #64]	; (80062a8 <prvCheckForValidListAndQueue+0x68>)
 8006266:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006268:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <prvCheckForValidListAndQueue+0x74>)
 800626a:	4a10      	ldr	r2, [pc, #64]	; (80062ac <prvCheckForValidListAndQueue+0x6c>)
 800626c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <prvCheckForValidListAndQueue+0x78>)
 8006270:	4a12      	ldr	r2, [pc, #72]	; (80062bc <prvCheckForValidListAndQueue+0x7c>)
 8006272:	2100      	movs	r1, #0
 8006274:	9100      	str	r1, [sp, #0]
 8006276:	2110      	movs	r1, #16
 8006278:	200a      	movs	r0, #10
 800627a:	f7fe fb09 	bl	8004890 <xQueueGenericCreateStatic>
 800627e:	0002      	movs	r2, r0
 8006280:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <prvCheckForValidListAndQueue+0x64>)
 8006282:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006284:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <prvCheckForValidListAndQueue+0x64>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d006      	beq.n	800629a <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <prvCheckForValidListAndQueue+0x64>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a0b      	ldr	r2, [pc, #44]	; (80062c0 <prvCheckForValidListAndQueue+0x80>)
 8006292:	0011      	movs	r1, r2
 8006294:	0018      	movs	r0, r3
 8006296:	f7fe fe75 	bl	8004f84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800629a:	f000 f8c3 	bl	8006424 <vPortExitCritical>
}
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000df4 	.word	0x20000df4
 80062a8:	20000dc4 	.word	0x20000dc4
 80062ac:	20000dd8 	.word	0x20000dd8
 80062b0:	20000dec 	.word	0x20000dec
 80062b4:	20000df0 	.word	0x20000df0
 80062b8:	20000ea0 	.word	0x20000ea0
 80062bc:	20000e00 	.word	0x20000e00
 80062c0:	08007654 	.word	0x08007654

080062c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3b04      	subs	r3, #4
 80062d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2280      	movs	r2, #128	; 0x80
 80062da:	0452      	lsls	r2, r2, #17
 80062dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b04      	subs	r3, #4
 80062e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3b04      	subs	r3, #4
 80062ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062f0:	4a08      	ldr	r2, [pc, #32]	; (8006314 <pxPortInitialiseStack+0x50>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3b14      	subs	r3, #20
 80062fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3b20      	subs	r3, #32
 8006306:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006308:	68fb      	ldr	r3, [r7, #12]
}
 800630a:	0018      	movs	r0, r3
 800630c:	46bd      	mov	sp, r7
 800630e:	b004      	add	sp, #16
 8006310:	bd80      	pop	{r7, pc}
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	08006319 	.word	0x08006319

08006318 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800631e:	2300      	movs	r3, #0
 8006320:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006322:	4b08      	ldr	r3, [pc, #32]	; (8006344 <prvTaskExitError+0x2c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	d001      	beq.n	800632e <prvTaskExitError+0x16>
 800632a:	b672      	cpsid	i
 800632c:	e7fe      	b.n	800632c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800632e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006330:	46c0      	nop			; (mov r8, r8)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0fc      	beq.n	8006332 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006338:	46c0      	nop			; (mov r8, r8)
 800633a:	46c0      	nop			; (mov r8, r8)
 800633c:	46bd      	mov	sp, r7
 800633e:	b002      	add	sp, #8
 8006340:	bd80      	pop	{r7, pc}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	20000020 	.word	0x20000020

08006348 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800634c:	46c0      	nop			; (mov r8, r8)
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006360 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006360:	4a0b      	ldr	r2, [pc, #44]	; (8006390 <pxCurrentTCBConst2>)
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	3020      	adds	r0, #32
 8006368:	f380 8809 	msr	PSP, r0
 800636c:	2002      	movs	r0, #2
 800636e:	f380 8814 	msr	CONTROL, r0
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006378:	46ae      	mov	lr, r5
 800637a:	bc08      	pop	{r3}
 800637c:	bc04      	pop	{r2}
 800637e:	b662      	cpsie	i
 8006380:	4718      	bx	r3
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	46c0      	nop			; (mov r8, r8)
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	46c0      	nop			; (mov r8, r8)
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	46c0      	nop			; (mov r8, r8)
 800638e:	46c0      	nop			; (mov r8, r8)

08006390 <pxCurrentTCBConst2>:
 8006390:	200008c4 	.word	0x200008c4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006394:	46c0      	nop			; (mov r8, r8)
 8006396:	46c0      	nop			; (mov r8, r8)

08006398 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800639c:	4b0e      	ldr	r3, [pc, #56]	; (80063d8 <xPortStartScheduler+0x40>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <xPortStartScheduler+0x40>)
 80063a2:	21ff      	movs	r1, #255	; 0xff
 80063a4:	0409      	lsls	r1, r1, #16
 80063a6:	430a      	orrs	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <xPortStartScheduler+0x40>)
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <xPortStartScheduler+0x40>)
 80063b0:	21ff      	movs	r1, #255	; 0xff
 80063b2:	0609      	lsls	r1, r1, #24
 80063b4:	430a      	orrs	r2, r1
 80063b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80063b8:	f000 f898 	bl	80064ec <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063bc:	4b07      	ldr	r3, [pc, #28]	; (80063dc <xPortStartScheduler+0x44>)
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80063c2:	f7ff ffcd 	bl	8006360 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063c6:	f7ff f9a5 	bl	8005714 <vTaskSwitchContext>
	prvTaskExitError();
 80063ca:	f7ff ffa5 	bl	8006318 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	0018      	movs	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	e000ed20 	.word	0xe000ed20
 80063dc:	20000020 	.word	0x20000020

080063e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <vPortYield+0x1c>)
 80063e6:	2280      	movs	r2, #128	; 0x80
 80063e8:	0552      	lsls	r2, r2, #21
 80063ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80063ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80063f0:	f3bf 8f6f 	isb	sy
}
 80063f4:	46c0      	nop			; (mov r8, r8)
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	e000ed04 	.word	0xe000ed04

08006400 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8006404:	b672      	cpsid	i
    uxCriticalNesting++;
 8006406:	4b06      	ldr	r3, [pc, #24]	; (8006420 <vPortEnterCritical+0x20>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	4b04      	ldr	r3, [pc, #16]	; (8006420 <vPortEnterCritical+0x20>)
 800640e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006410:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006414:	f3bf 8f6f 	isb	sy
}
 8006418:	46c0      	nop			; (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	20000020 	.word	0x20000020

08006424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <vPortExitCritical+0x2c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <vPortExitCritical+0x10>
 8006430:	b672      	cpsid	i
 8006432:	e7fe      	b.n	8006432 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <vPortExitCritical+0x2c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	1e5a      	subs	r2, r3, #1
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <vPortExitCritical+0x2c>)
 800643c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800643e:	4b04      	ldr	r3, [pc, #16]	; (8006450 <vPortExitCritical+0x2c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d100      	bne.n	8006448 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006446:	b662      	cpsie	i
    }
}
 8006448:	46c0      	nop			; (mov r8, r8)
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	20000020 	.word	0x20000020

08006454 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006454:	f3ef 8010 	mrs	r0, PRIMASK
 8006458:	b672      	cpsid	i
 800645a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800645c:	46c0      	nop			; (mov r8, r8)
 800645e:	0018      	movs	r0, r3

08006460 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006460:	f380 8810 	msr	PRIMASK, r0
 8006464:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006466:	46c0      	nop			; (mov r8, r8)
	...

08006470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006470:	f3ef 8009 	mrs	r0, PSP
 8006474:	4b0e      	ldr	r3, [pc, #56]	; (80064b0 <pxCurrentTCBConst>)
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	3820      	subs	r0, #32
 800647a:	6010      	str	r0, [r2, #0]
 800647c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800647e:	4644      	mov	r4, r8
 8006480:	464d      	mov	r5, r9
 8006482:	4656      	mov	r6, sl
 8006484:	465f      	mov	r7, fp
 8006486:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006488:	b508      	push	{r3, lr}
 800648a:	b672      	cpsid	i
 800648c:	f7ff f942 	bl	8005714 <vTaskSwitchContext>
 8006490:	b662      	cpsie	i
 8006492:	bc0c      	pop	{r2, r3}
 8006494:	6811      	ldr	r1, [r2, #0]
 8006496:	6808      	ldr	r0, [r1, #0]
 8006498:	3010      	adds	r0, #16
 800649a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800649c:	46a0      	mov	r8, r4
 800649e:	46a9      	mov	r9, r5
 80064a0:	46b2      	mov	sl, r6
 80064a2:	46bb      	mov	fp, r7
 80064a4:	f380 8809 	msr	PSP, r0
 80064a8:	3820      	subs	r0, #32
 80064aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80064ac:	4718      	bx	r3
 80064ae:	46c0      	nop			; (mov r8, r8)

080064b0 <pxCurrentTCBConst>:
 80064b0:	200008c4 	.word	0x200008c4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80064b4:	46c0      	nop			; (mov r8, r8)
 80064b6:	46c0      	nop			; (mov r8, r8)

080064b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80064be:	f7ff ffc9 	bl	8006454 <ulSetInterruptMaskFromISR>
 80064c2:	0003      	movs	r3, r0
 80064c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064c6:	f7ff f871 	bl	80055ac <xTaskIncrementTick>
 80064ca:	1e03      	subs	r3, r0, #0
 80064cc:	d003      	beq.n	80064d6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80064ce:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <SysTick_Handler+0x30>)
 80064d0:	2280      	movs	r2, #128	; 0x80
 80064d2:	0552      	lsls	r2, r2, #21
 80064d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	0018      	movs	r0, r3
 80064da:	f7ff ffc1 	bl	8006460 <vClearInterruptMaskFromISR>
}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b002      	add	sp, #8
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <prvSetupTimerInterrupt+0x34>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 80064f6:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <prvSetupTimerInterrupt+0x38>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064fc:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <prvSetupTimerInterrupt+0x3c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	22fa      	movs	r2, #250	; 0xfa
 8006502:	0091      	lsls	r1, r2, #2
 8006504:	0018      	movs	r0, r3
 8006506:	f7f9 fe11 	bl	800012c <__udivsi3>
 800650a:	0003      	movs	r3, r0
 800650c:	001a      	movs	r2, r3
 800650e:	4b07      	ldr	r3, [pc, #28]	; (800652c <prvSetupTimerInterrupt+0x40>)
 8006510:	3a01      	subs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006514:	4b02      	ldr	r3, [pc, #8]	; (8006520 <prvSetupTimerInterrupt+0x34>)
 8006516:	2207      	movs	r2, #7
 8006518:	601a      	str	r2, [r3, #0]
}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	e000e010 	.word	0xe000e010
 8006524:	e000e018 	.word	0xe000e018
 8006528:	2000000c 	.word	0x2000000c
 800652c:	e000e014 	.word	0xe000e014

08006530 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800653c:	f7fe ff90 	bl	8005460 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006540:	4b49      	ldr	r3, [pc, #292]	; (8006668 <pvPortMalloc+0x138>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006548:	f000 f8e0 	bl	800670c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800654c:	4b47      	ldr	r3, [pc, #284]	; (800666c <pvPortMalloc+0x13c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4013      	ands	r3, r2
 8006554:	d000      	beq.n	8006558 <pvPortMalloc+0x28>
 8006556:	e079      	b.n	800664c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d012      	beq.n	8006584 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800655e:	2208      	movs	r2, #8
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	189b      	adds	r3, r3, r2
 8006564:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2207      	movs	r2, #7
 800656a:	4013      	ands	r3, r2
 800656c:	d00a      	beq.n	8006584 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2207      	movs	r2, #7
 8006572:	4393      	bics	r3, r2
 8006574:	3308      	adds	r3, #8
 8006576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2207      	movs	r2, #7
 800657c:	4013      	ands	r3, r2
 800657e:	d001      	beq.n	8006584 <pvPortMalloc+0x54>
 8006580:	b672      	cpsid	i
 8006582:	e7fe      	b.n	8006582 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d060      	beq.n	800664c <pvPortMalloc+0x11c>
 800658a:	4b39      	ldr	r3, [pc, #228]	; (8006670 <pvPortMalloc+0x140>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d85b      	bhi.n	800664c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006594:	4b37      	ldr	r3, [pc, #220]	; (8006674 <pvPortMalloc+0x144>)
 8006596:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006598:	4b36      	ldr	r3, [pc, #216]	; (8006674 <pvPortMalloc+0x144>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800659e:	e004      	b.n	80065aa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d903      	bls.n	80065bc <pvPortMalloc+0x8c>
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1f1      	bne.n	80065a0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065bc:	4b2a      	ldr	r3, [pc, #168]	; (8006668 <pvPortMalloc+0x138>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d042      	beq.n	800664c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2208      	movs	r2, #8
 80065cc:	189b      	adds	r3, r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	1ad2      	subs	r2, r2, r3
 80065e0:	2308      	movs	r3, #8
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d916      	bls.n	8006616 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	18d3      	adds	r3, r2, r3
 80065ee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2207      	movs	r2, #7
 80065f4:	4013      	ands	r3, r2
 80065f6:	d001      	beq.n	80065fc <pvPortMalloc+0xcc>
 80065f8:	b672      	cpsid	i
 80065fa:	e7fe      	b.n	80065fa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	1ad2      	subs	r2, r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	0018      	movs	r0, r3
 8006612:	f000 f8db 	bl	80067cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006616:	4b16      	ldr	r3, [pc, #88]	; (8006670 <pvPortMalloc+0x140>)
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	4b13      	ldr	r3, [pc, #76]	; (8006670 <pvPortMalloc+0x140>)
 8006622:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006624:	4b12      	ldr	r3, [pc, #72]	; (8006670 <pvPortMalloc+0x140>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4b13      	ldr	r3, [pc, #76]	; (8006678 <pvPortMalloc+0x148>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d203      	bcs.n	8006638 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <pvPortMalloc+0x140>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4b10      	ldr	r3, [pc, #64]	; (8006678 <pvPortMalloc+0x148>)
 8006636:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <pvPortMalloc+0x13c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	431a      	orrs	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800664c:	f7fe ff14 	bl	8005478 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2207      	movs	r2, #7
 8006654:	4013      	ands	r3, r2
 8006656:	d001      	beq.n	800665c <pvPortMalloc+0x12c>
 8006658:	b672      	cpsid	i
 800665a:	e7fe      	b.n	800665a <pvPortMalloc+0x12a>
	return pvReturn;
 800665c:	68fb      	ldr	r3, [r7, #12]
}
 800665e:	0018      	movs	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	b006      	add	sp, #24
 8006664:	bd80      	pop	{r7, pc}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	20001af8 	.word	0x20001af8
 800666c:	20001b04 	.word	0x20001b04
 8006670:	20001afc 	.word	0x20001afc
 8006674:	20001af0 	.word	0x20001af0
 8006678:	20001b00 	.word	0x20001b00

0800667c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d035      	beq.n	80066fa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800668e:	2308      	movs	r3, #8
 8006690:	425b      	negs	r3, r3
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	18d3      	adds	r3, r2, r3
 8006696:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	4b18      	ldr	r3, [pc, #96]	; (8006704 <vPortFree+0x88>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4013      	ands	r3, r2
 80066a6:	d101      	bne.n	80066ac <vPortFree+0x30>
 80066a8:	b672      	cpsid	i
 80066aa:	e7fe      	b.n	80066aa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <vPortFree+0x3c>
 80066b4:	b672      	cpsid	i
 80066b6:	e7fe      	b.n	80066b6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	4b11      	ldr	r3, [pc, #68]	; (8006704 <vPortFree+0x88>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4013      	ands	r3, r2
 80066c2:	d01a      	beq.n	80066fa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d116      	bne.n	80066fa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <vPortFree+0x88>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	401a      	ands	r2, r3
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066dc:	f7fe fec0 	bl	8005460 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <vPortFree+0x8c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	18d2      	adds	r2, r2, r3
 80066ea:	4b07      	ldr	r3, [pc, #28]	; (8006708 <vPortFree+0x8c>)
 80066ec:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	0018      	movs	r0, r3
 80066f2:	f000 f86b 	bl	80067cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80066f6:	f7fe febf 	bl	8005478 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	46bd      	mov	sp, r7
 80066fe:	b004      	add	sp, #16
 8006700:	bd80      	pop	{r7, pc}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	20001b04 	.word	0x20001b04
 8006708:	20001afc 	.word	0x20001afc

0800670c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006712:	23c0      	movs	r3, #192	; 0xc0
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006718:	4b26      	ldr	r3, [pc, #152]	; (80067b4 <prvHeapInit+0xa8>)
 800671a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2207      	movs	r2, #7
 8006720:	4013      	ands	r3, r2
 8006722:	d00c      	beq.n	800673e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3307      	adds	r3, #7
 8006728:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2207      	movs	r2, #7
 800672e:	4393      	bics	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	1ad2      	subs	r2, r2, r3
 8006738:	4b1e      	ldr	r3, [pc, #120]	; (80067b4 <prvHeapInit+0xa8>)
 800673a:	18d3      	adds	r3, r2, r3
 800673c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006742:	4b1d      	ldr	r3, [pc, #116]	; (80067b8 <prvHeapInit+0xac>)
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006748:	4b1b      	ldr	r3, [pc, #108]	; (80067b8 <prvHeapInit+0xac>)
 800674a:	2200      	movs	r2, #0
 800674c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	18d3      	adds	r3, r2, r3
 8006754:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006756:	2208      	movs	r2, #8
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2207      	movs	r2, #7
 8006762:	4393      	bics	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	4b14      	ldr	r3, [pc, #80]	; (80067bc <prvHeapInit+0xb0>)
 800676a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800676c:	4b13      	ldr	r3, [pc, #76]	; (80067bc <prvHeapInit+0xb0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2200      	movs	r2, #0
 8006772:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006774:	4b11      	ldr	r3, [pc, #68]	; (80067bc <prvHeapInit+0xb0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	1ad2      	subs	r2, r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800678a:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <prvHeapInit+0xb0>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <prvHeapInit+0xb4>)
 8006798:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <prvHeapInit+0xb8>)
 80067a0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067a2:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <prvHeapInit+0xbc>)
 80067a4:	2280      	movs	r2, #128	; 0x80
 80067a6:	0612      	lsls	r2, r2, #24
 80067a8:	601a      	str	r2, [r3, #0]
}
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	46bd      	mov	sp, r7
 80067ae:	b004      	add	sp, #16
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	20000ef0 	.word	0x20000ef0
 80067b8:	20001af0 	.word	0x20001af0
 80067bc:	20001af8 	.word	0x20001af8
 80067c0:	20001b00 	.word	0x20001b00
 80067c4:	20001afc 	.word	0x20001afc
 80067c8:	20001b04 	.word	0x20001b04

080067cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067d4:	4b27      	ldr	r3, [pc, #156]	; (8006874 <prvInsertBlockIntoFreeList+0xa8>)
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e002      	b.n	80067e0 <prvInsertBlockIntoFreeList+0x14>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d8f7      	bhi.n	80067da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	18d3      	adds	r3, r2, r3
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d108      	bne.n	800680e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	18d2      	adds	r2, r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	18d2      	adds	r2, r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d118      	bne.n	8006854 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b14      	ldr	r3, [pc, #80]	; (8006878 <prvInsertBlockIntoFreeList+0xac>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d00d      	beq.n	800684a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	18d2      	adds	r2, r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e008      	b.n	800685c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800684a:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <prvInsertBlockIntoFreeList+0xac>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	e003      	b.n	800685c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d002      	beq.n	800686a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	46bd      	mov	sp, r7
 800686e:	b004      	add	sp, #16
 8006870:	bd80      	pop	{r7, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	20001af0 	.word	0x20001af0
 8006878:	20001af8 	.word	0x20001af8

0800687c <__errno>:
 800687c:	4b01      	ldr	r3, [pc, #4]	; (8006884 <__errno+0x8>)
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	4770      	bx	lr
 8006882:	46c0      	nop			; (mov r8, r8)
 8006884:	20000024 	.word	0x20000024

08006888 <__libc_init_array>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	2600      	movs	r6, #0
 800688c:	4d0c      	ldr	r5, [pc, #48]	; (80068c0 <__libc_init_array+0x38>)
 800688e:	4c0d      	ldr	r4, [pc, #52]	; (80068c4 <__libc_init_array+0x3c>)
 8006890:	1b64      	subs	r4, r4, r5
 8006892:	10a4      	asrs	r4, r4, #2
 8006894:	42a6      	cmp	r6, r4
 8006896:	d109      	bne.n	80068ac <__libc_init_array+0x24>
 8006898:	2600      	movs	r6, #0
 800689a:	f000 fce1 	bl	8007260 <_init>
 800689e:	4d0a      	ldr	r5, [pc, #40]	; (80068c8 <__libc_init_array+0x40>)
 80068a0:	4c0a      	ldr	r4, [pc, #40]	; (80068cc <__libc_init_array+0x44>)
 80068a2:	1b64      	subs	r4, r4, r5
 80068a4:	10a4      	asrs	r4, r4, #2
 80068a6:	42a6      	cmp	r6, r4
 80068a8:	d105      	bne.n	80068b6 <__libc_init_array+0x2e>
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	00b3      	lsls	r3, r6, #2
 80068ae:	58eb      	ldr	r3, [r5, r3]
 80068b0:	4798      	blx	r3
 80068b2:	3601      	adds	r6, #1
 80068b4:	e7ee      	b.n	8006894 <__libc_init_array+0xc>
 80068b6:	00b3      	lsls	r3, r6, #2
 80068b8:	58eb      	ldr	r3, [r5, r3]
 80068ba:	4798      	blx	r3
 80068bc:	3601      	adds	r6, #1
 80068be:	e7f2      	b.n	80068a6 <__libc_init_array+0x1e>
 80068c0:	080077c8 	.word	0x080077c8
 80068c4:	080077c8 	.word	0x080077c8
 80068c8:	080077c8 	.word	0x080077c8
 80068cc:	080077cc 	.word	0x080077cc

080068d0 <__retarget_lock_acquire_recursive>:
 80068d0:	4770      	bx	lr

080068d2 <__retarget_lock_release_recursive>:
 80068d2:	4770      	bx	lr

080068d4 <memcpy>:
 80068d4:	2300      	movs	r3, #0
 80068d6:	b510      	push	{r4, lr}
 80068d8:	429a      	cmp	r2, r3
 80068da:	d100      	bne.n	80068de <memcpy+0xa>
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	5ccc      	ldrb	r4, [r1, r3]
 80068e0:	54c4      	strb	r4, [r0, r3]
 80068e2:	3301      	adds	r3, #1
 80068e4:	e7f8      	b.n	80068d8 <memcpy+0x4>

080068e6 <memset>:
 80068e6:	0003      	movs	r3, r0
 80068e8:	1882      	adds	r2, r0, r2
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d100      	bne.n	80068f0 <memset+0xa>
 80068ee:	4770      	bx	lr
 80068f0:	7019      	strb	r1, [r3, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	e7f9      	b.n	80068ea <memset+0x4>
	...

080068f8 <_malloc_r>:
 80068f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fa:	2303      	movs	r3, #3
 80068fc:	1ccd      	adds	r5, r1, #3
 80068fe:	439d      	bics	r5, r3
 8006900:	3508      	adds	r5, #8
 8006902:	0006      	movs	r6, r0
 8006904:	2d0c      	cmp	r5, #12
 8006906:	d21f      	bcs.n	8006948 <_malloc_r+0x50>
 8006908:	250c      	movs	r5, #12
 800690a:	42a9      	cmp	r1, r5
 800690c:	d81e      	bhi.n	800694c <_malloc_r+0x54>
 800690e:	0030      	movs	r0, r6
 8006910:	f000 f91c 	bl	8006b4c <__malloc_lock>
 8006914:	4925      	ldr	r1, [pc, #148]	; (80069ac <_malloc_r+0xb4>)
 8006916:	680a      	ldr	r2, [r1, #0]
 8006918:	0014      	movs	r4, r2
 800691a:	2c00      	cmp	r4, #0
 800691c:	d11a      	bne.n	8006954 <_malloc_r+0x5c>
 800691e:	4f24      	ldr	r7, [pc, #144]	; (80069b0 <_malloc_r+0xb8>)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d104      	bne.n	8006930 <_malloc_r+0x38>
 8006926:	0021      	movs	r1, r4
 8006928:	0030      	movs	r0, r6
 800692a:	f000 f8b7 	bl	8006a9c <_sbrk_r>
 800692e:	6038      	str	r0, [r7, #0]
 8006930:	0029      	movs	r1, r5
 8006932:	0030      	movs	r0, r6
 8006934:	f000 f8b2 	bl	8006a9c <_sbrk_r>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d12b      	bne.n	8006994 <_malloc_r+0x9c>
 800693c:	230c      	movs	r3, #12
 800693e:	0030      	movs	r0, r6
 8006940:	6033      	str	r3, [r6, #0]
 8006942:	f000 f90b 	bl	8006b5c <__malloc_unlock>
 8006946:	e003      	b.n	8006950 <_malloc_r+0x58>
 8006948:	2d00      	cmp	r5, #0
 800694a:	dade      	bge.n	800690a <_malloc_r+0x12>
 800694c:	230c      	movs	r3, #12
 800694e:	6033      	str	r3, [r6, #0]
 8006950:	2000      	movs	r0, #0
 8006952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	1b5b      	subs	r3, r3, r5
 8006958:	d419      	bmi.n	800698e <_malloc_r+0x96>
 800695a:	2b0b      	cmp	r3, #11
 800695c:	d903      	bls.n	8006966 <_malloc_r+0x6e>
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	18e4      	adds	r4, r4, r3
 8006962:	6025      	str	r5, [r4, #0]
 8006964:	e003      	b.n	800696e <_malloc_r+0x76>
 8006966:	6863      	ldr	r3, [r4, #4]
 8006968:	42a2      	cmp	r2, r4
 800696a:	d10e      	bne.n	800698a <_malloc_r+0x92>
 800696c:	600b      	str	r3, [r1, #0]
 800696e:	0030      	movs	r0, r6
 8006970:	f000 f8f4 	bl	8006b5c <__malloc_unlock>
 8006974:	0020      	movs	r0, r4
 8006976:	2207      	movs	r2, #7
 8006978:	300b      	adds	r0, #11
 800697a:	1d23      	adds	r3, r4, #4
 800697c:	4390      	bics	r0, r2
 800697e:	1ac2      	subs	r2, r0, r3
 8006980:	4298      	cmp	r0, r3
 8006982:	d0e6      	beq.n	8006952 <_malloc_r+0x5a>
 8006984:	1a1b      	subs	r3, r3, r0
 8006986:	50a3      	str	r3, [r4, r2]
 8006988:	e7e3      	b.n	8006952 <_malloc_r+0x5a>
 800698a:	6053      	str	r3, [r2, #4]
 800698c:	e7ef      	b.n	800696e <_malloc_r+0x76>
 800698e:	0022      	movs	r2, r4
 8006990:	6864      	ldr	r4, [r4, #4]
 8006992:	e7c2      	b.n	800691a <_malloc_r+0x22>
 8006994:	2303      	movs	r3, #3
 8006996:	1cc4      	adds	r4, r0, #3
 8006998:	439c      	bics	r4, r3
 800699a:	42a0      	cmp	r0, r4
 800699c:	d0e1      	beq.n	8006962 <_malloc_r+0x6a>
 800699e:	1a21      	subs	r1, r4, r0
 80069a0:	0030      	movs	r0, r6
 80069a2:	f000 f87b 	bl	8006a9c <_sbrk_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	d1db      	bne.n	8006962 <_malloc_r+0x6a>
 80069aa:	e7c7      	b.n	800693c <_malloc_r+0x44>
 80069ac:	20001b08 	.word	0x20001b08
 80069b0:	20001b0c 	.word	0x20001b0c

080069b4 <cleanup_glue>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	000d      	movs	r5, r1
 80069b8:	6809      	ldr	r1, [r1, #0]
 80069ba:	0004      	movs	r4, r0
 80069bc:	2900      	cmp	r1, #0
 80069be:	d001      	beq.n	80069c4 <cleanup_glue+0x10>
 80069c0:	f7ff fff8 	bl	80069b4 <cleanup_glue>
 80069c4:	0029      	movs	r1, r5
 80069c6:	0020      	movs	r0, r4
 80069c8:	f000 f8d0 	bl	8006b6c <_free_r>
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080069d0 <_reclaim_reent>:
 80069d0:	4b31      	ldr	r3, [pc, #196]	; (8006a98 <_reclaim_reent+0xc8>)
 80069d2:	b570      	push	{r4, r5, r6, lr}
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	0004      	movs	r4, r0
 80069d8:	4283      	cmp	r3, r0
 80069da:	d049      	beq.n	8006a70 <_reclaim_reent+0xa0>
 80069dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <_reclaim_reent+0x28>
 80069e2:	2500      	movs	r5, #0
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	42ab      	cmp	r3, r5
 80069e8:	d147      	bne.n	8006a7a <_reclaim_reent+0xaa>
 80069ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ec:	6819      	ldr	r1, [r3, #0]
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d002      	beq.n	80069f8 <_reclaim_reent+0x28>
 80069f2:	0020      	movs	r0, r4
 80069f4:	f000 f8ba 	bl	8006b6c <_free_r>
 80069f8:	6961      	ldr	r1, [r4, #20]
 80069fa:	2900      	cmp	r1, #0
 80069fc:	d002      	beq.n	8006a04 <_reclaim_reent+0x34>
 80069fe:	0020      	movs	r0, r4
 8006a00:	f000 f8b4 	bl	8006b6c <_free_r>
 8006a04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a06:	2900      	cmp	r1, #0
 8006a08:	d002      	beq.n	8006a10 <_reclaim_reent+0x40>
 8006a0a:	0020      	movs	r0, r4
 8006a0c:	f000 f8ae 	bl	8006b6c <_free_r>
 8006a10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006a12:	2900      	cmp	r1, #0
 8006a14:	d002      	beq.n	8006a1c <_reclaim_reent+0x4c>
 8006a16:	0020      	movs	r0, r4
 8006a18:	f000 f8a8 	bl	8006b6c <_free_r>
 8006a1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	d002      	beq.n	8006a28 <_reclaim_reent+0x58>
 8006a22:	0020      	movs	r0, r4
 8006a24:	f000 f8a2 	bl	8006b6c <_free_r>
 8006a28:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006a2a:	2900      	cmp	r1, #0
 8006a2c:	d002      	beq.n	8006a34 <_reclaim_reent+0x64>
 8006a2e:	0020      	movs	r0, r4
 8006a30:	f000 f89c 	bl	8006b6c <_free_r>
 8006a34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006a36:	2900      	cmp	r1, #0
 8006a38:	d002      	beq.n	8006a40 <_reclaim_reent+0x70>
 8006a3a:	0020      	movs	r0, r4
 8006a3c:	f000 f896 	bl	8006b6c <_free_r>
 8006a40:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006a42:	2900      	cmp	r1, #0
 8006a44:	d002      	beq.n	8006a4c <_reclaim_reent+0x7c>
 8006a46:	0020      	movs	r0, r4
 8006a48:	f000 f890 	bl	8006b6c <_free_r>
 8006a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a4e:	2900      	cmp	r1, #0
 8006a50:	d002      	beq.n	8006a58 <_reclaim_reent+0x88>
 8006a52:	0020      	movs	r0, r4
 8006a54:	f000 f88a 	bl	8006b6c <_free_r>
 8006a58:	69a3      	ldr	r3, [r4, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d008      	beq.n	8006a70 <_reclaim_reent+0xa0>
 8006a5e:	0020      	movs	r0, r4
 8006a60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a62:	4798      	blx	r3
 8006a64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a66:	2900      	cmp	r1, #0
 8006a68:	d002      	beq.n	8006a70 <_reclaim_reent+0xa0>
 8006a6a:	0020      	movs	r0, r4
 8006a6c:	f7ff ffa2 	bl	80069b4 <cleanup_glue>
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	5949      	ldr	r1, [r1, r5]
 8006a74:	2900      	cmp	r1, #0
 8006a76:	d108      	bne.n	8006a8a <_reclaim_reent+0xba>
 8006a78:	3504      	adds	r5, #4
 8006a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a7c:	68d9      	ldr	r1, [r3, #12]
 8006a7e:	2d80      	cmp	r5, #128	; 0x80
 8006a80:	d1f7      	bne.n	8006a72 <_reclaim_reent+0xa2>
 8006a82:	0020      	movs	r0, r4
 8006a84:	f000 f872 	bl	8006b6c <_free_r>
 8006a88:	e7af      	b.n	80069ea <_reclaim_reent+0x1a>
 8006a8a:	680e      	ldr	r6, [r1, #0]
 8006a8c:	0020      	movs	r0, r4
 8006a8e:	f000 f86d 	bl	8006b6c <_free_r>
 8006a92:	0031      	movs	r1, r6
 8006a94:	e7ee      	b.n	8006a74 <_reclaim_reent+0xa4>
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	20000024 	.word	0x20000024

08006a9c <_sbrk_r>:
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	b570      	push	{r4, r5, r6, lr}
 8006aa0:	4d06      	ldr	r5, [pc, #24]	; (8006abc <_sbrk_r+0x20>)
 8006aa2:	0004      	movs	r4, r0
 8006aa4:	0008      	movs	r0, r1
 8006aa6:	602b      	str	r3, [r5, #0]
 8006aa8:	f7fa fa32 	bl	8000f10 <_sbrk>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d103      	bne.n	8006ab8 <_sbrk_r+0x1c>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d000      	beq.n	8006ab8 <_sbrk_r+0x1c>
 8006ab6:	6023      	str	r3, [r4, #0]
 8006ab8:	bd70      	pop	{r4, r5, r6, pc}
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	200028d8 	.word	0x200028d8

08006ac0 <siprintf>:
 8006ac0:	b40e      	push	{r1, r2, r3}
 8006ac2:	b500      	push	{lr}
 8006ac4:	490b      	ldr	r1, [pc, #44]	; (8006af4 <siprintf+0x34>)
 8006ac6:	b09c      	sub	sp, #112	; 0x70
 8006ac8:	ab1d      	add	r3, sp, #116	; 0x74
 8006aca:	9002      	str	r0, [sp, #8]
 8006acc:	9006      	str	r0, [sp, #24]
 8006ace:	9107      	str	r1, [sp, #28]
 8006ad0:	9104      	str	r1, [sp, #16]
 8006ad2:	4809      	ldr	r0, [pc, #36]	; (8006af8 <siprintf+0x38>)
 8006ad4:	4909      	ldr	r1, [pc, #36]	; (8006afc <siprintf+0x3c>)
 8006ad6:	cb04      	ldmia	r3!, {r2}
 8006ad8:	9105      	str	r1, [sp, #20]
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	a902      	add	r1, sp, #8
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	f000 f8f0 	bl	8006cc4 <_svfiprintf_r>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9a02      	ldr	r2, [sp, #8]
 8006ae8:	7013      	strb	r3, [r2, #0]
 8006aea:	b01c      	add	sp, #112	; 0x70
 8006aec:	bc08      	pop	{r3}
 8006aee:	b003      	add	sp, #12
 8006af0:	4718      	bx	r3
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	7fffffff 	.word	0x7fffffff
 8006af8:	20000024 	.word	0x20000024
 8006afc:	ffff0208 	.word	0xffff0208

08006b00 <strncmp>:
 8006b00:	b530      	push	{r4, r5, lr}
 8006b02:	0005      	movs	r5, r0
 8006b04:	1e10      	subs	r0, r2, #0
 8006b06:	d00b      	beq.n	8006b20 <strncmp+0x20>
 8006b08:	2400      	movs	r4, #0
 8006b0a:	3a01      	subs	r2, #1
 8006b0c:	5d2b      	ldrb	r3, [r5, r4]
 8006b0e:	5d08      	ldrb	r0, [r1, r4]
 8006b10:	4283      	cmp	r3, r0
 8006b12:	d104      	bne.n	8006b1e <strncmp+0x1e>
 8006b14:	4294      	cmp	r4, r2
 8006b16:	d002      	beq.n	8006b1e <strncmp+0x1e>
 8006b18:	3401      	adds	r4, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1f6      	bne.n	8006b0c <strncmp+0xc>
 8006b1e:	1a18      	subs	r0, r3, r0
 8006b20:	bd30      	pop	{r4, r5, pc}

08006b22 <strncpy>:
 8006b22:	0003      	movs	r3, r0
 8006b24:	b530      	push	{r4, r5, lr}
 8006b26:	001d      	movs	r5, r3
 8006b28:	2a00      	cmp	r2, #0
 8006b2a:	d006      	beq.n	8006b3a <strncpy+0x18>
 8006b2c:	780c      	ldrb	r4, [r1, #0]
 8006b2e:	3a01      	subs	r2, #1
 8006b30:	3301      	adds	r3, #1
 8006b32:	702c      	strb	r4, [r5, #0]
 8006b34:	3101      	adds	r1, #1
 8006b36:	2c00      	cmp	r4, #0
 8006b38:	d1f5      	bne.n	8006b26 <strncpy+0x4>
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	189a      	adds	r2, r3, r2
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d100      	bne.n	8006b44 <strncpy+0x22>
 8006b42:	bd30      	pop	{r4, r5, pc}
 8006b44:	7019      	strb	r1, [r3, #0]
 8006b46:	3301      	adds	r3, #1
 8006b48:	e7f9      	b.n	8006b3e <strncpy+0x1c>
	...

08006b4c <__malloc_lock>:
 8006b4c:	b510      	push	{r4, lr}
 8006b4e:	4802      	ldr	r0, [pc, #8]	; (8006b58 <__malloc_lock+0xc>)
 8006b50:	f7ff febe 	bl	80068d0 <__retarget_lock_acquire_recursive>
 8006b54:	bd10      	pop	{r4, pc}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	200028d0 	.word	0x200028d0

08006b5c <__malloc_unlock>:
 8006b5c:	b510      	push	{r4, lr}
 8006b5e:	4802      	ldr	r0, [pc, #8]	; (8006b68 <__malloc_unlock+0xc>)
 8006b60:	f7ff feb7 	bl	80068d2 <__retarget_lock_release_recursive>
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	46c0      	nop			; (mov r8, r8)
 8006b68:	200028d0 	.word	0x200028d0

08006b6c <_free_r>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	0005      	movs	r5, r0
 8006b70:	2900      	cmp	r1, #0
 8006b72:	d010      	beq.n	8006b96 <_free_r+0x2a>
 8006b74:	1f0c      	subs	r4, r1, #4
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	da00      	bge.n	8006b7e <_free_r+0x12>
 8006b7c:	18e4      	adds	r4, r4, r3
 8006b7e:	0028      	movs	r0, r5
 8006b80:	f7ff ffe4 	bl	8006b4c <__malloc_lock>
 8006b84:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <_free_r+0x90>)
 8006b86:	6813      	ldr	r3, [r2, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d105      	bne.n	8006b98 <_free_r+0x2c>
 8006b8c:	6063      	str	r3, [r4, #4]
 8006b8e:	6014      	str	r4, [r2, #0]
 8006b90:	0028      	movs	r0, r5
 8006b92:	f7ff ffe3 	bl	8006b5c <__malloc_unlock>
 8006b96:	bd70      	pop	{r4, r5, r6, pc}
 8006b98:	42a3      	cmp	r3, r4
 8006b9a:	d908      	bls.n	8006bae <_free_r+0x42>
 8006b9c:	6821      	ldr	r1, [r4, #0]
 8006b9e:	1860      	adds	r0, r4, r1
 8006ba0:	4283      	cmp	r3, r0
 8006ba2:	d1f3      	bne.n	8006b8c <_free_r+0x20>
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	1841      	adds	r1, r0, r1
 8006baa:	6021      	str	r1, [r4, #0]
 8006bac:	e7ee      	b.n	8006b8c <_free_r+0x20>
 8006bae:	001a      	movs	r2, r3
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <_free_r+0x4e>
 8006bb6:	42a3      	cmp	r3, r4
 8006bb8:	d9f9      	bls.n	8006bae <_free_r+0x42>
 8006bba:	6811      	ldr	r1, [r2, #0]
 8006bbc:	1850      	adds	r0, r2, r1
 8006bbe:	42a0      	cmp	r0, r4
 8006bc0:	d10b      	bne.n	8006bda <_free_r+0x6e>
 8006bc2:	6820      	ldr	r0, [r4, #0]
 8006bc4:	1809      	adds	r1, r1, r0
 8006bc6:	1850      	adds	r0, r2, r1
 8006bc8:	6011      	str	r1, [r2, #0]
 8006bca:	4283      	cmp	r3, r0
 8006bcc:	d1e0      	bne.n	8006b90 <_free_r+0x24>
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	1841      	adds	r1, r0, r1
 8006bd4:	6011      	str	r1, [r2, #0]
 8006bd6:	6053      	str	r3, [r2, #4]
 8006bd8:	e7da      	b.n	8006b90 <_free_r+0x24>
 8006bda:	42a0      	cmp	r0, r4
 8006bdc:	d902      	bls.n	8006be4 <_free_r+0x78>
 8006bde:	230c      	movs	r3, #12
 8006be0:	602b      	str	r3, [r5, #0]
 8006be2:	e7d5      	b.n	8006b90 <_free_r+0x24>
 8006be4:	6821      	ldr	r1, [r4, #0]
 8006be6:	1860      	adds	r0, r4, r1
 8006be8:	4283      	cmp	r3, r0
 8006bea:	d103      	bne.n	8006bf4 <_free_r+0x88>
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	1841      	adds	r1, r0, r1
 8006bf2:	6021      	str	r1, [r4, #0]
 8006bf4:	6063      	str	r3, [r4, #4]
 8006bf6:	6054      	str	r4, [r2, #4]
 8006bf8:	e7ca      	b.n	8006b90 <_free_r+0x24>
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	20001b08 	.word	0x20001b08

08006c00 <__ssputs_r>:
 8006c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c02:	688e      	ldr	r6, [r1, #8]
 8006c04:	b085      	sub	sp, #20
 8006c06:	0007      	movs	r7, r0
 8006c08:	000c      	movs	r4, r1
 8006c0a:	9203      	str	r2, [sp, #12]
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	429e      	cmp	r6, r3
 8006c10:	d83c      	bhi.n	8006c8c <__ssputs_r+0x8c>
 8006c12:	2390      	movs	r3, #144	; 0x90
 8006c14:	898a      	ldrh	r2, [r1, #12]
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	421a      	tst	r2, r3
 8006c1a:	d034      	beq.n	8006c86 <__ssputs_r+0x86>
 8006c1c:	2503      	movs	r5, #3
 8006c1e:	6909      	ldr	r1, [r1, #16]
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	1a5b      	subs	r3, r3, r1
 8006c24:	9302      	str	r3, [sp, #8]
 8006c26:	6963      	ldr	r3, [r4, #20]
 8006c28:	9802      	ldr	r0, [sp, #8]
 8006c2a:	435d      	muls	r5, r3
 8006c2c:	0feb      	lsrs	r3, r5, #31
 8006c2e:	195d      	adds	r5, r3, r5
 8006c30:	9b01      	ldr	r3, [sp, #4]
 8006c32:	106d      	asrs	r5, r5, #1
 8006c34:	3301      	adds	r3, #1
 8006c36:	181b      	adds	r3, r3, r0
 8006c38:	42ab      	cmp	r3, r5
 8006c3a:	d900      	bls.n	8006c3e <__ssputs_r+0x3e>
 8006c3c:	001d      	movs	r5, r3
 8006c3e:	0553      	lsls	r3, r2, #21
 8006c40:	d532      	bpl.n	8006ca8 <__ssputs_r+0xa8>
 8006c42:	0029      	movs	r1, r5
 8006c44:	0038      	movs	r0, r7
 8006c46:	f7ff fe57 	bl	80068f8 <_malloc_r>
 8006c4a:	1e06      	subs	r6, r0, #0
 8006c4c:	d109      	bne.n	8006c62 <__ssputs_r+0x62>
 8006c4e:	230c      	movs	r3, #12
 8006c50:	603b      	str	r3, [r7, #0]
 8006c52:	2340      	movs	r3, #64	; 0x40
 8006c54:	2001      	movs	r0, #1
 8006c56:	89a2      	ldrh	r2, [r4, #12]
 8006c58:	4240      	negs	r0, r0
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	b005      	add	sp, #20
 8006c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c62:	9a02      	ldr	r2, [sp, #8]
 8006c64:	6921      	ldr	r1, [r4, #16]
 8006c66:	f7ff fe35 	bl	80068d4 <memcpy>
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <__ssputs_r+0xc0>)
 8006c6e:	401a      	ands	r2, r3
 8006c70:	2380      	movs	r3, #128	; 0x80
 8006c72:	4313      	orrs	r3, r2
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	9b02      	ldr	r3, [sp, #8]
 8006c78:	6126      	str	r6, [r4, #16]
 8006c7a:	18f6      	adds	r6, r6, r3
 8006c7c:	6026      	str	r6, [r4, #0]
 8006c7e:	6165      	str	r5, [r4, #20]
 8006c80:	9e01      	ldr	r6, [sp, #4]
 8006c82:	1aed      	subs	r5, r5, r3
 8006c84:	60a5      	str	r5, [r4, #8]
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	429e      	cmp	r6, r3
 8006c8a:	d900      	bls.n	8006c8e <__ssputs_r+0x8e>
 8006c8c:	9e01      	ldr	r6, [sp, #4]
 8006c8e:	0032      	movs	r2, r6
 8006c90:	9903      	ldr	r1, [sp, #12]
 8006c92:	6820      	ldr	r0, [r4, #0]
 8006c94:	f000 faa3 	bl	80071de <memmove>
 8006c98:	68a3      	ldr	r3, [r4, #8]
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	1b9b      	subs	r3, r3, r6
 8006c9e:	60a3      	str	r3, [r4, #8]
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	199e      	adds	r6, r3, r6
 8006ca4:	6026      	str	r6, [r4, #0]
 8006ca6:	e7da      	b.n	8006c5e <__ssputs_r+0x5e>
 8006ca8:	002a      	movs	r2, r5
 8006caa:	0038      	movs	r0, r7
 8006cac:	f000 faaa 	bl	8007204 <_realloc_r>
 8006cb0:	1e06      	subs	r6, r0, #0
 8006cb2:	d1e0      	bne.n	8006c76 <__ssputs_r+0x76>
 8006cb4:	0038      	movs	r0, r7
 8006cb6:	6921      	ldr	r1, [r4, #16]
 8006cb8:	f7ff ff58 	bl	8006b6c <_free_r>
 8006cbc:	e7c7      	b.n	8006c4e <__ssputs_r+0x4e>
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	fffffb7f 	.word	0xfffffb7f

08006cc4 <_svfiprintf_r>:
 8006cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cc6:	b0a1      	sub	sp, #132	; 0x84
 8006cc8:	9003      	str	r0, [sp, #12]
 8006cca:	001d      	movs	r5, r3
 8006ccc:	898b      	ldrh	r3, [r1, #12]
 8006cce:	000f      	movs	r7, r1
 8006cd0:	0016      	movs	r6, r2
 8006cd2:	061b      	lsls	r3, r3, #24
 8006cd4:	d511      	bpl.n	8006cfa <_svfiprintf_r+0x36>
 8006cd6:	690b      	ldr	r3, [r1, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10e      	bne.n	8006cfa <_svfiprintf_r+0x36>
 8006cdc:	2140      	movs	r1, #64	; 0x40
 8006cde:	f7ff fe0b 	bl	80068f8 <_malloc_r>
 8006ce2:	6038      	str	r0, [r7, #0]
 8006ce4:	6138      	str	r0, [r7, #16]
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d105      	bne.n	8006cf6 <_svfiprintf_r+0x32>
 8006cea:	230c      	movs	r3, #12
 8006cec:	9a03      	ldr	r2, [sp, #12]
 8006cee:	3801      	subs	r0, #1
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	b021      	add	sp, #132	; 0x84
 8006cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf6:	2340      	movs	r3, #64	; 0x40
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	ac08      	add	r4, sp, #32
 8006cfe:	6163      	str	r3, [r4, #20]
 8006d00:	3320      	adds	r3, #32
 8006d02:	7663      	strb	r3, [r4, #25]
 8006d04:	3310      	adds	r3, #16
 8006d06:	76a3      	strb	r3, [r4, #26]
 8006d08:	9507      	str	r5, [sp, #28]
 8006d0a:	0035      	movs	r5, r6
 8006d0c:	782b      	ldrb	r3, [r5, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <_svfiprintf_r+0x52>
 8006d12:	2b25      	cmp	r3, #37	; 0x25
 8006d14:	d147      	bne.n	8006da6 <_svfiprintf_r+0xe2>
 8006d16:	1bab      	subs	r3, r5, r6
 8006d18:	9305      	str	r3, [sp, #20]
 8006d1a:	42b5      	cmp	r5, r6
 8006d1c:	d00c      	beq.n	8006d38 <_svfiprintf_r+0x74>
 8006d1e:	0032      	movs	r2, r6
 8006d20:	0039      	movs	r1, r7
 8006d22:	9803      	ldr	r0, [sp, #12]
 8006d24:	f7ff ff6c 	bl	8006c00 <__ssputs_r>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d100      	bne.n	8006d2e <_svfiprintf_r+0x6a>
 8006d2c:	e0ae      	b.n	8006e8c <_svfiprintf_r+0x1c8>
 8006d2e:	6962      	ldr	r2, [r4, #20]
 8006d30:	9b05      	ldr	r3, [sp, #20]
 8006d32:	4694      	mov	ip, r2
 8006d34:	4463      	add	r3, ip
 8006d36:	6163      	str	r3, [r4, #20]
 8006d38:	782b      	ldrb	r3, [r5, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d100      	bne.n	8006d40 <_svfiprintf_r+0x7c>
 8006d3e:	e0a5      	b.n	8006e8c <_svfiprintf_r+0x1c8>
 8006d40:	2201      	movs	r2, #1
 8006d42:	2300      	movs	r3, #0
 8006d44:	4252      	negs	r2, r2
 8006d46:	6062      	str	r2, [r4, #4]
 8006d48:	a904      	add	r1, sp, #16
 8006d4a:	3254      	adds	r2, #84	; 0x54
 8006d4c:	1852      	adds	r2, r2, r1
 8006d4e:	1c6e      	adds	r6, r5, #1
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	60e3      	str	r3, [r4, #12]
 8006d54:	60a3      	str	r3, [r4, #8]
 8006d56:	7013      	strb	r3, [r2, #0]
 8006d58:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d5a:	2205      	movs	r2, #5
 8006d5c:	7831      	ldrb	r1, [r6, #0]
 8006d5e:	4854      	ldr	r0, [pc, #336]	; (8006eb0 <_svfiprintf_r+0x1ec>)
 8006d60:	f000 fa32 	bl	80071c8 <memchr>
 8006d64:	1c75      	adds	r5, r6, #1
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d11f      	bne.n	8006daa <_svfiprintf_r+0xe6>
 8006d6a:	6822      	ldr	r2, [r4, #0]
 8006d6c:	06d3      	lsls	r3, r2, #27
 8006d6e:	d504      	bpl.n	8006d7a <_svfiprintf_r+0xb6>
 8006d70:	2353      	movs	r3, #83	; 0x53
 8006d72:	a904      	add	r1, sp, #16
 8006d74:	185b      	adds	r3, r3, r1
 8006d76:	2120      	movs	r1, #32
 8006d78:	7019      	strb	r1, [r3, #0]
 8006d7a:	0713      	lsls	r3, r2, #28
 8006d7c:	d504      	bpl.n	8006d88 <_svfiprintf_r+0xc4>
 8006d7e:	2353      	movs	r3, #83	; 0x53
 8006d80:	a904      	add	r1, sp, #16
 8006d82:	185b      	adds	r3, r3, r1
 8006d84:	212b      	movs	r1, #43	; 0x2b
 8006d86:	7019      	strb	r1, [r3, #0]
 8006d88:	7833      	ldrb	r3, [r6, #0]
 8006d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d8c:	d016      	beq.n	8006dbc <_svfiprintf_r+0xf8>
 8006d8e:	0035      	movs	r5, r6
 8006d90:	2100      	movs	r1, #0
 8006d92:	200a      	movs	r0, #10
 8006d94:	68e3      	ldr	r3, [r4, #12]
 8006d96:	782a      	ldrb	r2, [r5, #0]
 8006d98:	1c6e      	adds	r6, r5, #1
 8006d9a:	3a30      	subs	r2, #48	; 0x30
 8006d9c:	2a09      	cmp	r2, #9
 8006d9e:	d94e      	bls.n	8006e3e <_svfiprintf_r+0x17a>
 8006da0:	2900      	cmp	r1, #0
 8006da2:	d111      	bne.n	8006dc8 <_svfiprintf_r+0x104>
 8006da4:	e017      	b.n	8006dd6 <_svfiprintf_r+0x112>
 8006da6:	3501      	adds	r5, #1
 8006da8:	e7b0      	b.n	8006d0c <_svfiprintf_r+0x48>
 8006daa:	4b41      	ldr	r3, [pc, #260]	; (8006eb0 <_svfiprintf_r+0x1ec>)
 8006dac:	6822      	ldr	r2, [r4, #0]
 8006dae:	1ac0      	subs	r0, r0, r3
 8006db0:	2301      	movs	r3, #1
 8006db2:	4083      	lsls	r3, r0
 8006db4:	4313      	orrs	r3, r2
 8006db6:	002e      	movs	r6, r5
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	e7ce      	b.n	8006d5a <_svfiprintf_r+0x96>
 8006dbc:	9b07      	ldr	r3, [sp, #28]
 8006dbe:	1d19      	adds	r1, r3, #4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	9107      	str	r1, [sp, #28]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	db01      	blt.n	8006dcc <_svfiprintf_r+0x108>
 8006dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dca:	e004      	b.n	8006dd6 <_svfiprintf_r+0x112>
 8006dcc:	425b      	negs	r3, r3
 8006dce:	60e3      	str	r3, [r4, #12]
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	782b      	ldrb	r3, [r5, #0]
 8006dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8006dda:	d10a      	bne.n	8006df2 <_svfiprintf_r+0x12e>
 8006ddc:	786b      	ldrb	r3, [r5, #1]
 8006dde:	2b2a      	cmp	r3, #42	; 0x2a
 8006de0:	d135      	bne.n	8006e4e <_svfiprintf_r+0x18a>
 8006de2:	9b07      	ldr	r3, [sp, #28]
 8006de4:	3502      	adds	r5, #2
 8006de6:	1d1a      	adds	r2, r3, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	9207      	str	r2, [sp, #28]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db2b      	blt.n	8006e48 <_svfiprintf_r+0x184>
 8006df0:	9309      	str	r3, [sp, #36]	; 0x24
 8006df2:	4e30      	ldr	r6, [pc, #192]	; (8006eb4 <_svfiprintf_r+0x1f0>)
 8006df4:	2203      	movs	r2, #3
 8006df6:	0030      	movs	r0, r6
 8006df8:	7829      	ldrb	r1, [r5, #0]
 8006dfa:	f000 f9e5 	bl	80071c8 <memchr>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d006      	beq.n	8006e10 <_svfiprintf_r+0x14c>
 8006e02:	2340      	movs	r3, #64	; 0x40
 8006e04:	1b80      	subs	r0, r0, r6
 8006e06:	4083      	lsls	r3, r0
 8006e08:	6822      	ldr	r2, [r4, #0]
 8006e0a:	3501      	adds	r5, #1
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	7829      	ldrb	r1, [r5, #0]
 8006e12:	2206      	movs	r2, #6
 8006e14:	4828      	ldr	r0, [pc, #160]	; (8006eb8 <_svfiprintf_r+0x1f4>)
 8006e16:	1c6e      	adds	r6, r5, #1
 8006e18:	7621      	strb	r1, [r4, #24]
 8006e1a:	f000 f9d5 	bl	80071c8 <memchr>
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d03c      	beq.n	8006e9c <_svfiprintf_r+0x1d8>
 8006e22:	4b26      	ldr	r3, [pc, #152]	; (8006ebc <_svfiprintf_r+0x1f8>)
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d125      	bne.n	8006e74 <_svfiprintf_r+0x1b0>
 8006e28:	2207      	movs	r2, #7
 8006e2a:	9b07      	ldr	r3, [sp, #28]
 8006e2c:	3307      	adds	r3, #7
 8006e2e:	4393      	bics	r3, r2
 8006e30:	3308      	adds	r3, #8
 8006e32:	9307      	str	r3, [sp, #28]
 8006e34:	6963      	ldr	r3, [r4, #20]
 8006e36:	9a04      	ldr	r2, [sp, #16]
 8006e38:	189b      	adds	r3, r3, r2
 8006e3a:	6163      	str	r3, [r4, #20]
 8006e3c:	e765      	b.n	8006d0a <_svfiprintf_r+0x46>
 8006e3e:	4343      	muls	r3, r0
 8006e40:	0035      	movs	r5, r6
 8006e42:	2101      	movs	r1, #1
 8006e44:	189b      	adds	r3, r3, r2
 8006e46:	e7a6      	b.n	8006d96 <_svfiprintf_r+0xd2>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	425b      	negs	r3, r3
 8006e4c:	e7d0      	b.n	8006df0 <_svfiprintf_r+0x12c>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	200a      	movs	r0, #10
 8006e52:	001a      	movs	r2, r3
 8006e54:	3501      	adds	r5, #1
 8006e56:	6063      	str	r3, [r4, #4]
 8006e58:	7829      	ldrb	r1, [r5, #0]
 8006e5a:	1c6e      	adds	r6, r5, #1
 8006e5c:	3930      	subs	r1, #48	; 0x30
 8006e5e:	2909      	cmp	r1, #9
 8006e60:	d903      	bls.n	8006e6a <_svfiprintf_r+0x1a6>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0c5      	beq.n	8006df2 <_svfiprintf_r+0x12e>
 8006e66:	9209      	str	r2, [sp, #36]	; 0x24
 8006e68:	e7c3      	b.n	8006df2 <_svfiprintf_r+0x12e>
 8006e6a:	4342      	muls	r2, r0
 8006e6c:	0035      	movs	r5, r6
 8006e6e:	2301      	movs	r3, #1
 8006e70:	1852      	adds	r2, r2, r1
 8006e72:	e7f1      	b.n	8006e58 <_svfiprintf_r+0x194>
 8006e74:	ab07      	add	r3, sp, #28
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	003a      	movs	r2, r7
 8006e7a:	0021      	movs	r1, r4
 8006e7c:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <_svfiprintf_r+0x1fc>)
 8006e7e:	9803      	ldr	r0, [sp, #12]
 8006e80:	e000      	b.n	8006e84 <_svfiprintf_r+0x1c0>
 8006e82:	bf00      	nop
 8006e84:	9004      	str	r0, [sp, #16]
 8006e86:	9b04      	ldr	r3, [sp, #16]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	d1d3      	bne.n	8006e34 <_svfiprintf_r+0x170>
 8006e8c:	89bb      	ldrh	r3, [r7, #12]
 8006e8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006e90:	065b      	lsls	r3, r3, #25
 8006e92:	d400      	bmi.n	8006e96 <_svfiprintf_r+0x1d2>
 8006e94:	e72d      	b.n	8006cf2 <_svfiprintf_r+0x2e>
 8006e96:	2001      	movs	r0, #1
 8006e98:	4240      	negs	r0, r0
 8006e9a:	e72a      	b.n	8006cf2 <_svfiprintf_r+0x2e>
 8006e9c:	ab07      	add	r3, sp, #28
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	003a      	movs	r2, r7
 8006ea2:	0021      	movs	r1, r4
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <_svfiprintf_r+0x1fc>)
 8006ea6:	9803      	ldr	r0, [sp, #12]
 8006ea8:	f000 f87c 	bl	8006fa4 <_printf_i>
 8006eac:	e7ea      	b.n	8006e84 <_svfiprintf_r+0x1c0>
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	08007794 	.word	0x08007794
 8006eb4:	0800779a 	.word	0x0800779a
 8006eb8:	0800779e 	.word	0x0800779e
 8006ebc:	00000000 	.word	0x00000000
 8006ec0:	08006c01 	.word	0x08006c01

08006ec4 <_printf_common>:
 8006ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ec6:	0015      	movs	r5, r2
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	688a      	ldr	r2, [r1, #8]
 8006ecc:	690b      	ldr	r3, [r1, #16]
 8006ece:	000c      	movs	r4, r1
 8006ed0:	9000      	str	r0, [sp, #0]
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	da00      	bge.n	8006ed8 <_printf_common+0x14>
 8006ed6:	0013      	movs	r3, r2
 8006ed8:	0022      	movs	r2, r4
 8006eda:	602b      	str	r3, [r5, #0]
 8006edc:	3243      	adds	r2, #67	; 0x43
 8006ede:	7812      	ldrb	r2, [r2, #0]
 8006ee0:	2a00      	cmp	r2, #0
 8006ee2:	d001      	beq.n	8006ee8 <_printf_common+0x24>
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	069b      	lsls	r3, r3, #26
 8006eec:	d502      	bpl.n	8006ef4 <_printf_common+0x30>
 8006eee:	682b      	ldr	r3, [r5, #0]
 8006ef0:	3302      	adds	r3, #2
 8006ef2:	602b      	str	r3, [r5, #0]
 8006ef4:	6822      	ldr	r2, [r4, #0]
 8006ef6:	2306      	movs	r3, #6
 8006ef8:	0017      	movs	r7, r2
 8006efa:	401f      	ands	r7, r3
 8006efc:	421a      	tst	r2, r3
 8006efe:	d027      	beq.n	8006f50 <_printf_common+0x8c>
 8006f00:	0023      	movs	r3, r4
 8006f02:	3343      	adds	r3, #67	; 0x43
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	1e5a      	subs	r2, r3, #1
 8006f08:	4193      	sbcs	r3, r2
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	0692      	lsls	r2, r2, #26
 8006f0e:	d430      	bmi.n	8006f72 <_printf_common+0xae>
 8006f10:	0022      	movs	r2, r4
 8006f12:	9901      	ldr	r1, [sp, #4]
 8006f14:	9800      	ldr	r0, [sp, #0]
 8006f16:	9e08      	ldr	r6, [sp, #32]
 8006f18:	3243      	adds	r2, #67	; 0x43
 8006f1a:	47b0      	blx	r6
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d025      	beq.n	8006f6c <_printf_common+0xa8>
 8006f20:	2306      	movs	r3, #6
 8006f22:	6820      	ldr	r0, [r4, #0]
 8006f24:	682a      	ldr	r2, [r5, #0]
 8006f26:	68e1      	ldr	r1, [r4, #12]
 8006f28:	2500      	movs	r5, #0
 8006f2a:	4003      	ands	r3, r0
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d103      	bne.n	8006f38 <_printf_common+0x74>
 8006f30:	1a8d      	subs	r5, r1, r2
 8006f32:	43eb      	mvns	r3, r5
 8006f34:	17db      	asrs	r3, r3, #31
 8006f36:	401d      	ands	r5, r3
 8006f38:	68a3      	ldr	r3, [r4, #8]
 8006f3a:	6922      	ldr	r2, [r4, #16]
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	dd01      	ble.n	8006f44 <_printf_common+0x80>
 8006f40:	1a9b      	subs	r3, r3, r2
 8006f42:	18ed      	adds	r5, r5, r3
 8006f44:	2700      	movs	r7, #0
 8006f46:	42bd      	cmp	r5, r7
 8006f48:	d120      	bne.n	8006f8c <_printf_common+0xc8>
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	e010      	b.n	8006f70 <_printf_common+0xac>
 8006f4e:	3701      	adds	r7, #1
 8006f50:	68e3      	ldr	r3, [r4, #12]
 8006f52:	682a      	ldr	r2, [r5, #0]
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	42bb      	cmp	r3, r7
 8006f58:	ddd2      	ble.n	8006f00 <_printf_common+0x3c>
 8006f5a:	0022      	movs	r2, r4
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	9901      	ldr	r1, [sp, #4]
 8006f60:	9800      	ldr	r0, [sp, #0]
 8006f62:	9e08      	ldr	r6, [sp, #32]
 8006f64:	3219      	adds	r2, #25
 8006f66:	47b0      	blx	r6
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d1f0      	bne.n	8006f4e <_printf_common+0x8a>
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	4240      	negs	r0, r0
 8006f70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f72:	2030      	movs	r0, #48	; 0x30
 8006f74:	18e1      	adds	r1, r4, r3
 8006f76:	3143      	adds	r1, #67	; 0x43
 8006f78:	7008      	strb	r0, [r1, #0]
 8006f7a:	0021      	movs	r1, r4
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	3145      	adds	r1, #69	; 0x45
 8006f80:	7809      	ldrb	r1, [r1, #0]
 8006f82:	18a2      	adds	r2, r4, r2
 8006f84:	3243      	adds	r2, #67	; 0x43
 8006f86:	3302      	adds	r3, #2
 8006f88:	7011      	strb	r1, [r2, #0]
 8006f8a:	e7c1      	b.n	8006f10 <_printf_common+0x4c>
 8006f8c:	0022      	movs	r2, r4
 8006f8e:	2301      	movs	r3, #1
 8006f90:	9901      	ldr	r1, [sp, #4]
 8006f92:	9800      	ldr	r0, [sp, #0]
 8006f94:	9e08      	ldr	r6, [sp, #32]
 8006f96:	321a      	adds	r2, #26
 8006f98:	47b0      	blx	r6
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	d0e6      	beq.n	8006f6c <_printf_common+0xa8>
 8006f9e:	3701      	adds	r7, #1
 8006fa0:	e7d1      	b.n	8006f46 <_printf_common+0x82>
	...

08006fa4 <_printf_i>:
 8006fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fa6:	b08b      	sub	sp, #44	; 0x2c
 8006fa8:	9206      	str	r2, [sp, #24]
 8006faa:	000a      	movs	r2, r1
 8006fac:	3243      	adds	r2, #67	; 0x43
 8006fae:	9307      	str	r3, [sp, #28]
 8006fb0:	9005      	str	r0, [sp, #20]
 8006fb2:	9204      	str	r2, [sp, #16]
 8006fb4:	7e0a      	ldrb	r2, [r1, #24]
 8006fb6:	000c      	movs	r4, r1
 8006fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fba:	2a78      	cmp	r2, #120	; 0x78
 8006fbc:	d806      	bhi.n	8006fcc <_printf_i+0x28>
 8006fbe:	2a62      	cmp	r2, #98	; 0x62
 8006fc0:	d808      	bhi.n	8006fd4 <_printf_i+0x30>
 8006fc2:	2a00      	cmp	r2, #0
 8006fc4:	d100      	bne.n	8006fc8 <_printf_i+0x24>
 8006fc6:	e0c0      	b.n	800714a <_printf_i+0x1a6>
 8006fc8:	2a58      	cmp	r2, #88	; 0x58
 8006fca:	d052      	beq.n	8007072 <_printf_i+0xce>
 8006fcc:	0026      	movs	r6, r4
 8006fce:	3642      	adds	r6, #66	; 0x42
 8006fd0:	7032      	strb	r2, [r6, #0]
 8006fd2:	e022      	b.n	800701a <_printf_i+0x76>
 8006fd4:	0010      	movs	r0, r2
 8006fd6:	3863      	subs	r0, #99	; 0x63
 8006fd8:	2815      	cmp	r0, #21
 8006fda:	d8f7      	bhi.n	8006fcc <_printf_i+0x28>
 8006fdc:	f7f9 f89c 	bl	8000118 <__gnu_thumb1_case_shi>
 8006fe0:	001f0016 	.word	0x001f0016
 8006fe4:	fff6fff6 	.word	0xfff6fff6
 8006fe8:	fff6fff6 	.word	0xfff6fff6
 8006fec:	fff6001f 	.word	0xfff6001f
 8006ff0:	fff6fff6 	.word	0xfff6fff6
 8006ff4:	00a8fff6 	.word	0x00a8fff6
 8006ff8:	009a0036 	.word	0x009a0036
 8006ffc:	fff6fff6 	.word	0xfff6fff6
 8007000:	fff600b9 	.word	0xfff600b9
 8007004:	fff60036 	.word	0xfff60036
 8007008:	009efff6 	.word	0x009efff6
 800700c:	0026      	movs	r6, r4
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	3642      	adds	r6, #66	; 0x42
 8007012:	1d11      	adds	r1, r2, #4
 8007014:	6019      	str	r1, [r3, #0]
 8007016:	6813      	ldr	r3, [r2, #0]
 8007018:	7033      	strb	r3, [r6, #0]
 800701a:	2301      	movs	r3, #1
 800701c:	e0a7      	b.n	800716e <_printf_i+0x1ca>
 800701e:	6808      	ldr	r0, [r1, #0]
 8007020:	6819      	ldr	r1, [r3, #0]
 8007022:	1d0a      	adds	r2, r1, #4
 8007024:	0605      	lsls	r5, r0, #24
 8007026:	d50b      	bpl.n	8007040 <_printf_i+0x9c>
 8007028:	680d      	ldr	r5, [r1, #0]
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	2d00      	cmp	r5, #0
 800702e:	da03      	bge.n	8007038 <_printf_i+0x94>
 8007030:	232d      	movs	r3, #45	; 0x2d
 8007032:	9a04      	ldr	r2, [sp, #16]
 8007034:	426d      	negs	r5, r5
 8007036:	7013      	strb	r3, [r2, #0]
 8007038:	4b61      	ldr	r3, [pc, #388]	; (80071c0 <_printf_i+0x21c>)
 800703a:	270a      	movs	r7, #10
 800703c:	9303      	str	r3, [sp, #12]
 800703e:	e032      	b.n	80070a6 <_printf_i+0x102>
 8007040:	680d      	ldr	r5, [r1, #0]
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	0641      	lsls	r1, r0, #25
 8007046:	d5f1      	bpl.n	800702c <_printf_i+0x88>
 8007048:	b22d      	sxth	r5, r5
 800704a:	e7ef      	b.n	800702c <_printf_i+0x88>
 800704c:	680d      	ldr	r5, [r1, #0]
 800704e:	6819      	ldr	r1, [r3, #0]
 8007050:	1d08      	adds	r0, r1, #4
 8007052:	6018      	str	r0, [r3, #0]
 8007054:	062e      	lsls	r6, r5, #24
 8007056:	d501      	bpl.n	800705c <_printf_i+0xb8>
 8007058:	680d      	ldr	r5, [r1, #0]
 800705a:	e003      	b.n	8007064 <_printf_i+0xc0>
 800705c:	066d      	lsls	r5, r5, #25
 800705e:	d5fb      	bpl.n	8007058 <_printf_i+0xb4>
 8007060:	680d      	ldr	r5, [r1, #0]
 8007062:	b2ad      	uxth	r5, r5
 8007064:	4b56      	ldr	r3, [pc, #344]	; (80071c0 <_printf_i+0x21c>)
 8007066:	270a      	movs	r7, #10
 8007068:	9303      	str	r3, [sp, #12]
 800706a:	2a6f      	cmp	r2, #111	; 0x6f
 800706c:	d117      	bne.n	800709e <_printf_i+0xfa>
 800706e:	2708      	movs	r7, #8
 8007070:	e015      	b.n	800709e <_printf_i+0xfa>
 8007072:	3145      	adds	r1, #69	; 0x45
 8007074:	700a      	strb	r2, [r1, #0]
 8007076:	4a52      	ldr	r2, [pc, #328]	; (80071c0 <_printf_i+0x21c>)
 8007078:	9203      	str	r2, [sp, #12]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	6821      	ldr	r1, [r4, #0]
 800707e:	ca20      	ldmia	r2!, {r5}
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	0608      	lsls	r0, r1, #24
 8007084:	d550      	bpl.n	8007128 <_printf_i+0x184>
 8007086:	07cb      	lsls	r3, r1, #31
 8007088:	d502      	bpl.n	8007090 <_printf_i+0xec>
 800708a:	2320      	movs	r3, #32
 800708c:	4319      	orrs	r1, r3
 800708e:	6021      	str	r1, [r4, #0]
 8007090:	2710      	movs	r7, #16
 8007092:	2d00      	cmp	r5, #0
 8007094:	d103      	bne.n	800709e <_printf_i+0xfa>
 8007096:	2320      	movs	r3, #32
 8007098:	6822      	ldr	r2, [r4, #0]
 800709a:	439a      	bics	r2, r3
 800709c:	6022      	str	r2, [r4, #0]
 800709e:	0023      	movs	r3, r4
 80070a0:	2200      	movs	r2, #0
 80070a2:	3343      	adds	r3, #67	; 0x43
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	6863      	ldr	r3, [r4, #4]
 80070a8:	60a3      	str	r3, [r4, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	db03      	blt.n	80070b6 <_printf_i+0x112>
 80070ae:	2204      	movs	r2, #4
 80070b0:	6821      	ldr	r1, [r4, #0]
 80070b2:	4391      	bics	r1, r2
 80070b4:	6021      	str	r1, [r4, #0]
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	d102      	bne.n	80070c0 <_printf_i+0x11c>
 80070ba:	9e04      	ldr	r6, [sp, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00c      	beq.n	80070da <_printf_i+0x136>
 80070c0:	9e04      	ldr	r6, [sp, #16]
 80070c2:	0028      	movs	r0, r5
 80070c4:	0039      	movs	r1, r7
 80070c6:	f7f9 f8b7 	bl	8000238 <__aeabi_uidivmod>
 80070ca:	9b03      	ldr	r3, [sp, #12]
 80070cc:	3e01      	subs	r6, #1
 80070ce:	5c5b      	ldrb	r3, [r3, r1]
 80070d0:	7033      	strb	r3, [r6, #0]
 80070d2:	002b      	movs	r3, r5
 80070d4:	0005      	movs	r5, r0
 80070d6:	429f      	cmp	r7, r3
 80070d8:	d9f3      	bls.n	80070c2 <_printf_i+0x11e>
 80070da:	2f08      	cmp	r7, #8
 80070dc:	d109      	bne.n	80070f2 <_printf_i+0x14e>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	07db      	lsls	r3, r3, #31
 80070e2:	d506      	bpl.n	80070f2 <_printf_i+0x14e>
 80070e4:	6863      	ldr	r3, [r4, #4]
 80070e6:	6922      	ldr	r2, [r4, #16]
 80070e8:	4293      	cmp	r3, r2
 80070ea:	dc02      	bgt.n	80070f2 <_printf_i+0x14e>
 80070ec:	2330      	movs	r3, #48	; 0x30
 80070ee:	3e01      	subs	r6, #1
 80070f0:	7033      	strb	r3, [r6, #0]
 80070f2:	9b04      	ldr	r3, [sp, #16]
 80070f4:	1b9b      	subs	r3, r3, r6
 80070f6:	6123      	str	r3, [r4, #16]
 80070f8:	9b07      	ldr	r3, [sp, #28]
 80070fa:	0021      	movs	r1, r4
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	9805      	ldr	r0, [sp, #20]
 8007100:	9b06      	ldr	r3, [sp, #24]
 8007102:	aa09      	add	r2, sp, #36	; 0x24
 8007104:	f7ff fede 	bl	8006ec4 <_printf_common>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d135      	bne.n	8007178 <_printf_i+0x1d4>
 800710c:	2001      	movs	r0, #1
 800710e:	4240      	negs	r0, r0
 8007110:	b00b      	add	sp, #44	; 0x2c
 8007112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007114:	2220      	movs	r2, #32
 8007116:	6809      	ldr	r1, [r1, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	6022      	str	r2, [r4, #0]
 800711c:	0022      	movs	r2, r4
 800711e:	2178      	movs	r1, #120	; 0x78
 8007120:	3245      	adds	r2, #69	; 0x45
 8007122:	7011      	strb	r1, [r2, #0]
 8007124:	4a27      	ldr	r2, [pc, #156]	; (80071c4 <_printf_i+0x220>)
 8007126:	e7a7      	b.n	8007078 <_printf_i+0xd4>
 8007128:	0648      	lsls	r0, r1, #25
 800712a:	d5ac      	bpl.n	8007086 <_printf_i+0xe2>
 800712c:	b2ad      	uxth	r5, r5
 800712e:	e7aa      	b.n	8007086 <_printf_i+0xe2>
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	680d      	ldr	r5, [r1, #0]
 8007134:	1d10      	adds	r0, r2, #4
 8007136:	6949      	ldr	r1, [r1, #20]
 8007138:	6018      	str	r0, [r3, #0]
 800713a:	6813      	ldr	r3, [r2, #0]
 800713c:	062e      	lsls	r6, r5, #24
 800713e:	d501      	bpl.n	8007144 <_printf_i+0x1a0>
 8007140:	6019      	str	r1, [r3, #0]
 8007142:	e002      	b.n	800714a <_printf_i+0x1a6>
 8007144:	066d      	lsls	r5, r5, #25
 8007146:	d5fb      	bpl.n	8007140 <_printf_i+0x19c>
 8007148:	8019      	strh	r1, [r3, #0]
 800714a:	2300      	movs	r3, #0
 800714c:	9e04      	ldr	r6, [sp, #16]
 800714e:	6123      	str	r3, [r4, #16]
 8007150:	e7d2      	b.n	80070f8 <_printf_i+0x154>
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	1d11      	adds	r1, r2, #4
 8007156:	6019      	str	r1, [r3, #0]
 8007158:	6816      	ldr	r6, [r2, #0]
 800715a:	2100      	movs	r1, #0
 800715c:	0030      	movs	r0, r6
 800715e:	6862      	ldr	r2, [r4, #4]
 8007160:	f000 f832 	bl	80071c8 <memchr>
 8007164:	2800      	cmp	r0, #0
 8007166:	d001      	beq.n	800716c <_printf_i+0x1c8>
 8007168:	1b80      	subs	r0, r0, r6
 800716a:	6060      	str	r0, [r4, #4]
 800716c:	6863      	ldr	r3, [r4, #4]
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	2300      	movs	r3, #0
 8007172:	9a04      	ldr	r2, [sp, #16]
 8007174:	7013      	strb	r3, [r2, #0]
 8007176:	e7bf      	b.n	80070f8 <_printf_i+0x154>
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	0032      	movs	r2, r6
 800717c:	9906      	ldr	r1, [sp, #24]
 800717e:	9805      	ldr	r0, [sp, #20]
 8007180:	9d07      	ldr	r5, [sp, #28]
 8007182:	47a8      	blx	r5
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	d0c1      	beq.n	800710c <_printf_i+0x168>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	079b      	lsls	r3, r3, #30
 800718c:	d415      	bmi.n	80071ba <_printf_i+0x216>
 800718e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007190:	68e0      	ldr	r0, [r4, #12]
 8007192:	4298      	cmp	r0, r3
 8007194:	dabc      	bge.n	8007110 <_printf_i+0x16c>
 8007196:	0018      	movs	r0, r3
 8007198:	e7ba      	b.n	8007110 <_printf_i+0x16c>
 800719a:	0022      	movs	r2, r4
 800719c:	2301      	movs	r3, #1
 800719e:	9906      	ldr	r1, [sp, #24]
 80071a0:	9805      	ldr	r0, [sp, #20]
 80071a2:	9e07      	ldr	r6, [sp, #28]
 80071a4:	3219      	adds	r2, #25
 80071a6:	47b0      	blx	r6
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d0af      	beq.n	800710c <_printf_i+0x168>
 80071ac:	3501      	adds	r5, #1
 80071ae:	68e3      	ldr	r3, [r4, #12]
 80071b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	42ab      	cmp	r3, r5
 80071b6:	dcf0      	bgt.n	800719a <_printf_i+0x1f6>
 80071b8:	e7e9      	b.n	800718e <_printf_i+0x1ea>
 80071ba:	2500      	movs	r5, #0
 80071bc:	e7f7      	b.n	80071ae <_printf_i+0x20a>
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	080077a5 	.word	0x080077a5
 80071c4:	080077b6 	.word	0x080077b6

080071c8 <memchr>:
 80071c8:	b2c9      	uxtb	r1, r1
 80071ca:	1882      	adds	r2, r0, r2
 80071cc:	4290      	cmp	r0, r2
 80071ce:	d101      	bne.n	80071d4 <memchr+0xc>
 80071d0:	2000      	movs	r0, #0
 80071d2:	4770      	bx	lr
 80071d4:	7803      	ldrb	r3, [r0, #0]
 80071d6:	428b      	cmp	r3, r1
 80071d8:	d0fb      	beq.n	80071d2 <memchr+0xa>
 80071da:	3001      	adds	r0, #1
 80071dc:	e7f6      	b.n	80071cc <memchr+0x4>

080071de <memmove>:
 80071de:	b510      	push	{r4, lr}
 80071e0:	4288      	cmp	r0, r1
 80071e2:	d902      	bls.n	80071ea <memmove+0xc>
 80071e4:	188b      	adds	r3, r1, r2
 80071e6:	4298      	cmp	r0, r3
 80071e8:	d303      	bcc.n	80071f2 <memmove+0x14>
 80071ea:	2300      	movs	r3, #0
 80071ec:	e007      	b.n	80071fe <memmove+0x20>
 80071ee:	5c8b      	ldrb	r3, [r1, r2]
 80071f0:	5483      	strb	r3, [r0, r2]
 80071f2:	3a01      	subs	r2, #1
 80071f4:	d2fb      	bcs.n	80071ee <memmove+0x10>
 80071f6:	bd10      	pop	{r4, pc}
 80071f8:	5ccc      	ldrb	r4, [r1, r3]
 80071fa:	54c4      	strb	r4, [r0, r3]
 80071fc:	3301      	adds	r3, #1
 80071fe:	429a      	cmp	r2, r3
 8007200:	d1fa      	bne.n	80071f8 <memmove+0x1a>
 8007202:	e7f8      	b.n	80071f6 <memmove+0x18>

08007204 <_realloc_r>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	0007      	movs	r7, r0
 8007208:	000d      	movs	r5, r1
 800720a:	0016      	movs	r6, r2
 800720c:	2900      	cmp	r1, #0
 800720e:	d105      	bne.n	800721c <_realloc_r+0x18>
 8007210:	0011      	movs	r1, r2
 8007212:	f7ff fb71 	bl	80068f8 <_malloc_r>
 8007216:	0004      	movs	r4, r0
 8007218:	0020      	movs	r0, r4
 800721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800721c:	2a00      	cmp	r2, #0
 800721e:	d103      	bne.n	8007228 <_realloc_r+0x24>
 8007220:	f7ff fca4 	bl	8006b6c <_free_r>
 8007224:	0034      	movs	r4, r6
 8007226:	e7f7      	b.n	8007218 <_realloc_r+0x14>
 8007228:	f000 f812 	bl	8007250 <_malloc_usable_size_r>
 800722c:	002c      	movs	r4, r5
 800722e:	42b0      	cmp	r0, r6
 8007230:	d2f2      	bcs.n	8007218 <_realloc_r+0x14>
 8007232:	0031      	movs	r1, r6
 8007234:	0038      	movs	r0, r7
 8007236:	f7ff fb5f 	bl	80068f8 <_malloc_r>
 800723a:	1e04      	subs	r4, r0, #0
 800723c:	d0ec      	beq.n	8007218 <_realloc_r+0x14>
 800723e:	0029      	movs	r1, r5
 8007240:	0032      	movs	r2, r6
 8007242:	f7ff fb47 	bl	80068d4 <memcpy>
 8007246:	0029      	movs	r1, r5
 8007248:	0038      	movs	r0, r7
 800724a:	f7ff fc8f 	bl	8006b6c <_free_r>
 800724e:	e7e3      	b.n	8007218 <_realloc_r+0x14>

08007250 <_malloc_usable_size_r>:
 8007250:	1f0b      	subs	r3, r1, #4
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	1f18      	subs	r0, r3, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	da01      	bge.n	800725e <_malloc_usable_size_r+0xe>
 800725a:	580b      	ldr	r3, [r1, r0]
 800725c:	18c0      	adds	r0, r0, r3
 800725e:	4770      	bx	lr

08007260 <_init>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	46c0      	nop			; (mov r8, r8)
 8007264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007266:	bc08      	pop	{r3}
 8007268:	469e      	mov	lr, r3
 800726a:	4770      	bx	lr

0800726c <_fini>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr
